import { Component, Input, ElementRef, OnChanges, ChangeDetectionStrategy, ViewEncapsulation, HostListener, AfterViewInit } from '@angular/core';
import * as d3 from 'd3';

import { computeDimensions } from '../compute-dimensions';
import { convertInterpolation } from '../convert-interpolation';
import { SunburstConfiguration } from './sunburst-configuration.interface';

const defaultWidth = 640;
const defaultHeight = 640;

@Component({
  selector: 'mb-sunburst',
  templateUrl: './sunburst.component.html',
  styleUrls: ['./sunburst.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  encapsulation: ViewEncapsulation.None
})
export class SunburstComponent implements OnChanges, AfterViewInit {
  private currentConfiguration: SunburstConfiguration = {
    fillColor: 'steelblue', strokeColor: undefined, strokeWidth: 1, interpolation: 'linear'
  };
  private currentData: any;

  /** If the chart is zoomable. Tapping on a sector zooms in, tapping in the center zooms out. */
  @Input() zoomable: boolean = false;

  /** A width of the sparkline. */
  @Input() width: number | string = defaultWidth;

  /** A height of the sparkline. */
  @Input() height: number | string = defaultHeight;

  /** Specifies fill, stroke and interpolation. */
  @Input() set configuration(cfg: SunburstConfiguration) {
    if (cfg && cfg != null) {
      this.currentConfiguration = { ...this.currentConfiguration, ...cfg };
    }
  }
  get configuration(): SunburstConfiguration {
    return this.currentConfiguration;
  }

  /** The data hierarchy to use. */
  @Input() set data(newData: any) {
    this.currentData = newData;
  }
  get data(): any {
    return this.currentData;
  }

  constructor(private elementRef: ElementRef) { }

  ngAfterViewInit() {
    setTimeout(() => this.render(), 0);
  }

  ngOnChanges(changes: any) {
    this.render();
  }

  @HostListener('window:resize', [])
  public render(): void {
    const sel = d3.select(this.elementRef.nativeElement);
    sel.select('svg').remove();
    const dat = this.currentData;
    if (!dat || dat.length < 1) {
      return;
    }
    const data = this.currentData;
    const cfg = this.currentConfiguration;
    const computed = computeDimensions(this.elementRef, this.width, this.height, defaultWidth, defaultHeight);
    const w = computed[0];
    const h = computed[1];
    const s = Math.min(w, h);
    const s2 = s / 2;
    const format = d3.format(',d');

    const svg: any = sel.append('svg').attr('preserveAspectRatio', 'xMinYMin meet')
      .attr('width', s).attr('height', s).attr('viewBox', `0 0 ${s} ${s}`);
    const g = svg.append('g')
      .attr('transform', `translate(${s2},${s2})`);

    if (this.zoomable) {
      const partition = (data: any) => {
        const root = d3.hierarchy(data)
          //.sum(d => d.value)
          .sum(d => d.children ? 0 : 1)
          .sort((a: any, b: any) => b.value - a.value);
        return d3.partition()
          .size([2 * Math.PI, root.height + 1])(root);
      };
      const root = partition(data);
      root.each((d: any) => d.current = d);
  
      const n = 4 + 1; //////// calculate from data or forced parameter
      const radius = s / (2 * n);
  
      const arc = d3.arc()
        .startAngle((d: any) => d.x0)
        .endAngle((d: any) => d.x1)
        .padAngle((d: any) => Math.min((d.x1 - d.x0) / 2, 0.005))
        .padRadius(radius * 1.5)
        .innerRadius((d: any) => d.y0 * radius)
        .outerRadius((d: any) => Math.max(d.y0 * radius, d.y1 * radius - 1));
  
      const arcVisible = (d: any) => d.y1 <= n && d.y0 >= 1 && d.x1 > d.x0;
      const labelVisible = (d: any) => d.y1 <= n && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;
      const labelTransform = (d: any) => {
        const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
        const y = (d.y0 + d.y1) / 2 * radius;
        return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
      };
      const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));
  
      const clicked = (p: any) => {
        parent.datum(p.parent || root);
        root.each((d: any) => d.target = {
          x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
          x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
          y0: Math.max(0, d.y0 - p.depth),
          y1: Math.max(0, d.y1 - p.depth)
        });
        const t = g.transition().duration(750); //////////////////////////////////////// parameter
        // Transition the data on all arcs, even the ones that arenâ€™t visible,
        // so that if this transition is interrupted, entering arcs will start
        // the next transition from the desired position.
        path.transition(t)
          .tween("data", (d: any) => {
              const i = d3.interpolate(d.current, d.target);
              return (t: any) => d.current = i(t);
          })
          .filter((d: any) => (arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0) || arcVisible(d.target))
          .attr("fill-opacity", (d: any) => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)
          .attrTween("d", (d: any) => () => arc(d.current));
    
        label.filter((d: any) => (arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0) || labelVisible(d.target)).transition(t)
          .attr("fill-opacity", (d: any) => +labelVisible(d.target))
          .attrTween("transform", (d: any) => () => labelTransform(d.current));
      };
  
      const path = g.append('g')
        .selectAll('path')
        .data(root.descendants().slice(1))
        .join('path')
          .attr('fill', (d: any) => { while (d.depth > 1) d = d.parent; return color(d.data.name); })
          //.attr('fill-opacity', (d: any) => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)
          .attr('fill-opacity', (d: any) => arcVisible(d.current) ? (1.2 - d.depth * 0.2) : 0) /////////////////// should be a function?
          .attr('d', (d: any) => arc(d.current));
  
      path.filter((d: any) => d.children) ////// if zoomable
        .style('cursor', 'pointer')
        .on('click', clicked);
  
      path.append('title')
        .text((d: any) => `${d.ancestors().map((d: any) => d.data.name).reverse().join('/')}\n${format(d.value)}`);
  
      const label = g.append("g")
          .attr('pointer-events', 'none')
          .attr('text-anchor', 'middle')
          .style('user-select', 'none')
          .attr('font-size', 9) ///////////////////////// parameter
      .selectAll('text')
        .data(root.descendants().slice(1))
        .join('text')
          .attr('dy', '0.35em')
          .attr('fill-opacity', (d: any) => +labelVisible(d.current))
          .attr('transform', (d: any) => labelTransform(d.current))
          .text((d: any) => d.data.value); //////////////////////////////////// function?
  
      const parent = g.append("circle")
        .datum(root)
        .attr("r", radius)
        .attr("fill", "none")
        .attr("pointer-events", "all")
        .on("click", clicked);  
    } else {
      const radius = s / 2;
      const format = d3.format(',d');
      const arc = d3.arc()
        .startAngle((d: any) => d.x0)
        .endAngle((d: any) => d.x1)
        .padAngle((d: any) => Math.min((d.x1 - d.x0) / 2, 0.005))
        .padRadius(radius / 2)
        .innerRadius((d: any) => d.y0)
        .outerRadius((d: any) => d.y1 - 1);

      const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));
      const partition = (data: any) => d3.partition()
        .size([2 * Math.PI, radius])(d3.hierarchy(data)
        .sum(d => d.value)
        .sort((a: any, b: any) => b.value - a.value));
      const root = partition(data);

      g.datum(dat);
      g.append('g')
          .attr('fill-opacity', 0.9) // 0.6
        .selectAll('path')
        .data(root.descendants().filter(d => d.depth)) 
        // Don't draw the root node, and for efficiency, filter out nodes that would be too small to see.
        // .data(root.descendants().filter(d => d.depth && d.x1 - d.x0 > 0.001)) 
        .join('path')
          .attr('fill', (d: any) => { while (d.depth > 1) d = d.parent; return color(d.data.name); })
          .attr('d', arc)
        .append('title')
          .text((d: any) => `${d.ancestors().map((d: any) => d.data.name).reverse().join('/')}\n${format(d.value)}`);

      g.append('g')
          .attr('pointer-events', 'none')
          .attr('text-anchor', 'middle')
          .attr('font-size', 9)
          .attr('font-family', 'sans-serif')
        .selectAll('text')
        .data(root.descendants().filter(d => d.depth && (d.y0 + d.y1) / 2 * (d.x1 - d.x0) > 10))
        //.data(root.descendants().filter(d => d.depth && d.x1 - d.x0 > 0.001))
        .join('text')
          .attr('transform', (d: any) => {
            const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
            const y = (d.y0 + d.y1) / 2;
            return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
          })
          .attr('dy', '0.35em')
          .text((d: any) => d.data.name);
    }
  }
}
