<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <Configurations>Debug;Release</Configurations>
    <Platforms>x64</Platforms>
    <IsPackable>false</IsPackable>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <LangVersion>latest</LangVersion>

    <AssemblyName>Mbs.Api.Host.Ng</AssemblyName>
    <Description>Mbrane library web api Angular host</Description>
    <Authors>Mbrane</Authors>
    <Company>Mbrane</Company>
    <Copyright>Copyright © 2021 Mbrane. All rights reserved.</Copyright>
    <AssemblyVersion>1.0.1</AssemblyVersion>
    <FileVersion>1.0.1.1</FileVersion>

    <NoWarn>1591</NoWarn>
    <SonarQubeExclude>false</SonarQubeExclude>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="..\Shared\GlobalSuppressions.cs" Link="GlobalSuppressions.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="SonarAnalyzer.CSharp" Version="8.16.0.25740">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="NWebsec.AspNetCore.Middleware" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="5.0.1" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="5.0.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="../Mbs.Api/Mbs.Api.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="appsettings.Development.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Update="euronext.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <PropertyGroup>
    <SpaRoot>ClientApp/</SpaRoot>
    <NodeModules>node_modules</NodeModules>
    <Ng>node_modules/.bin/ng</Ng>
    <MathJax>$(SpaRoot)node_modules/mathjax</MathJax>
    <MathJaxAssets>$(SpaRoot)src/assets/mathjax</MathJaxAssets>
    <AllowNgBuild>true</AllowNgBuild>
    <AllowNgClean>false</AllowNgClean>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules/**</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules/**" />
  </ItemGroup>

  <Target Name="NpmInstall" BeforeTargets="BeforeBuild" Condition="!Exists('$(SpaRoot)$(Ng)')">
    <Message Text="------ Started installation of npm packages ------" Importance="high" />
    <Message Text="node --version..." Importance="high" />
    <Exec Command="node --version" ContinueOnError="true" WorkingDirectory="$(SpaRoot)">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Text="npm --version..." Importance="high" />
    <Exec Command="npm --version" WorkingDirectory="$(SpaRoot)" />
    <Message Text="npm install..." Importance="high" />
    <Exec Command="npm install" WorkingDirectory="$(SpaRoot)" />
    <Message Text="------ Finished installation of npm packages ------" Importance="high" />
  </Target>

  <Target Name="CopyMathJax" BeforeTargets="BeforeBuild" AfterTargets="NpmInstall" Condition="!Exists('$(MathJaxAssets)/MathJax.js')">
    <Message Text="------ Started removing mathjax assets ------" Importance="high" />
    <!-- RemoveDir Directories="$(MathJaxAssets)" ContinueOnError="true" / -->
    <Message Text="------ Finished removing mathjax assets ------" Importance="high" />
    <Message Text="------ Started copying mathjax assets ------" Importance="high" />
    <!-- ItemGroup>
      <MathJaxFiles Include="$(MathJax)/MathJax.js" />
      <MathJaxConfigFiles Include="$(MathJax)/config/**/*" />
      <MathJaxExtensionsFiles Include="$(MathJax)/extensions/**/*" />
      <MathJaxJaxFiles Include="$(MathJax)/jax/**/*" />
      <MathJaxLocalizationFiles Include="$(MathJax)/localization/**/*" />
      <MathJaxFontsFiles Include="$(MathJax)/fonts/**/*" />
    </ItemGroup>
    <Copy SourceFiles="@(MathJaxFiles)" DestinationFolder="$(MathJaxAssets)" />
    <Copy SourceFiles="@(MathJaxConfigFiles)" DestinationFolder="$(MathJaxAssets)/config/%(RecursiveDir)" />
    <Copy SourceFiles="@(MathJaxExtensionsFiles)" DestinationFolder="$(MathJaxAssets)/extensions/%(RecursiveDir)" />
    <Copy SourceFiles="@(MathJaxJaxFiles)" DestinationFolder="$(MathJaxAssets)/jax/%(RecursiveDir)" />
    <Copy SourceFiles="@(MathJaxLocalizationFiles)" DestinationFolder="$(MathJaxAssets)/localization/%(RecursiveDir)" />
    <Copy SourceFiles="@(MathJaxFontsFiles)" DestinationFolder="$(MathJaxAssets)/fonts/%(RecursiveDir)" / -->
    <Message Text="------ Finished copying mathjax assets ------" Importance="high" />
  </Target>

  <Target Name="NgBuildDev" BeforeTargets="Build" Condition="$(AllowNgBuild) And '$(Configuration)' == 'Debug'">
    <Message Text="------ Starting ng cli development build ------" Importance="high" />
    <Exec Command="$(Ng) --version" WorkingDirectory="$(SpaRoot)" />
    <Exec Command="$(Ng) build" WorkingDirectory="$(SpaRoot)" />
    <Message Text="------ Finished ng cli development build ------" Importance="high" />
  </Target>

  <Target Name="NgBuildProd" BeforeTargets="Build" Condition="$(AllowNgBuild) And '$(Configuration)' == 'Release'">
    <Message Text="------ Starting ng cli production build ------" Importance="high" />
    <Exec Command="$(Ng) --version" WorkingDirectory="$(SpaRoot)" />
    <Exec Command="$(Ng) build --prod=true --aot=true --optimization=true --build-optimizer=true --extract-licenses=true --common-chunk=true" WorkingDirectory="$(SpaRoot)" />
    <Message Text="------ Finished ng cli production build ------" Importance="high" />
  </Target>

  <Target Name="CleanDist" AfterTargets="Clean" Condition="$(AllowNgClean) And $(AllowNgBuild)">
    <Message Text="------ Cleaning wwwroot ------" Importance="high" />
    <Delete Files="wwwroot/**" />
  </Target>

</Project>
