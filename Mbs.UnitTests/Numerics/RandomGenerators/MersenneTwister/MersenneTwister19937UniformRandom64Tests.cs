using System.Linq;
using Mbs.Numerics.RandomGenerators.MersenneTwister;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static System.FormattableString;

namespace Mbs.UnitTests.Numerics.RandomGenerators.MersenneTwister
{
    [TestClass]
    public class MersenneTwister19937UniformRandom64Tests
    {
        private const int Seed = 12345;
        private const int Count = 5000;

        private static readonly ulong[] ExpectedULong =
        {
            7266447313870364031UL, 4946485549665804864UL, 16945909448695747420UL, 16394063075524226720UL, 4873882236456199058UL,
            14877448043947020171UL, 6740343660852211943UL, 13857871200353263164UL, 5249110015610582907UL, 10205081126064480383UL,
            1235879089597390050UL, 17320312680810499042UL, 16489141110565194782UL, 8942268601720066061UL, 13520575722002588570UL,
            14226945236717732373UL, 9383926873555417063UL, 15690281668532552105UL, 11510704754157191257UL, 15864264574919463609UL,
            6489677788245343319UL, 5112602299894754389UL, 10828930062652518694UL, 15942305434158995996UL, 15445717675088218264UL,
            4764500002345775851UL, 14673753115101942098UL, 236502320419669032UL, 13670483975188204088UL, 14931360615268175698UL,
            8904234204977263924UL, 12836915408046564963UL, 12120302420213647524UL, 15755110976537356441UL, 5405758943702519480UL,
            10951858968426898805UL, 17251681303478610375UL, 4144140664012008120UL, 18286145806977825275UL, 13075804672185204371UL,
            10831805955733617705UL, 6172975950399619139UL, 12837097014497293886UL, 12903857913610213846UL, 560691676108914154UL,
            1074659097419704618UL, 14266121283820281686UL, 11696403736022963346UL, 13383246710985227247UL, 7132746073714321322UL,
            10608108217231874211UL, 9027884570906061560UL, 12893913769120703138UL, 15675160838921962454UL, 2511068401785704737UL,
            14483183001716371453UL, 3774730664208216065UL, 5083371700846102796UL, 9583498264570933637UL, 17119870085051257224UL,
            5217910858257235075UL, 10612176809475689857UL, 1924700483125896976UL, 7171619684536160599UL, 10949279256701751503UL,
            15596196964072664893UL, 14097948002655599357UL, 615821766635933047UL, 5636498760852923045UL, 17618792803942051220UL,
            580805356741162327UL, 425267967796817241UL, 8381470634608387938UL, 13212228678420887626UL, 16993060308636741960UL,
            957923366004347591UL, 6210242862396777185UL, 1012818702180800310UL, 15299383925974515757UL, 17501832009465945633UL,
            17453794942891241229UL, 15807805462076484491UL, 8407189590930420827UL, 974125122787311712UL, 1861591264068118966UL,
            997568339582634050UL, 18046771844467391493UL, 17981867688435687790UL, 3809841506498447207UL, 9460108917638135678UL,
            16172980638639374310UL, 958022432077424298UL, 4393365126459778813UL, 13408683141069553686UL, 13900005529547645957UL,
            15773550354402817866UL, 16475327524349230602UL, 6260298154874769264UL, 12224576659776460914UL, 6405294864092763507UL,
            7585484664713203306UL, 5187641382818981381UL, 12435998400285353380UL, 13554353441017344755UL, 646091557254529188UL,
            11393747116974949255UL, 16797249248413342857UL, 15713519023537495495UL, 12823504709579858843UL, 4738086532119935073UL,
            4429068783387643752UL, 585582692562183870UL, 1048280754023674130UL, 6788940719869959076UL, 11670856244972073775UL,
            2488756775360218862UL, 2061695363573180185UL, 6884655301895085032UL, 3566345954323888697UL, 12784319933059041817UL,
            4772468691551857254UL, 6864898938209826895UL, 7198730565322227090UL, 2452224231472687253UL, 13424792606032445807UL,
            10827695224855383989UL, 11016608897122070904UL, 14683280565151378358UL, 7077866519618824360UL, 17487079941198422333UL,
            3956319990205097495UL, 5804870313319323478UL, 8017203611194497730UL, 3310931575584983808UL, 5009341981771541845UL,
            6930001938490791874UL, 14415278059151389495UL, 11001114762641844083UL, 6715939435439735925UL, 411419160297131328UL,
            4522402260441335284UL, 3381955501804126859UL, 15935778656111987797UL, 4345051260540166684UL, 13978444093099579683UL,
            9219789505504949817UL, 9245142924137529075UL, 11628184459157386459UL, 7242398879359936370UL, 8511401943157540109UL,
            11948130810477009827UL, 6865450671488705049UL, 13965005347172621081UL, 15956599226522058336UL, 7737868921014130584UL,
            2107342503741411693UL, 15818996300425101108UL, 16399939197527488760UL, 13971145494081508107UL, 3910681448359868691UL,
            4249175367970221090UL, 9735751321242454020UL, 12418107929362160460UL, 241792245481991138UL, 5806488997649497146UL,
            10724207982663648949UL, 1121862814449214435UL, 1326996977123564236UL, 4902706567834759475UL, 12782714623891689967UL,
            7306216312942796257UL, 15681656478863766664UL, 957364844878149318UL, 5651946387216554503UL, 8197027112357634782UL,
            6302075516351125977UL, 13454588464089597862UL, 15638309200463515550UL, 10116604639722073476UL, 12052913535387714920UL,
            2889379661594013754UL, 15383926144832314187UL, 7841953313015471731UL, 17310575136995821873UL, 9820021961316981626UL,
            15319619724109527290UL, 15349724127275899898UL, 10511508162402504492UL, 6289553862380300393UL, 15046218882019267110UL,
            11772020174577005930UL, 3537640779967351792UL, 6801855569284252424UL, 17687268231192623388UL, 12968358613633237218UL,
            1429775571144180123UL, 10427377732172208413UL, 12155566091986788996UL, 16465954421598296115UL, 12710429690464359999UL,
            9547226351541565595UL, 12156624891403410342UL, 2985938688676214686UL, 18066917785985010959UL, 5975570403614438776UL,
            11541343163022500560UL, 11115388652389704592UL, 9499328389494710074UL, 9247163036769651820UL, 3688303938005101774UL,
            2210483654336887556UL, 15458161910089693228UL, 6558785204455557683UL, 1288373156735958118UL, 18433986059948829624UL,
            3435082195390932486UL, 16822351800343061990UL, 3120532877336962310UL, 16681785111062885568UL, 7835551710041302304UL,
            2612798015018627203UL, 15083279177152657491UL, 6591467229462292195UL, 10592706450534565444UL, 7438147750787157163UL,
            323186165595851698UL, 7444710627467609883UL, 8473714411329896576UL, 2782675857700189492UL, 3383567662400128329UL,
            3200233909833521327UL, 12897601280285604448UL, 3612068790453735040UL, 8324209243736219497UL, 15789570356497723463UL,
            1083312926512215996UL, 4797349136059339390UL, 5556729349871544986UL, 18266943104929747076UL, 1620389818516182276UL,
            172225355691600141UL, 3034352936522087096UL, 1266779576738385285UL, 3906668377244742888UL, 6961783143042492788UL,
            17159706887321247572UL, 4676208075243319061UL, 10315634697142985816UL, 13435140047933251189UL, 716076639492622016UL,
            13847954035438697558UL, 7195811275139178570UL, 10815312636510328870UL, 6214164734784158515UL, 16412194511839921544UL,
            3862249798930641332UL, 1005482699535576005UL, 4644542796609371301UL, 17600091057367987283UL, 4209958422564632034UL,
            5419285945389823940UL, 11453701547564354601UL, 9951588026679380114UL, 7425168333159839689UL, 8436306210125134906UL,
            11216615872596820107UL, 3681345096403933680UL, 5770016989916553752UL, 11102855936150871733UL, 11187980892339693935UL,
            396336430216428875UL, 6384853777489155236UL, 7551613839184151117UL, 16527062023276943109UL, 13429850429024956898UL,
            9901753960477271766UL, 9731501992702612259UL, 5217575797614661659UL, 10311708346636548706UL, 15111747519735330483UL,
            4353415295139137513UL, 1845293119018433391UL, 11952006873430493561UL, 3531972641585683893UL, 16852246477648409827UL,
            15956854822143321380UL, 12314609993579474774UL, 16763911684844598963UL, 16392145690385382634UL, 1545507136970403756UL,
            17771199061862790062UL, 12121348462972638971UL, 12613068545148305776UL, 954203144844315208UL, 1257976447679270605UL,
            3664184785462160180UL, 2747964788443845091UL, 15895917007470512307UL, 15552935765724302120UL, 16366915862261682626UL,
            8385468783684865323UL, 10745343827145102946UL, 2485742734157099909UL, 916246281077683950UL, 15214206653637466707UL,
            12895483149474345798UL, 1079510114301747843UL, 10718876134480663664UL, 1259990987526807294UL, 8326303777037206221UL,
            14104661172014248293UL, 15531278677382192198UL, 3874303698666230242UL, 3611366553819264523UL, 1358753803061653874UL,
            1552102816982246938UL, 14492630642488100979UL, 15001394966632908727UL, 2273140352787320862UL, 17843678642369606172UL,
            2903980458593894032UL, 16971437123015263604UL, 12969653681729206264UL, 3593636458822318001UL, 9719758956915223015UL,
            7437601263394568346UL, 3327758049015164431UL, 17851524109089292731UL, 14769614194455139039UL, 8017093497335662337UL,
            12026985381690317404UL, 739616144640253634UL, 15535375191850690266UL, 2418267053891303448UL, 15314073759564095878UL,
            10333316143274529509UL, 16565481511572123421UL, 16317667579273275294UL, 13991958187675987741UL, 3753596784796798785UL,
            9078249094693663275UL, 8459506356724650587UL, 12579909555010529099UL, 7827737296967050903UL, 5489801927693999341UL,
            10995988997350541459UL, 14721747867313883304UL, 7915884580303296560UL, 4105766302083365910UL, 12455549072515054554UL,
            13602111324515032467UL, 5205971628932290989UL, 5034622965420036444UL, 9134927878875794005UL, 11319873529597990213UL,
            14815445109496752058UL, 2266601052460299470UL, 5696993487088103383UL, 6540200741841280242UL, 6631495948031875490UL,
            5328340585170897740UL, 17897267040961463930UL, 9030000260502624168UL, 14285709137129830926UL, 12854071997824681544UL,
            15408328651008978682UL, 1063314403033437073UL, 13765209628446252802UL, 242013711116865605UL, 4772374239432528212UL,
            2515855479965038648UL, 5872624715703151235UL, 14237704570091006662UL, 678604024776645862UL, 12329607334079533339UL,
            17570877682732917020UL, 2695443415284373666UL, 4312672841405514468UL, 6454343485137106900UL, 8425658828390111343UL,
            16335501385875554899UL, 5551095603809016713UL, 11781094401885925035UL, 9395557946368382509UL, 9765123360948816956UL,
            18107191819981188154UL, 16049267500594757404UL, 16349966108299794199UL, 1040405303135858246UL, 2366386386131378192UL,
            223761048139910454UL, 15375217587047847934UL, 15231693398695187454UL, 12916726640254571028UL, 8878036960829635584UL,
            1626201782473074365UL, 5758998126998248293UL, 18077917959300292758UL, 10585588923088536745UL, 15072345664541731497UL,
            3559348759319842667UL, 12744591691872202375UL, 2388494115860283059UL, 6414691845696331748UL, 3069528498807764495UL,
            8737958486926519702UL, 18059264986425101074UL, 3139684427605102737UL, 12378931902986734693UL, 410666675039477949UL,
            12139894855769838924UL, 5780722552400398675UL, 7039346665375142557UL, 3020733445712569008UL, 2612305843503943561UL,
            13651771214166527665UL, 16478681918975800939UL, 566088527565499576UL, 4715785502295754870UL, 6957318344287196220UL,
            11645756868405128885UL, 13139951104358618000UL, 17650948583490040612UL, 18168787973649736637UL, 5486282999836125542UL,
            6122201977153895166UL, 17324241605502052782UL, 10063523107521105867UL, 17537430712468011382UL, 10828407533637104262UL,
            10294139354198325113UL, 12557151830240236401UL, 16673044307512640231UL, 10918020421896090419UL, 11077531235278014145UL,
            5499571814940871256UL, 2334252435740638702UL, 18177461912527387031UL, 2000007376901262542UL, 7968425560071444214UL,
            1472650787501520648UL, 3115849849651526279UL, 7980970700139577536UL, 12153253535907642097UL, 8109716914843248719UL,
            3154976533165008908UL, 5553369513523832559UL, 10345792701798576501UL, 3677445364544507875UL, 10637177623943913351UL,
            7380255087060498096UL, 14479400372337014801UL, 15381362583330700960UL, 204531043189704802UL, 13699106540959723942UL,
            3817903465872254783UL, 10972364467110284934UL, 2701394334530963810UL, 2931625600749229147UL, 16428252083632828910UL,
            11873166501966812913UL, 5566810080537233762UL, 7840617383807795056UL, 10699413880206684652UL, 18259119259617231436UL,
            10332714341486317526UL, 10137911902863059694UL, 669146221352346842UL, 8373571610024623455UL, 10620002450820868661UL,
            12220730820779815970UL, 5902974968095412898UL, 7931010481705150841UL, 16413777368097063650UL, 11273457888324769727UL,
            13719113891065284171UL, 8327795098009702553UL, 10333342364827584837UL, 6202832891413866653UL, 9137034567886143162UL,
            14514450826524340059UL, 473610156015331016UL, 813689571029117640UL, 13776316799690285717UL, 10429708855338427756UL,
            8995290140880620858UL, 2320123852041754384UL, 8082864073645003641UL, 6961777411740398590UL, 10008644283003991179UL,
            3239064015890722333UL, 16762634970725218787UL, 16467281536733948427UL, 10563290046315192938UL, 5108560603794851559UL,
            15121667220761532906UL, 14155440077372845941UL, 10050536352394623377UL, 15474881667376037792UL, 3448088038819200619UL,
            3692020001240358871UL, 6444847992258394902UL, 8687650838094264665UL, 3028124591188972359UL, 16945232313401161629UL,
            15547830510283682816UL, 3982930188609442149UL, 14270781928849894661UL, 13768475593433447867UL, 13815150225221307677UL,
            8502397232429564693UL, 718377350715476994UL, 7459266877697905475UL, 8353375565171101521UL, 7807281661994435472UL,
            16924127046922196149UL, 10157812396471387805UL, 2519858716882670232UL, 7384148884750265792UL, 8077153156180046901UL,
            3499231286164597752UL, 2700106282881469611UL, 14679824700835879737UL, 14188324938219126828UL, 3016120398601032793UL,
            10858152824243889420UL, 9412371965669250534UL, 4857522662584941069UL, 984331743838900386UL, 4094160040294753142UL,
            2368635764350388458UL, 15101240511397838657UL, 15584415763303953578UL, 7831857200208015446UL, 1952643641639729063UL,
            4184323302594028609UL, 16795120381104846695UL, 3541559381538365280UL, 15408472870896842474UL, 5628362450757896366UL,
            16277348886873708846UL, 12437047172652330846UL, 10172715019035948149UL, 1999700669649752791UL, 6217957085626135027UL,
            11220551167830336823UL, 16478747645632411810UL, 5437280487207382147UL, 11382378739613087836UL, 15866932785489521505UL,
            5502694314775516684UL, 16440179278067648435UL, 15510104554374162846UL, 15722061259110909195UL, 10760687291786964354UL,
            10736868329920212671UL, 4166148127664495614UL, 14303518358120527892UL, 9122250801678898571UL, 10028508179936801946UL,
            216630713752669403UL, 10655207865433859491UL, 4041437116174699233UL, 6280982262534375348UL, 297501356638818866UL,
            13976146806363377485UL, 13752396481560145603UL, 11472199956603637419UL, 16393728429143900496UL, 14752844047515986640UL,
            1524477318846038424UL, 6596889774254235440UL, 1591982099532234960UL, 8065146456116391065UL, 3964696017750868345UL,
            17040425970526664920UL, 11511165586176539991UL, 3443401252003315103UL, 16314977947073778249UL, 16860120454903458341UL,
            5370503221561340846UL, 15362920279125264094UL, 2822458124714999779UL, 14575378304387898337UL, 9689406052675046032UL,
            2872149351415175149UL, 13019620945255883050UL, 14929026760148695825UL, 8503417349692327218UL, 9677798905341573754UL,
            828949921821462483UL, 16110482368362750196UL, 15794218816553655671UL, 14942910774764855088UL, 12026350906243760195UL,
            13610867176871462505UL, 18324536557697872582UL, 2658962269666727629UL, 327225403251576027UL, 9207535177029277544UL,
            8744129291351887858UL, 6129603385168921503UL, 18385497655031085907UL, 13024478718952333892UL, 14547683159720717167UL,
            5932119629366981711UL, 325385464632594563UL, 3559879386019806291UL, 6629264948665231298UL, 14358245326238118181UL,
            15662449672706340765UL, 13975503159145803297UL, 3609534220891499022UL, 4224273587485638227UL, 9274084767162416370UL,
            13156843921244091998UL, 18284750575626858789UL, 14664767920489118779UL, 11292057742031803221UL, 13919998707305829132UL,
            14473305049457001422UL, 9696877879685767807UL, 1406758246007973837UL, 2429517644459056881UL, 14361215588101587430UL,
            11386164476149757528UL, 10474116023593331839UL, 2921165656527786564UL, 15604610369733358953UL, 12955027028676000544UL,
            10314281035410779907UL, 3167047178514709947UL, 1088721329408346700UL, 17930425515478182741UL, 7466411836095405617UL,
            15534027454610690575UL, 10879629128927506091UL, 11502219301371200635UL, 13915106894453889418UL, 4226784327815861027UL,
            12335222183627106346UL, 3648499746356007767UL, 18441388887898023393UL, 18117929843327093625UL, 4237736098094830438UL,
            14229123019768296655UL, 3930112058127932690UL, 12663879236019645778UL, 9281161952002617309UL, 4978473890680876319UL,
            845759387067546611UL, 1386164484606776333UL, 8008554770639925512UL, 11159581016793288971UL, 18065390393740782906UL,
            17647985458967631018UL, 9092379465737744314UL, 2914678236848656327UL, 4376066698447630270UL, 16057186499919087528UL,
            3031333261848790078UL, 2926746602873431597UL, 7931945763526885287UL, 147649915388326849UL, 15801792398814946230UL,
            5265900391686545347UL, 16173686275871890830UL, 7562781050481886043UL, 5853506575839330404UL, 14957980734704564792UL,
            10944286556353523404UL, 1783009880614150597UL, 9529762028588888983UL, 822992871011696119UL, 2130074274744257510UL,
            8000279549284809219UL, 3514744284158856431UL, 128770032569293263UL, 3737367602618100572UL, 16364836605077998543UL,
            783266423471782696UL, 4569418252658970391UL, 11093950688157406886UL, 14888808512267628166UL, 4217786261273670948UL,
            17047486076688645713UL, 14133826721458860485UL, 17539744882220127106UL, 12394675039129853905UL, 5757634999463277090UL,
            9621947619435861331UL, 1182210208559436772UL, 14603391040490913939UL, 17481976703660945893UL, 14063388816234683976UL,
            2046622692581829572UL, 8294969799792017441UL, 5293778434844788058UL, 17976364049306763808UL, 399482430848083948UL,
            16495545010129798933UL, 15241340958282367519UL, 989828753826900814UL, 17616558773874893537UL, 2471817920909589004UL,
            11764082277667899978UL, 9618755269550400950UL, 1240014743757147125UL, 1887649378641563002UL, 1842982574728131416UL,
            13243531042427194002UL, 7688268125537013927UL, 3080422097287486736UL, 2562894809975407783UL, 12428984115620094788UL,
            1355581933694478148UL, 9895969242586224966UL, 8628445623963160889UL, 4298916726468199239UL, 12773165416305557280UL,
            5240726258301567487UL, 4975412836403427561UL, 1842172398579595303UL, 7812151462958058676UL, 17974510987263071769UL,
            14980707022065991200UL, 18294903201142729875UL, 12911672684850242753UL, 8979482998667235743UL, 16808468362384462073UL,
            5981317232108359798UL, 12373702800369335100UL, 16119707581920094765UL, 2782738549717633602UL, 15454155188515389391UL,
            16495638000603654629UL, 16348757069342790497UL, 7769562861984504567UL, 17504300515449231559UL, 5557710032938318996UL,
            11846125204788401203UL, 13957316349928882624UL, 2738350683717432043UL, 15738068448047700954UL, 6224714837294524999UL,
            6081930777706411111UL, 11366312928059597928UL, 4355315799925031482UL, 12393324728734964015UL, 15277140291994338591UL,
            1406052433297386355UL, 15859448364509213398UL, 1672805458341158435UL, 2926095111610982994UL, 11056431822276774455UL,
            12083767323511977430UL, 3296968762229741153UL, 12312076899982286460UL, 17769284994682227273UL, 15349428916826953443UL,
            1056147296359223910UL, 18305757538706977431UL, 6214378374180465222UL, 14279648441175008454UL, 17791306410319136644UL,
            956593013486324072UL, 2921235772936241950UL, 10002890515925652606UL, 10399654693663712506UL, 6446247931049971441UL,
            6380465770144534958UL, 11439178472613251620UL, 10131486500045494660UL, 3692642123868351947UL, 10972816599561388940UL,
            4931112976348785580UL, 8213967169213816566UL, 15336469859637867841UL, 15026830342847689383UL, 7524668622380765825UL,
            17309937346758783807UL, 372780684412666438UL, 5642417144539399955UL, 18303842993081194577UL, 11085303253831702827UL,
            15658163165983586950UL, 8517521928922081563UL, 16091186344159989860UL, 17614656488010863910UL, 4736067146481515156UL,
            13449945221374241354UL, 17755469346196579408UL, 13300502638545717375UL, 6611828134763118043UL, 14177591906740276597UL,
            9340430243077460347UL, 7499765399826404087UL, 3409518087967832469UL, 9013253864026602045UL, 4444307427984430192UL,
            3729283608700519712UL, 13642048880719588383UL, 16486557958022946240UL, 2996465014991157904UL, 10020049344596426576UL,
            12302485648009883778UL, 8492591321344423126UL, 17407986443716172520UL, 10530482934957373052UL, 15740662350540828750UL,
            1790629986901049436UL, 6305948377669917188UL, 15092985352503125323UL, 928505047232899787UL, 14404651977039851607UL,
            7564177565277805597UL, 3411236815351677870UL, 7752718145953236134UL, 12315979971311483798UL, 12477729506691004724UL,
            14654956300924793305UL, 6689803038918974388UL, 1540738812233000153UL, 13508351811701989957UL, 15864432023192136053UL,
            7990997967273843917UL, 7424300239290765161UL, 39585249496300263UL, 3877436595063283319UL, 10710642254398044448UL,
            4653804418844456375UL, 1232267496410380283UL, 3690525514009038824UL, 15459770765077428485UL, 13240346522153894145UL,
            5674964360688390624UL, 16973644653010587289UL, 15924280764204855206UL, 15196708627253442662UL, 17596174821341373274UL,
            16196745023027393691UL, 6980050627399795351UL, 17582264380857746637UL, 18170372407506856324UL, 12108126025631005514UL,
            15687749089493373169UL, 5814107289258228434UL, 9381977959648494876UL, 15895601183088112734UL, 16267869075651604263UL,
            15228381979765852785UL, 11949618678312581999UL, 4545324791131029438UL, 582725409406225185UL, 15282520250746126790UL,
            14758446535973412711UL, 7605613563088071833UL, 1111140641057375915UL, 5364843095234852245UL, 218335432181198977UL,
            4891472444796201742UL, 4564628942836375772UL, 15500501278323817088UL, 4913946328556108657UL, 2684786251736694229UL,
            12090498456116310122UL, 5310885782157038567UL, 5032788439854011923UL, 12627401038822728242UL, 11869662610126430929UL,
            17650156853043540226UL, 12126672500118808436UL, 10437658933435653256UL, 13133995470637873311UL, 4601324715591152820UL,
            1874350460376708372UL, 5808688626286061164UL, 13777088437302430376UL, 5018451954762213522UL, 2588296738534474754UL,
            5503414509154170711UL, 5230497186769951796UL, 13261090710400573914UL, 8515217303152165705UL, 11074538219737365303UL,
            15481562385740613213UL, 12705484409881007350UL, 14221931471178549498UL, 12905633420087112297UL, 17337759164357146506UL,
            14081997515778175224UL, 17384320185513122939UL, 7131793076779216692UL, 17483217190312403109UL, 900692047897995877UL,
            14723287313048560400UL, 6132094372965340305UL, 7572797575350925726UL, 12725160700431903514UL, 380860122911632449UL,
            1900504978569024571UL, 8423729759529914138UL, 7305587201606052334UL, 12446871355267313320UL, 4615812356515386206UL,
            3361817115406652303UL, 17690418922000878428UL, 14632214537567910559UL, 2709702289926174775UL, 3459675155951086144UL,
            7788364399926538150UL, 16043992474431955950UL, 15830963823784930267UL, 4216893617835797954UL, 538159724689093771UL,
            16029152738918251363UL, 14444848757576686696UL, 12941757045272633696UL, 10900480525147953314UL, 12547307449905859302UL,
            16001571796892398181UL, 407942194622690676UL, 13873235372903944444UL, 18071603799493008777UL, 1015646077646778622UL,
            9387605808959554815UL, 11566702442022019410UL, 7061722181092883183UL, 2629032108249254109UL, 5271820053177594520UL,
            12640880742139693547UL, 10098688629735675775UL, 5716304472850923064UL, 3312674502353063071UL, 7295926377425759633UL,
            833281439103466115UL, 16316743519466861667UL, 9912050326606348167UL, 11651133878100804242UL, 18026798122431692459UL,
            6157758321723692663UL, 4856021830695749349UL, 7074321707293278978UL, 10748097797809573561UL, 2949954440753264783UL,
            9813922580940661152UL, 9949237950172138336UL, 15643982711269455885UL, 16078663425810239127UL, 12508044395364228880UL,
            12920301578340189344UL, 15368071871011048915UL, 1610400750626363239UL, 11994736084146033126UL, 6042574085746186088UL,
            4154587549267685807UL, 15915752367312946034UL, 1191196620621769193UL, 467437822242538360UL, 2836463788873877488UL,
            10476401302029164984UL, 1716169985450737419UL, 5327734953288310341UL, 3994170067185955262UL, 884431883768190063UL,
            11019001754831208284UL, 14322807384384895215UL, 161011537360955545UL, 1466223959660131656UL, 5227048585229497539UL,
            12410731857504225031UL, 2142243279080761103UL, 17682826799106851430UL, 1792612570704179953UL, 14727410295243056025UL,
            1459567192481221274UL, 5669760721687603135UL, 17507918443756456845UL, 10354471145847018200UL, 10362475129248202288UL,
            13143844410150939443UL, 6861184673150072028UL, 18396524361124732580UL, 543906666394301875UL, 12476817828199026728UL,
            11853496871128122868UL, 12747674713108891748UL, 7986179867749890282UL, 9158195177777627533UL, 2217320706811118570UL,
            8631389005200569973UL, 5538133061362648855UL, 3369942850878700758UL, 7813559982698427184UL, 509051590411815948UL,
            10197035660403006684UL, 13004818533162292132UL, 9831652587047067687UL, 7619315254749630976UL, 994412663058993407UL,
        };

        private static readonly double[] ExpectedDouble =
        {
            0.35252031, 0.51052342, 0.79771733, 0.39300273, 0.27216673,
            0.72151068, 0.43144703, 0.38522290, 0.20270676, 0.58227313,
            0.80812143, 0.83767297, 0.92401619, 0.84065425, 0.00852052,
            0.13975395, 0.35250930, 0.71196972, 0.14627395, 0.17775331,
            0.61046382, 0.49623272, 0.23292425, 0.25038837, 0.04380664,
            0.43275994, 0.74540936, 0.33830700, 0.68832616, 0.68744230,
            0.63626548, 0.85932936, 0.37089670, 0.50756304, 0.69925960,
            0.83481025, 0.09053196, 0.09523253, 0.17783108, 0.78027239,
            0.70071054, 0.51879252, 0.83027285, 0.92895011, 0.72144803,
            0.18868644, 0.83655674, 0.20358945, 0.99852143, 0.88340103,
            0.46729949, 0.96993433, 0.00162682, 0.46829774, 0.59080423,
            0.54921999, 0.42516462, 0.54952196, 0.99534722, 0.04473888,
            0.71139235, 0.91881407, 0.33781561, 0.45746234, 0.78292126,
            0.69206723, 0.66175448, 0.07091147, 0.18179208, 0.38168454,
            0.38819527, 0.42452711, 0.22732724, 0.16191307, 0.36842667,
            0.13060083, 0.68833248, 0.60498705, 0.19195304, 0.26628584,
            0.17030858, 0.23892426, 0.38430236, 0.28034283, 0.76069020,
            0.21560653, 0.78101667, 0.90847812, 0.06467974, 0.18487868,
            0.23570471, 0.29475460, 0.65563767, 0.10066446, 0.57272419,
            0.88731391, 0.60650995, 0.96346079, 0.32940100, 0.29977746,
            0.03798193, 0.18026822, 0.22402746, 0.45480119, 0.98114604,
            0.25800668, 0.94362433, 0.17901062, 0.36019313, 0.45933644,
            0.68309457, 0.28175454, 0.00774729, 0.77054527, 0.99723413,
            0.59807532, 0.10294164, 0.32429228, 0.54928986, 0.18410980,
            0.08441555, 0.14230333, 0.58892064, 0.94030475, 0.35378784,
            0.77584320, 0.71222448, 0.83565208, 0.47309248, 0.23810761,
            0.74408520, 0.08891527, 0.09729786, 0.38377368, 0.05092308,
            0.69065638, 0.10449489, 0.45050670, 0.92209534, 0.80083714,
            0.27902692, 0.26897142, 0.50650468, 0.80111472, 0.54590012,
            0.96406097, 0.63779553, 0.81054357, 0.75369248, 0.47473037,
            0.89100315, 0.89395984, 0.09985519, 0.34087631, 0.22293557,
            0.24375510, 0.31764191, 0.04076993, 0.06160830, 0.41333434,
            0.11883030, 0.04548820, 0.01008040, 0.25336184, 0.07325432,
            0.49860151, 0.07148695, 0.89483338, 0.87054457, 0.15116809,
            0.59650469, 0.47487776, 0.43490298, 0.36684681, 0.16470796,
            0.76865078, 0.42920071, 0.20545481, 0.87615922, 0.80332404,
            0.36462506, 0.49571309, 0.51904488, 0.15534589, 0.43719893,
            0.16562157, 0.37290862, 0.91842631, 0.21310523, 0.87849154,
            0.18532269, 0.81713354, 0.52182344, 0.51845619, 0.96261204,
            0.18758718, 0.68897600, 0.61484764, 0.46752993, 0.05865458,
            0.11614359, 0.90386866, 0.45781805, 0.70649579, 0.50917048,
            0.21210656, 0.97818608, 0.00788342, 0.61375222, 0.67366318,
            0.24197878, 0.66177985, 0.10463932, 0.67390799, 0.50025262,
            0.88332650, 0.77966851, 0.13403622, 0.54357114, 0.97664854,
            0.06540961, 0.24013176, 0.67234032, 0.91347883, 0.35486839,
            0.87207865, 0.43036581, 0.23652488, 0.81238450, 0.72058432,
            0.42239916, 0.80265764, 0.03552838, 0.61939480, 0.50972420,
            0.21053832, 0.59952743, 0.36821802, 0.45659617, 0.12529468,
            0.76941623, 0.99878168, 0.08602783, 0.81825937, 0.39350710,
            0.86090923, 0.36090230, 0.75628888, 0.45036982, 0.44602266,
            0.20595631, 0.62241953, 0.36777732, 0.47523727, 0.50248178,
            0.73570362, 0.48237781, 0.45590948, 0.73580783, 0.96403851,
            0.94586342, 0.48819868, 0.48102038, 0.94618182, 0.90279924,
            0.78396650, 0.85182389, 0.92149394, 0.32679198, 0.83554856,
            0.28320609, 0.34598409, 0.82090005, 0.40177958, 0.38888785,
            0.77873931, 0.23297931, 0.75329335, 0.30770340, 0.71417540,
            0.68939065, 0.36577776, 0.50784857, 0.50928090, 0.02552055,
            0.85999075, 0.26692089, 0.01402799, 0.67550392, 0.48305605,
            0.74608351, 0.63408891, 0.58904230, 0.44337996, 0.42174728,
            0.74041679, 0.72719148, 0.19801992, 0.66263633, 0.10381594,
            0.32818760, 0.68369661, 0.56076212, 0.68681921, 0.91616269,
            0.39836106, 0.39685027, 0.97507945, 0.91010563, 0.27447360,
            0.95538357, 0.76758522, 0.60091060, 0.37734461, 0.82948248,
            0.06598078, 0.50147615, 0.08417763, 0.18910044, 0.51661735,
            0.55011011, 0.64888175, 0.82986845, 0.15126656, 0.92649390,
            0.25494941, 0.73275293, 0.94184393, 0.84755226, 0.45921936,
            0.72934054, 0.43722403, 0.34305596, 0.10827860, 0.29026676,
            0.01935431, 0.46668573, 0.83247509, 0.26349603, 0.01938542,
            0.43222250, 0.18109983, 0.29337450, 0.16721917, 0.94751650,
            0.67795254, 0.56666228, 0.20699452, 0.23247262, 0.19138610,
            0.73495506, 0.85893600, 0.83411526, 0.93689655, 0.91804752,
            0.99352333, 0.03207550, 0.28386071, 0.48029543, 0.18736013,
            0.31736452, 0.72542230, 0.57530912, 0.04229918, 0.84798296,
            0.21886935, 0.98655615, 0.52243102, 0.22611020, 0.42975741,
            0.21726739, 0.10912048, 0.96684473, 0.01092456, 0.12461901,
            0.57989070, 0.39848707, 0.06330277, 0.62826828, 0.01159081,
            0.23157320, 0.64690912, 0.44876902, 0.04463930, 0.18933780,
            0.21284518, 0.61363480, 0.67144845, 0.38625586, 0.75719122,
            0.40361050, 0.26708873, 0.54534727, 0.90174015, 0.58654140,
            0.44885346, 0.35505544, 0.65317830, 0.26074572, 0.39472912,
            0.54366914, 0.75020660, 0.76113614, 0.24595582, 0.03941247,
            0.60356153, 0.23615721, 0.01603475, 0.72432457, 0.39837424,
            0.04195329, 0.81561058, 0.34208440, 0.00513953, 0.92826234,
            0.11410393, 0.86692030, 0.25238726, 0.98258626, 0.53353856,
            0.72269001, 0.71850984, 0.66829681, 0.03540769, 0.01676450,
            0.23557835, 0.78758497, 0.85969589, 0.14673207, 0.28013860,
            0.17796942, 0.69924087, 0.44663597, 0.62112513, 0.44079883,
            0.48995231, 0.18411497, 0.18440877, 0.74016388, 0.28845694,
            0.22969080, 0.76851164, 0.15551473, 0.28980810, 0.40906710,
            0.47619039, 0.72611392, 0.55802939, 0.69365597, 0.85736313,
            0.83343150, 0.21324760, 0.45327806, 0.33053855, 0.98198279,
            0.53279389, 0.76877035, 0.20548656, 0.37065042, 0.59026910,
            0.67418036, 0.23585843, 0.98156397, 0.27849804, 0.56198954,
            0.68752287, 0.30073445, 0.69348664, 0.72515585, 0.40629047,
            0.09320027, 0.24334978, 0.91407662, 0.97226538, 0.33904970,
            0.01717092, 0.60155725, 0.03001652, 0.50979706, 0.80531036,
            0.17450719, 0.84984399, 0.00498130, 0.51636405, 0.14080868,
            0.62289701, 0.07853030, 0.70567541, 0.79844050, 0.63766566,
            0.03559031, 0.40994535, 0.08423996, 0.00389626, 0.50608347,
            0.19622681, 0.90537903, 0.75458034, 0.75102094, 0.81491673,
            0.92925931, 0.38074332, 0.54817053, 0.72593246, 0.02146791,
            0.57990460, 0.87921074, 0.59913886, 0.66726893, 0.24269154,
            0.73344575, 0.71826052, 0.92313935, 0.05212996, 0.93771536,
            0.69489385, 0.57581887, 0.48106155, 0.06808800, 0.33633940,
            0.69142320, 0.46566781, 0.70654143, 0.16541368, 0.76257631,
            0.82777900, 0.62958327, 0.34757935, 0.10891487, 0.79912728,
            0.01156543, 0.23111261, 0.58535640, 0.87461956, 0.21723454,
            0.80409615, 0.33169686, 0.72800785, 0.31218099, 0.13729737,
            0.41637635, 0.01234597, 0.58313811, 0.66746028, 0.05105595,
            0.14930937, 0.56044864, 0.76196851, 0.98800104, 0.37075949,
            0.88740864, 0.40697115, 0.96598278, 0.86013661, 0.85386784,
            0.23986516, 0.39027464, 0.59593927, 0.00161530, 0.31768197,
            0.65702729, 0.66461914, 0.62937471, 0.92120758, 0.87578958,
            0.37539860, 0.59182615, 0.12092214, 0.55130437, 0.86365117,
            0.38725162, 0.28757657, 0.42803199, 0.39014405, 0.50253853,
            0.85306128, 0.92018995, 0.71421618, 0.54236780, 0.96221157,
            0.22956898, 0.96519876, 0.06694102, 0.11915854, 0.01354308,
            0.24720070, 0.71671739, 0.00604305, 0.65012352, 0.71151390,
            0.46616159, 0.99228224, 0.20684576, 0.62941006, 0.84535326,
            0.30678993, 0.55264568, 0.50094784, 0.39409122, 0.15479416,
            0.36536318, 0.51925656, 0.65567178, 0.67255519, 0.55089659,
            0.42194295, 0.27172413, 0.79540954, 0.71594806, 0.88372598,
            0.29179452, 0.66411306, 0.57064687, 0.42494633, 0.73389255,
            0.12097313, 0.53338622, 0.38493233, 0.79348021, 0.01851341,
            0.58594454, 0.88396240, 0.04410730, 0.67419924, 0.62770011,
            0.64644200, 0.40335135, 0.17952644, 0.55564678, 0.56643922,
            0.37715015, 0.87092180, 0.56726159, 0.34011210, 0.13661819,
            0.11474177, 0.93930097, 0.48549077, 0.28484289, 0.13374371,
            0.40966056, 0.73662873, 0.37355323, 0.65216092, 0.27372469,
            0.56032082, 0.14882684, 0.95462890, 0.17090266, 0.92374766,
            0.98368259, 0.68448367, 0.02872548, 0.68598279, 0.04601084,
            0.17170501, 0.08906644, 0.23730372, 0.02929037, 0.38566261,
            0.68957569, 0.53021050, 0.44200157, 0.32085701, 0.72520053,
            0.17454174, 0.19676599, 0.88243877, 0.87030228, 0.15124486,
            0.78670160, 0.51731632, 0.56674531, 0.20910664, 0.84962640,
            0.05220467, 0.91783159, 0.19138968, 0.68126378, 0.79574471,
            0.14910848, 0.28030331, 0.98067264, 0.31263980, 0.67448964,
            0.69266650, 0.40033551, 0.22789781, 0.78317066, 0.55815261,
            0.11247054, 0.47337901, 0.46310033, 0.53192452, 0.56164078,
            0.41750378, 0.43880622, 0.69739327, 0.11092778, 0.18333765,
            0.67222441, 0.12789170, 0.88316806, 0.37891271, 0.14935268,
            0.64522185, 0.93902079, 0.62481092, 0.21794927, 0.71535266,
            0.62169579, 0.65147153, 0.01411645, 0.96413465, 0.01021578,
            0.50605180, 0.51595053, 0.03308040, 0.01497870, 0.07809658,
            0.35743383, 0.58079701, 0.11785557, 0.89568677, 0.38793964,
            0.37117709, 0.13994133, 0.11032813, 0.99998594, 0.06695042,
            0.79774786, 0.11093584, 0.23879095, 0.85918615, 0.16109636,
            0.63479696, 0.75023359, 0.29061187, 0.53764772, 0.30652318,
            0.51387302, 0.81620973, 0.82433610, 0.18302488, 0.79048957,
            0.07598187, 0.27887732, 0.37061042, 0.36441016, 0.93736882,
            0.77480946, 0.02269132, 0.40309874, 0.16427650, 0.13969296,
            0.57605029, 0.00242426, 0.56626691, 0.84390990, 0.87455806,
            0.12321023, 0.87561663, 0.60431578, 0.35880839, 0.50426282,
            0.50697689, 0.06631164, 0.14976092, 0.89356018, 0.91473662,
            0.04235237, 0.50073724, 0.75969690, 0.91743994, 0.79352335,
            0.58078351, 0.91819984, 0.53520520, 0.18267367, 0.05608828,
            0.68315721, 0.27264599, 0.41245634, 0.69706222, 0.69666203,
            0.08967342, 0.64081905, 0.22576796, 0.69315628, 0.53981640,
            0.76059129, 0.56712344, 0.94318621, 0.44081094, 0.31699284,
            0.29477911, 0.80069824, 0.28366921, 0.96718081, 0.85345644,
            0.11681215, 0.47600710, 0.33448255, 0.31217271, 0.35469241,
            0.59511650, 0.49583692, 0.48922303, 0.20215259, 0.60159380,
            0.17882055, 0.77601258, 0.71020391, 0.41833503, 0.71522856,
            0.87534517, 0.43703394, 0.43056077, 0.64828071, 0.43069441,
            0.39356849, 0.32063367, 0.92788963, 0.16878266, 0.56762591,
            0.56042446, 0.84958464, 0.79408949, 0.08220340, 0.13922856,
            0.82529019, 0.27134959, 0.00278080, 0.66192389, 0.01782933,
            0.95404763, 0.50787645, 0.85320521, 0.83690362, 0.83771227,
            0.46268665, 0.31716742, 0.01716647, 0.68264674, 0.01789888,
            0.30446846, 0.14942271, 0.26982182, 0.74933947, 0.50394161,
            0.78444542, 0.40009256, 0.40333422, 0.16627342, 0.01898760,
            0.04221829, 0.77960213, 0.66230976, 0.56015996, 0.49535426,
            0.38536259, 0.40406773, 0.99930568, 0.00857945, 0.16158390,
            0.64805163, 0.20237524, 0.59106326, 0.76968277, 0.96887042,
            0.29264851, 0.97373775, 0.16767633, 0.33014482, 0.27426548,
            0.10947014, 0.75920652, 0.37757457, 0.13125207, 0.00826451,
            0.96684342, 0.69362226, 0.22763554, 0.20717541, 0.42112268,
            0.22803038, 0.33481806, 0.14968742, 0.71598558, 0.55126711,
            0.64518015, 0.65170197, 0.89103003, 0.72728361, 0.24485454,
            0.09410780, 0.79818029, 0.54212409, 0.17790462, 0.64442619,
            0.62193511, 0.51193256, 0.02848781, 0.05719604, 0.45795152,
            0.03219332, 0.28310254, 0.85746127, 0.64890240, 0.20658356,
            0.50946422, 0.80432490, 0.08354468, 0.09222723, 0.67455943,
            0.44638771, 0.76366629, 0.99677267, 0.89311242, 0.11627279,
            0.09181302, 0.44767077, 0.16448724, 0.26005539, 0.28670391,
            0.52465703, 0.43598116, 0.41869096, 0.98043420, 0.01497272,
            0.51791571, 0.61825308, 0.85503436, 0.63025655, 0.02719292,
            0.09865668, 0.30321729, 0.56998039, 0.14946350, 0.64823918,
            0.19931639, 0.14623555, 0.54169913, 0.68944135, 0.73551005,
            0.46743658, 0.04109096, 0.26625801, 0.09537298, 0.98207890,
            0.58109721, 0.70793680, 0.84379365, 0.42774726, 0.12653597,
            0.08566633, 0.53366781, 0.33960092, 0.11036831, 0.84464510,
            0.16493476, 0.92493443, 0.87640673, 0.52727644, 0.57181349,
            0.65071340, 0.00978637, 0.31700693, 0.69148222, 0.85063311,
            0.06781819, 0.30794534, 0.65541667, 0.16400484, 0.06886223,
            0.96227205, 0.09633060, 0.34513153, 0.31013900, 0.78165882,
            0.39583699, 0.86327936, 0.69269199, 0.11016575, 0.67358419,
            0.81775427, 0.50052824, 0.30068582, 0.16606837, 0.62243724,
            0.47863741, 0.68796498, 0.31526949, 0.41180883, 0.23022147,
            0.82342139, 0.83003381, 0.53571829, 0.41081533, 0.48600142,
        };

        /// <summary>
        /// Taken from http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt64.html,
        /// http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt19937-64.out.txt.
        /// </summary>
        [TestMethod]
        public void MersenneTwister19937UniformRandom64_NextUInt_ReferenceImplementationTest()
        {
            const int ulongLength = 100;
            var gen = new MersenneTwister19937UniformRandom64(new[] { 0x12345L, 0x23456L, 0x34567L, 0x45678L });
            for (int i = 0; i < ulongLength; ++i)
            {
                ulong expected = ExpectedULong[i];
                ulong lower = gen.NextUInt();
                ulong upper = gen.NextUInt();
                ulong actual = lower + (upper << 32);
                Assert.AreEqual(
                    expected,
                    actual,
                    Invariant($"Reference implementation ulong 1: index={i}, actual={actual} expected={expected}"));
            }
        }

        /// <summary>
        /// Taken from http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt64.html,
        /// http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt19937-64.out.txt.
        /// </summary>
        [TestMethod]
        public void MersenneTwister19937UniformRandom64_NextULong_ReferenceImplementationTest()
        {
            var gen = new MersenneTwister19937UniformRandom64(new[] { 0x12345L, 0x23456L, 0x34567L, 0x45678L });
            for (int i = 0; i < ExpectedULong.Length; ++i)
            {
                ulong expected = ExpectedULong[i];
                ulong actual = gen.NextULong();
                Assert.AreEqual(
                    expected,
                    actual,
                    Invariant($"Reference implementation ulong 2: index={i}, actual={actual} expected={expected}"));
            }

            const int doubleLength = 100;
            for (int i = 0; i < doubleLength; ++i)
            {
                var expected = ExpectedDouble[i];
                double actual = gen.NextDouble();
                Assert.AreEqual(
                    expected,
                    actual,
                    1e-8,
                    Invariant($"Reference implementation double: index={i}, actual={actual} expected={expected}"));
            }
        }

        /// <summary>
        /// Taken from Boost unit tests.
        /// </summary>
        [Ignore("Does not work yet.")]
        [TestMethod]
        public void MersenneTwister19937UniformRandom64_NextULong_BoostReferenceImplementationTest()
        {
            var gen = new MersenneTwister19937UniformRandom64(5489L);
            for (int i = 0; i != 9999; ++i)
            {
                gen.NextULong();
            }

            ulong expected = 9981545732273789042UL;
            ulong actual = gen.NextULong();
            Assert.AreEqual(
                expected,
                actual,
                Invariant($"Boost (validate): actual={actual} expected={expected}"));

            gen.Reset();

            var expectedArray = new[] { 0xD091BB5CU, 0x22AE9EF6U, 0xE7E1FAEEU, 0xD5C31F79U };
            for (int i = 0; i != expectedArray.Length; ++i)
            {
                expected = expectedArray[i];
                actual = gen.NextULong();
                Assert.AreEqual(
                    expected,
                    actual,
                    Invariant($"Boost (generate): index={i}, actual={actual} expected={expected}"));
            }
        }

#pragma warning disable S2699 // Tests should include assertions
        [TestMethod]
        public void MersenneTwister19937UniformRandom64_NextDouble_GeneratedMany_MeanHasCorrectValue()
        {
            var gen = new MersenneTwister19937UniformRandom64(Seed);
            double expected = 0.5;

            double actual = 0;
            for (int i = 0; i < Count; ++i)
            {
                actual += gen.NextDouble();
            }

            actual /= Count;
            Doubles.AreEqual(
                1,
                expected / actual,
                1e-1,
                Invariant($"Mean value 1: actual={actual}, expected={expected}"));

            expected = 4;
            actual = 0;
            for (int i = 0; i < Count; ++i)
            {
                actual += gen.NextDouble(8);
            }

            actual /= Count;
            Doubles.AreEqual(
                1,
                expected / actual,
                1e-1,
                Invariant($"Mean value 2: actual={actual}, expected={expected}"));

            expected = 6;
            actual = 0;
            for (int i = 0; i < Count; ++i)
            {
                actual += gen.NextDouble(4, 8);
            }

            actual /= Count;
            Doubles.AreEqual(
                1,
                expected / actual,
                1e-2,
                Invariant($"Mean value 3: actual={actual}, expected={expected}"));
        }

        [TestMethod]
        public void MersenneTwister19937UniformRandom64_NextInt_GeneratedMany_MeanHasCorrectValue()
        {
            var gen = new MersenneTwister19937UniformRandom64(Seed);

            double expected = int.MaxValue / 2d;
            double actual = 0;
            for (int i = 0; i < Count; ++i)
            {
                actual += gen.NextInt();
            }

            actual /= Count;
            Doubles.AreEqual(
                1,
                expected / actual,
                1e-1,
                Invariant($"Mean value 1: actual={actual}, expected={expected}"));

            expected = 400d;
            actual = 0d;
            for (int i = 0; i < Count; ++i)
            {
                actual += gen.NextInt(800);
            }

            actual /= Count;
            Doubles.AreEqual(
                1,
                expected / actual,
                1e-1,
                Invariant($"Mean value 2: actual={actual}, expected={expected}"));

            expected = 600d;
            actual = 0d;
            for (int i = 0; i < Count; ++i)
            {
                actual += gen.NextInt(400, 800);
            }

            actual /= Count;
            Doubles.AreEqual(
                1,
                expected / actual,
                1e-2,
                Invariant($"Mean value 3: actual={actual}, expected={expected}"));
        }

        [TestMethod]
        public void MersenneTwister19937UniformRandom64_NextBoolean_GeneratedMany_MeanHasCorrectValue()
        {
            var gen = new MersenneTwister19937UniformRandom64(Seed);

            const double expected = Count / 2d;
            double actual = 0;
            for (int i = 0; i < Count; ++i)
            {
                actual += gen.NextBoolean() ? 1 : 0;
            }

            Doubles.AreEqual(
                1,
                expected / actual,
                1e-1,
                Invariant($"Mean value: actual={actual}, expected={expected}"));
        }

        [TestMethod]
        public void MersenneTwister19937UniformRandom64_NextBytes_GeneratedMany_MeanHasCorrectValue()
        {
            var gen = new MersenneTwister19937UniformRandom64(Seed);

            const double expected = 128;
            double actual = 0;
            var array = new byte[32];

            for (int i = 0; i < Count; ++i)
            {
                gen.NextBytes(array);
                actual = array.Aggregate(actual, (current, b) => current + b);
            }

            actual /= Count * 32;
            Doubles.AreEqual(
                1,
                expected / actual,
                1e-2,
                Invariant($"Mean value: actual={actual}, expected={expected}"));
        }
#pragma warning restore S2699 // Tests should include assertions

        [TestMethod]
        public void MersenneTwister19937UniformRandom64_Seed_SameSeed_SameValue()
        {
            var gen1 = new MersenneTwister19937UniformRandom64(Seed);
            int expected = gen1.NextInt();

            var gen2 = new MersenneTwister19937UniformRandom64(Seed);
            int actual = gen2.NextInt();

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void MersenneTwister19937UniformRandom64_Seed_DifferentSeed_DifferentValue()
        {
            var gen1 = new MersenneTwister19937UniformRandom64(Seed);
            int expected = gen1.NextInt();

            var gen2 = new MersenneTwister19937UniformRandom64(Seed + 1);
            int actual = gen2.NextInt();

            Assert.AreNotEqual(expected, actual);
        }

        [TestMethod]
        public void MersenneTwister19937UniformRandom64_CanReset_ReturnsTrue()
        {
            var gen = new MersenneTwister19937UniformRandom64();

            Assert.IsTrue(gen.CanReset);
        }

        [TestMethod]
        public void MersenneTwister19937UniformRandom64_Reset_ValueGeneratedThenReset_SameValueGenerated()
        {
            var gen = new MersenneTwister19937UniformRandom64();
            int expected = gen.NextInt();

            gen.Reset();
            int actual = gen.NextInt();

            Assert.AreEqual(expected, actual);
        }
    }
}
