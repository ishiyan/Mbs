using System;
using System.Linq;
using Mbs.Trading.Data;
using Mbs.Trading.Indicators;
using Mbs.Trading.Indicators.Abstractions;
using Mbs.Trading.Indicators.JohnBollinger;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Mbs.UnitTests.Trading.Indicators.JohnBollinger
{
    [TestClass]
    public class BollingerBandsTests
    {
        private const int Decimals = 9;
        private const int Middle = (int)BollingerBands.OutputKind.MiddleMovingAverageValue;
        private const int StDev = (int)BollingerBands.OutputKind.StandardDeviationValue;
        private const int Lower = (int)BollingerBands.OutputKind.LowerBandValue;
        private const int Upper = (int)BollingerBands.OutputKind.UpperBandValue;
        private const int PercentB = (int)BollingerBands.OutputKind.PercentBandValue;
        private const int BandWidth = (int)BollingerBands.OutputKind.BandWidthValue;
        private const int LowerUpper = (int)BollingerBands.OutputKind.LowerUpperBand;

        /// <summary>
        /// Closing price test data.
        /// </summary>
        private static readonly double[] ClosingPrice =
        {
            91.5000, 94.8150, 94.3750, 95.0950, 93.7800, 94.6250, 92.5300, 92.7500, 90.3150, 92.4700,
            96.1250, 97.2500, 98.5000, 89.8750, 91.0000, 92.8150, 89.1550, 89.3450, 91.6250, 89.8750,
            88.3750, 87.6250, 84.7800, 83.0000, 83.5000, 81.3750, 84.4400, 89.2500, 86.3750, 86.2500,
            85.2500, 87.1250, 85.8150, 88.9700, 88.4700, 86.8750, 86.8150, 84.8750, 84.1900, 83.8750,
            83.3750, 85.5000, 89.1900, 89.4400, 91.0950, 90.7500, 91.4400, 89.0000, 91.0000, 90.5000,
            89.0300, 88.8150, 84.2800, 83.5000, 82.6900, 84.7500, 85.6550, 86.1900, 88.9400, 89.2800,
            88.6250, 88.5000, 91.9700, 91.5000, 93.2500, 93.5000, 93.1550, 91.7200, 90.0000, 89.6900,
            88.8750, 85.1900, 83.3750, 84.8750, 85.9400, 97.2500, 99.8750, 104.9400, 106.0000, 102.5000,
            102.4050, 104.5950, 106.1250, 106.0000, 106.0650, 104.6250, 108.6250, 109.3150, 110.5000, 112.7500,
            123.0000, 119.6250, 118.7500, 119.2500, 117.9400, 116.4400, 115.1900, 111.8750, 110.5950, 118.1250,
            116.0000, 116.0000, 112.0000, 113.7500, 112.9400, 116.0000, 120.5000, 116.6200, 117.0000, 115.2500,
            114.3100, 115.5000, 115.8700, 120.6900, 120.1900, 120.7500, 124.7500, 123.3700, 122.9400, 122.5600,
            123.1200, 122.5600, 124.6200, 129.2500, 131.0000, 132.2500, 131.0000, 132.8100, 134.0000, 137.3800,
            137.8100, 137.8800, 137.2500, 136.3100, 136.2500, 134.6300, 128.2500, 129.0000, 123.8700, 124.8100,
            123.0000, 126.2500, 128.3800, 125.3700, 125.6900, 122.2500, 119.3700, 118.5000, 123.1900, 123.5000,
            122.1900, 119.3100, 123.3100, 121.1200, 123.3700, 127.3700, 128.5000, 123.8700, 122.9400, 121.7500,
            124.4400, 122.0000, 122.3700, 122.9400, 124.0000, 123.1900, 124.5600, 127.2500, 125.8700, 128.8600,
            132.0000, 130.7500, 134.7500, 135.0000, 132.3800, 133.3100, 131.9400, 130.0000, 125.3700, 130.1300,
            127.1200, 125.1900, 122.0000, 125.0000, 123.0000, 123.5000, 120.0600, 121.0000, 117.7500, 119.8700,
            122.0000, 119.1900, 116.3700, 113.5000, 114.2500, 110.0000, 105.0600, 107.0000, 107.8700, 107.0000,
            107.1200, 107.0000, 91.0000, 93.9400, 93.8700, 95.5000, 93.0000, 94.9400, 98.2500, 96.7500,
            94.8100, 94.3700, 91.5600, 90.2500, 93.9400, 93.6200, 97.0000, 95.0000, 95.8700, 94.0600,
            94.6200, 93.7500, 98.0000, 103.9400, 107.8700, 106.0600, 104.5000, 105.0000, 104.1900, 103.0600,
            103.4200, 105.2700, 111.8700, 116.0000, 116.6200, 118.2800, 113.3700, 109.0000, 109.7000, 109.2500,
            107.0000, 109.1900, 110.0000, 109.2000, 110.1200, 108.0000, 108.6200, 109.7500, 109.8100, 109.0000,
            108.7500, 107.8700,
        };

        /// <summary>
        /// Simple Moving Average of length 20 calculated from the <see cref="ClosingPrice"/>.
        /// </summary>
        private static readonly double[] Sma20Expected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 92.8910000,
            92.7347500, 92.3752500, 91.8955000, 91.2907500, 90.7767500, 90.1142500, 89.7097500, 89.5347500, 89.3377500, 89.0267500,
            88.4830000, 87.9767500, 87.3425000, 87.2972500, 87.1707500, 86.8737500, 86.7567500, 86.5332500, 86.1615000, 85.8615000,
            85.6115000, 85.5052500, 85.7257500, 86.0477500, 86.4275000, 86.8962500, 87.2462500, 87.2337500, 87.4650000, 87.6775000,
            87.8665000, 87.9510000, 87.8742500, 87.6007500, 87.3117500, 87.2055000, 87.1475000, 87.2132500, 87.4507500, 87.7210000,
            87.9835000, 88.1335000, 88.2725000, 88.3755000, 88.4832500, 88.6207500, 88.7065000, 88.8425000, 88.7925000, 88.7520000,
            88.7442500, 88.5630000, 88.5177500, 88.5865000, 88.7490000, 89.3740000, 90.0850000, 91.0225000, 91.8755000, 92.5365000,
            93.2255000, 94.0302500, 94.7380000, 95.4630000, 96.1037500, 96.6600000, 97.4335000, 98.3132500, 99.3382500, 100.4912500,
            102.1975000, 103.9192500, 105.6880000, 107.4067500, 109.0067500, 109.9662500, 110.7320000, 111.0787500, 111.3085000, 112.0897500,
            112.7695000, 113.3397500, 113.6335000, 114.0210000, 114.3647500, 114.9335000, 115.5272500, 115.8925000, 116.2175000, 116.3425000,
            115.9080000, 115.7017500, 115.5577500, 115.6297500, 115.7422500, 115.9577500, 116.4357500, 117.0105000, 117.6277500, 117.8495000,
            118.2055000, 118.5335000, 119.1645000, 119.9395000, 120.8425000, 121.6550000, 122.1800000, 122.9895000, 123.8395000, 124.9460000,
            126.1210000, 127.2400000, 128.3090000, 129.0900000, 129.8930000, 130.5870000, 130.7620000, 131.0435000, 131.0900000, 131.2025000,
            131.1965000, 131.3810000, 131.5690000, 131.3750000, 131.1095000, 130.6095000, 130.0280000, 129.3125000, 128.7720000, 128.0780000,
            127.2970000, 126.3685000, 125.6715000, 124.9120000, 124.2680000, 123.9050000, 123.9175000, 123.6610000, 123.6145000, 123.4615000,
            123.5335000, 123.3210000, 123.0205000, 122.8990000, 122.8145000, 122.8615000, 123.1210000, 123.5585000, 123.6925000, 123.9605000,
            124.4510000, 125.0230000, 125.5950000, 126.2890000, 126.7395000, 127.0365000, 127.2085000, 127.5150000, 127.6365000, 128.0555000,
            128.1895000, 128.3490000, 128.3305000, 128.4335000, 128.3835000, 128.3990000, 128.1740000, 127.8615000, 127.4555000, 127.0060000,
            126.5060000, 125.9280000, 125.0090000, 123.9340000, 123.0275000, 121.8620000, 120.5180000, 119.3680000, 118.4930000, 117.3365000,
            116.3365000, 115.4270000, 113.8770000, 112.3240000, 110.8675000, 109.4675000, 108.1145000, 106.8115000, 105.8365000, 104.6805000,
            103.3210000, 102.0800000, 100.8395000, 99.6770000, 98.6615000, 97.8425000, 97.4395000, 96.8395000, 96.2395000, 95.5925000,
            94.9675000, 94.3050000, 94.6550000, 95.1550000, 95.8550000, 96.3830000, 96.9580000, 97.4610000, 97.7580000, 98.0735000,
            98.5040000, 99.0490000, 100.0645000, 101.3520000, 102.4860000, 103.7190000, 104.5375000, 105.2375000, 105.9290000, 106.6885000,
            107.3075000, 108.0795000, 108.6795000, 108.9425000, 109.0550000, 109.1520000, 109.3580000, 109.5955000, 109.8765000, 110.1735000,
            110.4400000, 110.5700000,
        };

        /// <summary>
        /// Unbiased sample Standard Deviation of length 20 calculated from <see cref="ClosingPrice"/>.
        /// </summary>
        private static readonly double[] SampleStDev20Expected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 2.6585124451566200,
            2.8308188674880500, 3.0039839665105800, 3.4069595567092700, 3.8533564572774900, 4.1759604237260600, 4.5661224696557100, 4.6973053515595000, 4.6429608506346800, 4.6914461565143900, 4.6790263480546300,
            4.4363206067997100, 3.9322951899019900, 3.0752396141131100, 3.0424983133671800, 2.9309964512718900, 2.6126191108581200, 2.5568830093854900, 2.5137334756974700, 2.2578425309876800, 2.1336551909069600,
            2.1165041310713500, 2.0627609723250500, 2.2114970370174200, 2.2619963673245500, 2.4421240215931100, 2.3178613526266000, 2.4520629740990300, 2.4419270189318700, 2.5718598635801900, 2.6408399281887200,
            2.5927911702702900, 2.5948915401733400, 2.6826117845939100, 2.8392833023586500, 3.0336578038817500, 3.0865117851710900, 3.1050792429925400, 3.0681291552276400, 3.0049819488905200, 2.9079553315906200,
            2.7262781164842800, 2.6642689823901600, 2.7917583121904000, 2.8738924182333200, 3.0180052993396300, 3.1847520249662000, 3.2861307835075300, 3.3544909018398500, 3.3279879728401100, 3.3110001669077500,
            3.3104965738978600, 3.4043240305915600, 3.4696376555090500, 3.3773752265705700, 3.1492165274623600, 3.5310370476078200, 4.1245468650635100, 5.1867631372663700, 6.1412507083783800, 6.5453446895685500,
            6.8309752906193900, 7.1839183478758600, 7.6522618603225700, 8.0079586070753100, 8.3278683813035700, 8.5142553835812400, 8.8741745501972400, 9.1459374465560300, 9.3124407839869300, 9.4810271588495100,
            10.3144977809724000, 10.1994908638411000, 9.4920411814042200, 8.5948053887829600, 7.2637199174716000, 6.8866390234622900, 6.5486717013934600, 6.4079366649984600, 6.2976854770956200, 6.1139356510137400,
            5.7238119659063400, 5.4269717433050600, 5.1687571294420400, 4.8468387961422300, 4.4830230856914100, 3.8606939995154700, 3.7510151169909700, 3.4585217027540900, 3.2224628943190600, 3.1279813147241100,
            2.7331687798135300, 2.5897938726144900, 2.4895082345716400, 2.6193508009468800, 2.7679031941354600, 2.9844013218734500, 3.5642295524603300, 3.7137549801557400, 3.6159582245345300, 3.7803111470381700,
            3.9292901126633100, 4.0084966009714900, 3.9181661593954400, 4.3046883559794700, 4.6402698140699100, 5.1431512969343900, 5.5396684301309500, 5.8581840863422600, 6.1684899414601300, 6.5213571399953600,
            6.6204602320541500, 6.6221502311719300, 6.4124573662274100, 6.3868293756514400, 6.2162758355109900, 5.9090101584471500, 5.7774066300045900, 5.5301482563166500, 5.4619131022785500, 5.2976746388342300,
            5.3073695288522600, 5.0491957671234000, 4.8502912554977400, 5.0224668922961100, 5.1811759232213300, 5.5357075095762500, 6.0769110920806300, 6.5556908785220200, 6.5943920353425700, 6.3672588500199900,
            6.0613322315356200, 5.7701831358330900, 5.2003869036225000, 4.6443974171490800, 3.8069943939792500, 3.0347712998025500, 3.0540635139709200, 2.8104446173814600, 2.8144953272955400, 2.8292202291909300,
            2.8351743193413400, 2.7795794835304100, 2.5162638866717500, 2.4547610024088600, 2.3816280919616800, 2.3791756091023100, 2.2582781051057500, 2.1614256382012500, 2.2196677679328500, 2.5009587109115200,
            3.0394613442447200, 3.0969596295994000, 3.7512699603986700, 4.1432518375635400, 4.2961726847092800, 4.5404303934643400, 4.6623094288695900, 4.6326842281656500, 4.5372647394426400, 4.3480430867472500,
            4.2713753177709800, 4.0835135799816700, 4.1127599581891700, 3.9947574526200200, 4.0589125779929600, 4.0385770031691000, 4.3750517590923200, 4.6585510227514900, 5.1673035572367500, 5.4233689277344700,
            5.3996378046173300, 5.5383653297986500, 5.5223601933650700, 5.5675624449975700, 5.5958978161168200, 5.7664433989838300, 6.3924294039285700, 6.6600850318580000, 6.9722963822621100, 6.8578224831593800,
            6.8141681154241500, 6.7841410269601700, 8.5220791261040800, 9.1921519157434100, 9.7050252175707500, 9.8058596203870300, 10.1289270357100000, 10.0600388588765000, 9.8875766149137600, 9.5046190848117900,
            8.8165955358122900, 8.1898795055720700, 7.7801971798852700, 7.5216145383260600, 6.7855692659612500, 6.3173736006766500, 6.0855492983918800, 5.6707573753887900, 5.0422441484552900, 4.3748682686934800,
            3.4328135997351100, 1.9442641687524700, 1.9480503073586200, 2.8358893527520800, 3.9935678547542300, 4.5967003039365700, 4.8628122684198600, 5.1546258223484100, 5.3691414583711600, 5.4908069342742000,
            5.5585793338339900, 5.6652522589814800, 6.0588113086383700, 6.5772227381599600, 7.1612711309184700, 7.6599813796668000, 7.7779342914494500, 7.4993998882717600, 7.2226958810041100, 6.6877675253917300,
            6.0549395885551700, 5.1524235227604100, 4.5842630986773400, 4.4468710170304300, 4.4467711526691500, 4.3989024947019200, 4.2639845462344600, 4.1389236777846400, 3.9385440470466100, 3.6075203249236000,
            3.2627563420164300, 3.0933204778922200,
        };

        /// <summary>
        /// Population Standard Deviation of length 20 calculated from <see cref="ClosingPrice"/>.
        /// </summary>
        private static readonly double[] PopulationStDev20Expected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 2.59119740660568000,
            2.75914093288110000, 2.92792139366821000, 3.32069341403268000, 3.75578729263253000, 4.07022274421192000, 4.45050566649454000, 4.57836692364210000, 4.52539845621355000, 4.57265608672903000, 4.56055075484310000,
            4.32399046021149000, 3.83272725190562000, 2.99737280797701000, 2.96546053548180000, 2.85678196359120000, 2.54646611748517000, 2.49214128562166000, 2.45008432252851000, 2.20067268124999000, 2.07962983485042000,
            2.06291304954911000, 2.01053069797504000, 2.15550068139632000, 2.20472134010174000, 2.38028806029858000, 2.25917179238322000, 2.38997535290638000, 2.38009604585613000, 2.50673891739846000, 2.57397236776155000,
            2.52714023156611000, 2.52918741891541000, 2.61468653713978000, 2.76739104347398000, 2.95684387269602000, 3.00835956128918000, 3.02645688057834000, 2.99044238993163000, 2.92889410656992000, 2.83432425809045000,
            2.65724721281254000, 2.59680818506104000, 2.72106941293308000, 2.80112383696259000, 2.94158769842070000, 3.10411230265595000, 3.20292409369938000, 3.26955329517658000, 3.24372143532702000, 3.22716377024780000,
            3.22667292849771000, 3.31812462092671000, 3.38178446792518000, 3.29185817586360000, 3.06947658404491000, 3.44162919269348000, 4.02011100593006000, 5.05543136141714000, 5.98575076744764000, 6.37961286051121000,
            6.65801113321388000, 7.00201747266458000, 7.45850226251893000, 7.80519256649059000, 8.11700204432031000, 8.29866962229489000, 8.64947543207101000, 8.91435713820688000, 9.07664451697322000, 9.24096218948546000,
            10.05332886411260000, 9.94123398716176000, 9.25169733076045000, 8.37718005581234000, 7.07979842138885000, 6.71226542886230000, 6.38285563051523000, 6.24568408483010000, 6.13822451935411000, 5.95912734278267000,
            5.57888181000458000, 5.28955774970838000, 5.03788127589367000, 4.72411409684398000, 4.36951040592650000, 3.76293904415153000, 3.65603729295805000, 3.37094997738026000, 3.14086831147057000, 3.04877905890210000,
            2.66396340064949000, 2.52421882718199000, 2.42647247820782000, 2.55302735737399000, 2.69781831995781000, 2.90883459266765000, 3.47398124455213000, 3.61972060385881000, 3.52440011739587000, 3.68459153095699000,
            3.82979826492206000, 3.90699920015349000, 3.81895597644173000, 4.19569121242257000, 4.52277555821644000, 5.01292379754570000, 5.39940089269171000, 5.70985155236106000, 6.01230028774345000, 6.35623268925863000,
            6.45282643498181000, 6.45447364236620000, 6.25009031934739000, 6.22511124398592000, 6.05887621593312000, 5.75939067957714000, 5.63111942689906000, 5.39012177506223000, 5.32361437371265000, 5.16353452104273000,
            5.17298393096286000, 4.92134727488317000, 4.72747913797618000, 4.89529519028219000, 5.04998561879140000, 5.39554026488543000, 5.92304026661984000, 6.38969707810941000, 6.42741829975302000, 6.20603625513097000,
            5.90785587163397000, 5.62407883568500000, 5.06871016630464000, 4.52679864805140000, 3.71059914299564000, 2.95792917427040000, 2.97673289866592000, 2.73928257030924000, 2.74323071395754000, 2.75758277300972000,
            2.76338610223038000, 2.70919895910212000, 2.45255066206592000, 2.39260506561363000, 2.32132392181703000, 2.31893353721059000, 2.20109722638506000, 2.10669711871451000, 2.16346452478426000, 2.43763302201131000,
            2.96250046413499000, 3.01854286038811000, 3.65628568358655000, 4.03834235794837000, 4.18739116276471000, 4.42546412820170000, 4.54425711750557000, 4.51538204363706000, 4.42237863033006000, 4.23794817688938000,
            4.16322167918068000, 3.98011670683160000, 4.00862255020350000, 3.89360793480802000, 3.95613861612558000, 3.93631794955641000, 4.26427297437676000, 4.54059387635582000, 5.03646450895864000, 5.28604615946550000,
            5.26291592180608000, 5.39813078759676000, 5.38253091026889000, 5.42658861532731000, 5.45420651882563000, 5.62043379108766000, 6.23056947638015000, 6.49144791244604000, 6.79575389489643000, 6.68417853965616000,
            6.64162952519937000, 6.61236273959619000, 8.30629526323258000, 8.95940143089928000, 9.45928849068470000, 9.55756970939789000, 9.87245687506408000, 9.80531298582559000, 9.63721758341068000, 9.26395675454069000,
            8.59335435089232000, 7.98250712495767000, 7.58319818744044000, 7.33116300459893000, 6.61375481477806000, 6.15741412851207000, 5.93145974866221000, 5.52717059172231000, 4.91457167513101000, 4.26409413005858000,
            3.34589281806815000, 1.89503430048113000, 1.89872457191663000, 2.76408303059080000, 3.89244845823294000, 4.48030925271906000, 4.73968311177024000, 5.02410778148718000, 5.23319176029314000, 5.35177659754217000,
            5.41783296161851000, 5.52180486797569000, 5.90539877993011000, 6.41068373888464000, 6.97994369604799000, 7.46602631926783000, 7.58099259661952000, 7.30951084204682000, 7.03981313672458000, 6.51842946958851000,
            5.90162509398894000, 5.02196124537018000, 4.46818696453047000, 4.33427372808871000, 4.33417639234953000, 4.28751979587267000, 4.15601804615909000, 4.03412378962272000, 3.83881788445350000, 3.51617587017487000,
            3.18014150628553000, 3.01499585406017000,
        };

        /// <summary>
        /// Unbiased sample Lower Band.
        /// </summary>
        private static readonly double[] SampleLowerBandExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 87.573975109686800,
            87.073112265023900, 86.367282066978800, 85.081580886581500, 83.584037085445000, 82.424829152547900, 80.982005060688600, 80.315139296881000, 80.248828298730600, 79.954857686971200, 79.668697303890700,
            79.610358786400600, 80.112159620196000, 81.192020771773800, 81.212253373265700, 81.308757097456200, 81.648511778283800, 81.642983981229000, 81.505783048605100, 81.645814938024700, 81.594189618186100,
            81.378491737857300, 81.379728055349900, 81.302755925965200, 81.523757265350900, 81.543251956813800, 82.260527294746800, 82.342124051802000, 82.349895962136300, 82.321280272839600, 82.395820143622600,
            82.680917659459400, 82.761216919653300, 82.509026430812200, 81.922183395282700, 81.244434392236500, 81.032476429657800, 80.937341514014900, 81.076991689544700, 81.440786102219000, 81.905089336818800,
            82.530943767031500, 82.804962035219700, 82.688983375619200, 82.627715163533400, 82.447239401320700, 82.251245950067600, 82.134238432985000, 82.133518196320300, 82.136524054319800, 82.129999666184500,
            82.123256852204300, 81.754351938816900, 81.578474688981900, 81.831749546858900, 82.450566945075300, 82.311925904784400, 81.835906269873000, 80.648973725467300, 79.592998583243300, 79.445810620862900,
            79.563549418761200, 79.662413304248300, 79.433476279354900, 79.447082785849400, 79.448013237392900, 79.631489232837500, 79.685150899605500, 80.021375106888000, 80.713368432026100, 81.529195682301000,
            81.568504438055200, 83.520268272317700, 86.703917637191600, 90.217139222434100, 94.479310165056800, 96.192971953075400, 97.634656597213100, 98.262876670003100, 98.713129045808800, 99.861878697972500,
            101.321876068187000, 102.485806513390000, 103.295985741116000, 104.327322407716000, 105.398703828617000, 107.212112000969000, 108.025219766018000, 108.975456594492000, 109.772574211362000, 110.086537370552000,
            110.441662440373000, 110.522162254771000, 110.578733530857000, 110.391048398106000, 110.206443611729000, 109.988947356253000, 109.307290895079000, 109.582990039689000, 110.395833550931000, 110.288877705924000,
            110.346919774673000, 110.516506798057000, 111.328167681209000, 111.330123288041000, 111.561960371860000, 111.368697406131000, 111.100663139738000, 111.273131827315000, 111.502520117080000, 111.903285720009000,
            112.880079535892000, 113.995699537656000, 115.484085267545000, 116.316341248697000, 117.460448328978000, 118.768979683106000, 119.207186739991000, 119.983203487367000, 120.166173795443000, 120.607150722332000,
            120.581760942295000, 121.282608465753000, 121.868417489005000, 121.330066215408000, 120.747148153557000, 119.538084980847000, 117.874177815839000, 116.201118242956000, 115.583215929315000, 115.343482299960000,
            115.174335536929000, 114.828133728334000, 115.270726192755000, 115.623205165702000, 116.654011212041000, 117.835457400395000, 117.809372972058000, 118.040110765237000, 117.985509345409000, 117.803059541618000,
            117.863151361317000, 117.761841032939000, 117.987972226656000, 117.989477995182000, 118.051243816077000, 118.103148781795000, 118.604443789789000, 119.235648723598000, 119.253164464134000, 118.958582578177000,
            118.372077311511000, 118.829080740801000, 118.092460079203000, 118.002496324873000, 118.147154630581000, 117.955639213071000, 117.883881142261000, 118.249631543669000, 118.561970521115000, 119.359413826506000,
            119.646749364458000, 120.181972840037000, 120.104980083622000, 120.443985094760000, 120.265674844014000, 120.321845993662000, 119.423896481815000, 118.544397954497000, 117.120892885527000, 116.159262144531000,
            115.706724390765000, 114.851269340403000, 113.964279613270000, 112.798875110005000, 111.835704367766000, 110.329113202032000, 107.733141192143000, 106.047829936284000, 104.548407235476000, 103.620855033681000,
            102.708163769152000, 101.858717946080000, 96.832841747791800, 93.939696168513200, 91.457449564858500, 89.855780759226000, 87.856645928580000, 86.691422282247000, 86.061346770172500, 85.671261830376400,
            85.687808928375400, 85.700240988855900, 85.279105640229500, 84.633770923347900, 85.090361468077500, 85.207752798646700, 85.268401403216200, 85.497985249222400, 86.155011703089400, 86.842763462613000,
            88.101872800529800, 90.416471662495100, 90.758899385282800, 89.483221294495800, 87.867864290491500, 87.189599392126900, 87.232375463160300, 87.151748355303200, 87.019717083257700, 87.091886131451600,
            87.386841332332000, 87.718495482037100, 87.946877382723300, 88.197554523680100, 88.163457738163100, 88.399037240666400, 88.981631417101100, 90.238700223456500, 91.483608237991800, 93.312964949216600,
            95.197620822889600, 97.774652954479200, 99.510973802645300, 100.048757965939000, 100.161457694662000, 100.354195010596000, 100.830030907531000, 101.317652644431000, 101.999411905907000, 102.958459350153000,
            103.914487315967000, 104.383359044216000,
        };

        /// <summary>
        /// Population Lower Band.
        /// </summary>
        private static readonly double[] PopulationLowerBandExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 87.708605186788600,
            87.216468134237800, 86.519407212663600, 85.254113171934600, 83.779175414734900, 82.636304511576200, 81.213238667010900, 80.553016152715800, 80.483953087572900, 80.192437826541900, 79.905648490313800,
            79.835019079577000, 80.311295496188800, 81.347754384046000, 81.366328929036400, 81.457186072817600, 81.780817765029700, 81.772467428756700, 81.633081354943000, 81.760154637500100, 81.702240330299200,
            81.485673900901800, 81.484188604049900, 81.414748637207400, 81.638307319796600, 81.666923879402900, 82.377906415233600, 82.466299294187300, 82.473557908287700, 82.451522165203100, 82.529555264476900,
            82.812219536867800, 82.892625162169200, 82.644876925720500, 82.065967913052000, 81.398062254608000, 81.188780877421600, 81.094586238843300, 81.232365220136700, 81.592961786860200, 82.052351483819100,
            82.669005574374900, 82.939883629877900, 82.830361174133800, 82.773252326074800, 82.600074603158600, 82.412525394688100, 82.300651812601200, 82.303393409646800, 82.305057129346000, 82.297672459504400,
            82.290904143004600, 81.926750758146600, 81.754181064149600, 82.002783648272800, 82.610046831910200, 82.490741614613000, 82.044777988139900, 80.911637277165700, 79.903998465104700, 79.777274278977600,
            79.909477733572200, 80.026215054670900, 79.820995474962100, 79.852614867018800, 79.869745911359400, 80.062660755410200, 80.134549135858000, 80.484535723586200, 81.184960966053600, 82.009325621029100,
            82.090842271774800, 84.036782025676500, 87.184605338479100, 90.652389888375300, 94.847153157222300, 96.541719142275400, 97.966288738969600, 98.587381830339800, 99.032050961291800, 100.171495314435000,
            101.611736379991000, 102.760634500583000, 103.557737448213000, 104.572771806312000, 105.625729188147000, 107.407621911697000, 108.215175414084000, 109.150600045239000, 109.935763377059000, 110.244941882196000,
            110.580073198701000, 110.653312345636000, 110.704805043584000, 110.523695285252000, 110.346613360084000, 110.140080814665000, 109.487787510896000, 109.771058792282000, 110.578949765208000, 110.480316938086000,
            110.545903470156000, 110.719501599693000, 111.526588047117000, 111.548117575155000, 111.796948883567000, 111.629152404909000, 111.381198214617000, 111.569796895278000, 111.814899424513000, 112.233534621483000,
            113.215347130036000, 114.331052715268000, 115.808819361305000, 116.639777512028000, 117.775247568134000, 119.068218640846000, 119.499761146202000, 120.263256449876000, 120.442771252575000, 120.875430957915000,
            120.850532138074000, 121.538305450234000, 122.114041724048000, 121.584409619436000, 121.009528762417000, 119.818419470229000, 118.181919466760000, 116.533105843781000, 115.917163400494000, 115.665927489738000,
            115.481288256732000, 115.120342328630000, 115.534079667391000, 115.858402703897000, 116.846801714009000, 117.989141651459000, 117.964034202668000, 118.182434859381000, 118.128038572085000, 117.946334453981000,
            118.006727795539000, 117.902602081796000, 118.115398675868000, 118.113789868773000, 118.171852156366000, 118.223632925579000, 118.718805547230000, 119.345105762571000, 119.365570950431000, 119.085233955977000,
            118.525999071730000, 118.985914279224000, 118.282428632827000, 118.212315284103000, 118.364717674471000, 118.185571743597000, 118.119985764989000, 118.484235912726000, 118.791742739340000, 119.579603646221000,
            119.863056641639000, 120.388766586337000, 120.313254899593000, 120.646284130384000, 120.471222767749000, 120.526364100887000, 119.645454051246000, 118.780312247288000, 117.382570982083000, 116.433907681069000,
            115.980168156388000, 115.131738424806000, 114.243938179462000, 113.080822769345000, 112.119086962349000, 110.621132417825000, 108.056861047240000, 106.385104175108000, 104.901492210207000, 103.968142920688000,
            103.053240949601000, 102.202274520808000, 97.264409473534800, 94.405197138201400, 91.948923018630600, 90.352360581204200, 88.369586249871800, 87.200874028348800, 86.562064833178600, 86.152586490918600,
            86.134291298215400, 86.114985750084700, 85.673103625119100, 85.014673990802100, 85.433990370443900, 85.527671742975900, 85.576580502675600, 85.785158816555400, 86.410356649738000, 87.064311739882900,
            88.275714363863700, 90.514931399037700, 90.857550856166700, 89.626833938818400, 88.070103083534100, 87.422381494561900, 87.478633776459500, 87.412784437025600, 87.291616479413700, 87.369946804915700,
            87.668334076763000, 88.005390264048600, 88.253702440139800, 88.530632522230700, 88.526112607904100, 88.786947361464300, 89.375514806760900, 90.618478315906400, 91.849373726550800, 93.651641060823000,
            95.504249812022100, 98.035577509259600, 99.743126070939100, 100.273952543823000, 100.386647215301000, 100.576960408255000, 101.045963907682000, 101.527252420755000, 102.198864231093000, 103.141148259650000,
            104.079716987429000, 104.540008291880000,
        };

        /// <summary>
        /// Unbiased sample Upper Band.
        /// </summary>
        private static readonly double[] SampleUpperBandExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 98.208024890313200,
            98.396387734976100, 98.383217933021200, 98.709419113418500, 98.997462914555000, 99.128670847452100, 99.246494939311400, 99.104360703119000, 98.820671701269400, 98.720642313028800, 98.384802696109300,
            97.355641213599400, 95.841340379804000, 93.492979228226200, 93.382246626734400, 93.032742902543800, 92.098988221716200, 91.870516018771000, 91.560716951395000, 90.677185061975400, 90.128810381813900,
            89.844508262142700, 89.630771944650100, 90.148744074034900, 90.571742734649100, 91.311748043186200, 91.531972705253200, 92.150375948198100, 92.117604037863700, 92.608719727160400, 92.959179856377400,
            93.052082340540600, 93.140783080346700, 93.239473569187800, 93.279316604717300, 93.379065607763500, 93.378523570342200, 93.357658485985100, 93.349508310455300, 93.460713897781000, 93.536910663181200,
            93.436056232968600, 93.462037964780300, 93.856016624380800, 94.123284836466600, 94.519260598679300, 94.990254049932400, 95.278761567015100, 95.551481803679700, 95.448475945680200, 95.374000333815500,
            95.365243147795700, 95.371648061183100, 95.457025311018100, 95.341250453141100, 95.047433054924700, 96.436074095215600, 98.334093730127000, 101.396026274533000, 104.158001416757000, 105.627189379137000,
            106.887450581239000, 108.398086695752000, 110.042523720645000, 111.478917214151000, 112.759486762607000, 113.688510767162000, 115.181849100394000, 116.605124893112000, 117.963131567974000, 119.453304317699000,
            122.826495561945000, 124.318231727682000, 124.672082362808000, 124.596360777566000, 123.534189834943000, 123.739528046925000, 123.829343402787000, 123.894623329997000, 123.903870954191000, 124.317621302027000,
            124.217123931813000, 124.193693486610000, 123.971014258884000, 123.714677592284000, 123.330796171383000, 122.654887999031000, 123.029280233982000, 122.809543405508000, 122.662425788638000, 122.598462629448000,
            121.374337559627000, 120.881337745229000, 120.536766469143000, 120.868451601894000, 121.278056388271000, 121.926552643747000, 123.564209104921000, 124.438009960311000, 124.859666449069000, 125.410122294076000,
            126.064080225327000, 126.550493201943000, 127.000832318791000, 128.548876711959000, 130.123039628140000, 131.941302593869000, 133.259336860262000, 134.705868172685000, 136.176479882920000, 137.988714279991000,
            139.361920464108000, 140.484300462344000, 141.133914732455000, 141.863658751303000, 142.325551671022000, 142.405020316894000, 142.316813260009000, 142.103796512633000, 142.013826204557000, 141.797849277668000,
            141.811239057705000, 141.479391534247000, 141.269582510996000, 141.419933784592000, 141.471851846443000, 141.680915019153000, 142.181822184161000, 142.423881757044000, 141.960784070685000, 140.812517700040000,
            139.419664463071000, 137.908866271666000, 136.072273807245000, 134.200794834298000, 131.881988787959000, 129.974542599605000, 130.025627027942000, 129.281889234763000, 129.243490654591000, 129.119940458382000,
            129.203848638683000, 128.880158967061000, 128.053027773344000, 127.808522004818000, 127.577756183923000, 127.619851218205000, 127.637556210211000, 127.881351276403000, 128.131835535866000, 128.962417421823000,
            130.529922688489000, 131.216919259199000, 133.097539920797000, 134.575503675127000, 135.331845369419000, 136.117360786929000, 136.533118857739000, 136.780368456331000, 136.711029478885000, 136.751586173495000,
            136.732250635542000, 136.516027159963000, 136.556019916378000, 136.423014905240000, 136.501325155986000, 136.476154006338000, 136.924103518185000, 137.178602045503000, 137.790107114473000, 137.852737855469000,
            137.305275609235000, 137.004730659597000, 136.053720386730000, 135.069124889995000, 134.219295632234000, 133.394886797968000, 133.302858807857000, 132.688170063716000, 132.437592764524000, 131.052144966319000,
            129.964836230848000, 128.995282053920000, 130.921158252208000, 130.708303831487000, 130.277550435142000, 129.079219240774000, 128.372354071420000, 126.931577717753000, 125.611653229828000, 123.689738169624000,
            120.954191071625000, 118.459759011144000, 116.399894359771000, 114.720229076652000, 112.232638531923000, 110.477247201353000, 109.610598596784000, 108.181014750778000, 106.323988296911000, 104.342236537387000,
            101.833127199470000, 98.193528337504900, 98.551100614717200, 100.826778705504000, 103.842135709508000, 105.576400607873000, 106.683624536840000, 107.770251644697000, 108.496282916742000, 109.055113868548000,
            109.621158667668000, 110.379504517963000, 112.182122617277000, 114.506445476320000, 116.808542261837000, 119.038962759334000, 120.093368582899000, 120.236299776544000, 120.374391762008000, 120.064035050783000,
            119.417379177110000, 118.384347045521000, 117.848026197355000, 117.836242034061000, 117.948542305338000, 117.949804989404000, 117.885969092469000, 117.873347355569000, 117.753588094093000, 117.388540649847000,
            116.965512684033000, 116.756640955784000,
        };

        /// <summary>
        /// Population Upper Band.
        /// </summary>
        private static readonly double[] PopulationUpperBandExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 98.073394813211400,
            98.253031865762200, 98.231092787336400, 98.536886828065300, 98.802324585265100, 98.917195488423800, 99.015261332989100, 98.866483847284200, 98.585546912427100, 98.483062173458100, 98.147851509686200,
            97.130980920423000, 95.642204503811200, 93.337245615954000, 93.228171070963600, 92.884313927182400, 91.966682234970300, 91.741032571243300, 91.433418645057000, 90.562845362500000, 90.020759669700900,
            89.737326099098200, 89.526311395950100, 90.036751362792700, 90.457192680203500, 91.188076120597200, 91.414593584766500, 92.026200705812800, 91.993942091712300, 92.478477834796900, 92.825444735523100,
            92.920780463132200, 93.009374837830800, 93.103623074279600, 93.135532086948000, 93.225437745392000, 93.222219122578400, 93.200413761156700, 93.194134779863300, 93.308538213139800, 93.389648516180900,
            93.297994425625100, 93.327116370122100, 93.714638825866200, 93.977747673925200, 94.366425396841400, 94.828974605311900, 95.112348187398800, 95.381606590353200, 95.279942870654100, 95.206327540495600,
            95.197595856995400, 95.199249241853400, 95.281318935850400, 95.170216351727200, 94.887953168089800, 96.257258385387000, 98.125222011860100, 101.133362722834000, 103.847001534895000, 105.295725721022000,
            106.541522266428000, 108.034284945329000, 109.655004525038000, 111.073385132981000, 112.337754088641000, 113.257339244590000, 114.732450864142000, 116.141964276414000, 117.491539033946000, 118.973174378971000,
            122.304157728225000, 123.801717974324000, 124.191394661521000, 124.161110111625000, 123.166346842778000, 123.390780857725000, 123.497711261030000, 123.570118169660000, 123.584949038708000, 124.008004685565000,
            123.927263620009000, 123.918865499417000, 123.709262551787000, 123.469228193688000, 123.103770811853000, 122.459378088303000, 122.839324585916000, 122.634399954761000, 122.499236622941000, 122.440058117804000,
            121.235926801299000, 120.750187654364000, 120.410694956416000, 120.735804714748000, 121.137886639916000, 121.775419185335000, 123.383712489104000, 124.249941207718000, 124.676550234792000, 125.218683061914000,
            125.865096529844000, 126.347498400307000, 126.802411952883000, 128.330882424845000, 129.888051116433000, 131.680847595091000, 132.978801785383000, 134.409203104722000, 135.864100575487000, 137.658465378517000,
            139.026652869964000, 140.148947284732000, 140.809180638695000, 141.540222487972000, 142.010752431866000, 142.105781359154000, 142.024238853798000, 141.823743550124000, 141.737228747425000, 141.529569042085000,
            141.542467861926000, 141.223694549766000, 141.023958275952000, 141.165590380564000, 141.209471237583000, 141.400580529771000, 141.874080533240000, 142.091894156219000, 141.626836599506000, 140.490072510262000,
            139.112711743268000, 137.616657671370000, 135.808920332609000, 133.965597296103000, 131.689198285991000, 129.820858348541000, 129.870965797332000, 129.139565140618000, 129.100961427915000, 128.976665546019000,
            129.060272204461000, 128.739397918204000, 127.925601324132000, 127.684210131227000, 127.457147843634000, 127.499367074421000, 127.523194452770000, 127.771894237429000, 128.019429049569000, 128.835766044023000,
            130.376000928270000, 131.060085720776000, 132.907571367173000, 134.365684715897000, 135.114282325529000, 135.887428256403000, 136.297014235011000, 136.545764087274000, 136.481257260660000, 136.531396353779000,
            136.515943358361000, 136.309233413663000, 136.347745100407000, 136.220715869616000, 136.295777232251000, 136.271635899113000, 136.702545948754000, 136.942687752712000, 137.528429017917000, 137.578092318931000,
            137.031831843612000, 136.724261575194000, 135.774061820538000, 134.787177230655000, 133.935913037651000, 133.102867582175000, 132.979138952760000, 132.350895824892000, 132.084507789793000, 130.704857079312000,
            129.619759050399000, 128.651725479192000, 130.489590526465000, 130.242802861799000, 129.786076981369000, 128.582639418796000, 127.859413750128000, 126.422125971651000, 125.110935166821000, 123.208413509081000,
            120.507708701785000, 118.045014249915000, 116.005896374881000, 114.339326009198000, 111.889009629556000, 110.157328257024000, 109.302419497324000, 107.893841183445000, 106.068643350262000, 104.120688260117000,
            101.659285636136000, 98.095068600962300, 98.452449143833300, 100.683166061182000, 103.639896916466000, 105.343618505438000, 106.437366223540000, 107.509215562974000, 108.224383520586000, 108.777053195084000,
            109.339665923237000, 110.092609735951000, 111.875297559860000, 114.173367477769000, 116.445887392096000, 118.651052638536000, 119.699485193239000, 119.856521684094000, 120.008626273449000, 119.725358939177000,
            119.110750187978000, 118.123422490740000, 117.615873929061000, 117.611047456177000, 117.723352784699000, 117.727039591745000, 117.670036092318000, 117.663747579245000, 117.554135768907000, 117.205851740350000,
            116.800283012571000, 116.599991708120000,
        };

        /// <summary>
        /// Unbiased sample BandWidth.
        /// </summary>
        private static readonly double[] SampleBandWidthExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 0.11447879536905100,
            0.12210390894408200, 0.13007743812376500, 0.14829712256679700, 0.16883885639136400, 0.18401013139272200, 0.20268148354586400, 0.20944458552429300, 0.20742609324914300, 0.21005436812610100, 0.21023013186731600,
            0.20055018960929000, 0.17878792703308500, 0.14083588695597700, 0.13940866697941500, 0.13449449276377200, 0.12029498488821400, 0.11788745011243500, 0.11619734498345900, 0.10481909117123900, 0.09939985632242420,
            0.09888877690830560, 0.09649751201593090, 0.10318939347943500, 0.10515075024388400, 0.11302532280087300, 0.10669557559165600, 0.11242032633375200, 0.11197166321208800, 0.11761778373430300, 0.12047970930689000,
            0.11803320584160200, 0.11801532854309000, 0.12211139370607000, 0.12964652938969800, 0.13898050623801500, 0.14157417984742200, 0.14252063423471900, 0.14071848739624500, 0.13744796694782000, 0.13260019067683300,
            0.12394497224976400, 0.12091969488969200, 0.12650636663470100, 0.13007643151024100, 0.13643284121411200, 0.14374746433385900, 0.14817993195572000, 0.15103090983886500, 0.14992203047960600, 0.14922481372398400,
            0.14921514684716400, 0.15375829773569400, 0.15678833479201800, 0.15250067342408000, 0.14193811885034700, 0.15803419552030000, 0.18314022823171500, 0.22793323133363100, 0.26737272541116500, 0.28293028975889700,
            0.29309471295383300, 0.30560030832102900, 0.32309155187243000, 0.33554187934908000, 0.34661991363723400, 0.35233831506647000, 0.36431718249666600, 0.37211413300062900, 0.37497905525764500, 0.37738717187215900,
            0.40370841873714600, 0.39259293591288000, 0.35924764141261900, 0.32008436671933400, 0.26654202303881600, 0.25050009520056500, 0.23655932165565400, 0.23075292672985500, 0.22631462923660300, 0.21818000846692000,
            0.20302695200054400, 0.19152933523516900, 0.18194483596622600, 0.17003319725812700, 0.15679737281606100, 0.13436270537364500, 0.12987464401657500, 0.11936999211352200, 0.11091145117797400, 0.10754389203340500,
            0.09432200641244870, 0.08953343826223870, 0.08617364857213430, 0.09061165663497070, 0.09565748701569070, 0.10294788651464700, 0.12244450875131800, 0.12695458886700700, 0.12296276089730700, 0.12830978992827900,
            0.13296471357638400, 0.13526966135215800, 0.13152125538714800, 0.14356199103646300, 0.15359727956869200, 0.16910612130810500, 0.18136089147588600, 0.19052631602997900, 0.19924143561497400, 0.20877361868312300,
            0.20997170120928800, 0.20817825310191600, 0.19990670541356900, 0.19790314898602400, 0.19142758533596100, 0.18099841970325200, 0.17673044554242300, 0.16880343569323600, 0.16666147234048500, 0.16151139311626600,
            0.16181436330549300, 0.15372681794546800, 0.14746000214329400, 0.15292001955611400, 0.15807171633547000, 0.16953460535646400, 0.18694161540839300, 0.20278599140909100, 0.20483931399194100, 0.19885566139446300,
            0.19046268903542500, 0.18264624921030400, 0.16552319033742700, 0.14872542004448200, 0.12254142318148700, 0.09797090673669520, 0.09858376787688330, 0.09090803462308930, 0.09107330700833770, 0.09166323847323820,
            0.09180260639717450, 0.09015753954412970, 0.08181608387778460, 0.07989523112177860, 0.07756830315513840, 0.07745878437435040, 0.07336776358560260, 0.06997254379751300, 0.07178018935449920, 0.08070179487535200,
            0.09769182551348610, 0.09908447660348570, 0.11947195224009500, 0.13123080672310500, 0.13559064647436000, 0.14296459343462200, 0.14660370742111100, 0.14532201633268700, 0.14219332994692400, 0.13581745686041600,
            0.13328315713130900, 0.12726280937075200, 0.12819275100429500, 0.12441481241638700, 0.12646212567792500, 0.12581334755470400, 0.13653476552475000, 0.14573741189494900, 0.16216808398968300, 0.17080669976960100,
            0.17073143739007900, 0.17592164823704500, 0.17670280358582400, 0.17969443235908100, 0.18193973920031900, 0.18927781913915200, 0.21216513396931800, 0.22317823979150200, 0.23536568007433700, 0.23378309334808500,
            0.23429166651649800, 0.23509719656441500, 0.29934329587551800, 0.32734417989898500, 0.35014860865702800, 0.35831126573227800, 0.37474814333729500, 0.37673991504197600, 0.37369250173290900, 0.36318584969738500,
            0.34132830831340400, 0.32092004332179000, 0.30861704708513100, 0.30183952319295500, 0.27510505175620700, 0.25826705575498000, 0.24981857658924300, 0.23423323645367000, 0.20957067102199400, 0.18306324319140000,
            0.14458898464148700, 0.08246706616838850, 0.08232213015091070, 0.11921136473131600, 0.16665037211430700, 0.19076809412185000, 0.20061520528145700, 0.21155645118964200, 0.21969113354901500, 0.22394660878929400,
            0.22571994371128000, 0.22878584373316100, 0.24219623577346100, 0.25957939609124500, 0.27950241519499100, 0.29541285124873200, 0.29761317389260100, 0.28504667588157300, 0.27273724404097500, 0.25073995886685900,
            0.22570424578170900, 0.19069013171824100, 0.16872595470819600, 0.16327405804090900, 0.16310196332746400, 0.16120281789438300, 0.15596424756248100, 0.15106181103365200, 0.14338076101974900, 0.13097597244069000,
            0.11817299319146800, 0.11190451217842900,
        };

        /// <summary>
        /// Population BandWidth.
        /// </summary>
        private static readonly double[] PopulationBandWidthExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 0.11158012753036100,
            0.11901216891752500, 0.12678380382919500, 0.14454215555855000, 0.16456376106593600, 0.17935089080461300, 0.19754947376223100, 0.20414133017390400, 0.20217394726465700, 0.20473567273539000, 0.20490698603927900,
            0.19547214539342000, 0.17426091561261900, 0.13726984265286700, 0.13587876069323200, 0.13108901614778800, 0.11724904784173200, 0.11490247320798300, 0.11325516249665900, 0.10216501250558500, 0.09688299574782280,
            0.09638485715349500, 0.09405414044050120, 0.10057657968096300, 0.10248827378295100, 0.11016345770957500, 0.10399398327928900, 0.10957378009513900, 0.10913647737744300, 0.11463963493504600, 0.11742909493366200,
            0.11504453831966000, 0.11502711368445700, 0.11901946416110600, 0.12636380594796200, 0.13546144122393700, 0.13798944155078200, 0.13891193117775500, 0.13715541571637900, 0.13396770669525100, 0.12924267886095500,
            0.12080661545915000, 0.11785793983268700, 0.12330315388974300, 0.12678282270369500, 0.13297828451919200, 0.14010769724498800, 0.14442793228001900, 0.14720672179088100, 0.14612591988409000, 0.14544635705101000,
            0.14543693494497800, 0.14986505068377100, 0.15281836548828600, 0.14863927013093800, 0.13834416541233800, 0.15403268031836900, 0.17850301408359000, 0.22216183301566700, 0.26060269679937000, 0.27576633481971800,
            0.28567338907118300, 0.29786233569152800, 0.31491069106457500, 0.32704576920861900, 0.33784330140375600, 0.34341690967493800, 0.35509246540752500, 0.36269199271540200, 0.36548437352070200, 0.36783151526070000,
            0.39348629326989900, 0.38265226075676100, 0.35015128797064800, 0.31197964954017600, 0.25979302828086700, 0.24415729112749800, 0.23056950585251700, 0.22491013212986600, 0.22058421483908600, 0.21265556726757500,
            0.19788619476027000, 0.18667970415351600, 0.17733788982628100, 0.16572786054653000, 0.15282717466444900, 0.13096056568890800, 0.12658614458348300, 0.11634747640719700, 0.10810311051160300, 0.10482081986899400,
            0.09193371986918910, 0.08726640097256920, 0.08399168305744340, 0.08831731824635040, 0.09323538534831700, 0.10034118780910000, 0.11934414454502600, 0.12374002688164900, 0.11984927425359600, 0.12506091348565700,
            0.12959797183454400, 0.13184455702914300, 0.12819106282296200, 0.13992692023637200, 0.14970810958781700, 0.16482425868384200, 0.17676873114066800, 0.18570208196182800, 0.19419652979036400, 0.20348735259259600,
            0.20465509899166000, 0.20290706200459600, 0.19484495458143700, 0.19289212933568600, 0.18658053061929800, 0.17641543735830200, 0.17225553071684600, 0.16452923723991600, 0.16244150961057800, 0.15742183330478400,
            0.15771713211748400, 0.14983436797963700, 0.14372623149757700, 0.14904799818176100, 0.15406925108528100, 0.16524189327378000, 0.18220814798719800, 0.19765133542726100, 0.19965266672112000, 0.19382052359127900,
            0.18564006603875900, 0.17802154289035700, 0.16133204955155700, 0.14495960830188900, 0.11943860504701600, 0.09549022797370260, 0.09608757112323650, 0.08860619177620250, 0.08876727937119150, 0.08934227343778350,
            0.08947811248707030, 0.08787469965706140, 0.07974445436544070, 0.07787223868749560, 0.07560422985289300, 0.07549748414956950, 0.07151005032074330, 0.06820079941774970, 0.06996267436697500, 0.07865837979070140,
            0.09521821324489110, 0.09657560162172100, 0.11644685484570400, 0.12790796848334700, 0.13215741462652800, 0.13934464907964900, 0.14289161864201100, 0.14164238069676700, 0.13859291441962300, 0.13237848204534400,
            0.12990835221857300, 0.12404044306793500, 0.12494683805341700, 0.12126455900705100, 0.12326003313901200, 0.12262768244476700, 0.13307762804864500, 0.14204725820847800, 0.15806189639391400, 0.16648177753698200,
            0.16640842084347300, 0.17146721261663000, 0.17222858867022000, 0.17514446771111400, 0.17733292211336900, 0.18448519771832600, 0.20679299279377800, 0.21752724054842300, 0.22940608795106600, 0.22786357321570600,
            0.22835926902388700, 0.22914440259544800, 0.29176375433959700, 0.31905564014455600, 0.34128264787010400, 0.34923862185207100, 0.36525930842076100, 0.36720064733949400, 0.36423039625878300, 0.35398977859451100,
            0.33268568251922900, 0.31279416633846700, 0.30080268892410000, 0.29419677576969300, 0.26813923626857700, 0.25172758784831000, 0.24349302895282600, 0.22830231844329300, 0.20426422311549900, 0.17842797834803200,
            0.14092790978253200, 0.08037895341630360, 0.08023768726075250, 0.11619286556001500, 0.16243069044840400, 0.18593773809568300, 0.19553551483199900, 0.20619972220630500, 0.21412842980802100, 0.21827615400866300,
            0.22000458708757000, 0.22299285678707300, 0.23606369011707900, 0.25300669898510700, 0.27242525597829900, 0.28793283079350300, 0.29007744002370500, 0.27782913284891100, 0.26583138278373600, 0.24439108131011400,
            0.21998928663845300, 0.18586174974422300, 0.16445371811723300, 0.15913986655671400, 0.15897212937873700, 0.15712107138202400, 0.15201514461343800, 0.14723684054994000, 0.13975027906617000, 0.12765958674907700,
            0.11518078617477500, 0.10907102664593200,
        };

        /// <summary>
        /// Unbiased sample %Band.
        /// </summary>
        private static readonly double[] SamplePercentBandExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 0.216382745781888000000,
            0.114974482289231000000, 0.104670826063206000000, -0.022129767139997600000, -0.037891452031514900000, 0.064366680856423900000, 0.021516885602777800000, 0.219533349143969000000, 0.484667650171922000000, 0.342119577782747000000, 0.351638471690030000000,
            0.317810732894019000000, 0.445849055140413000000, 0.375822684434906000000, 0.637448720402801000000, 0.610819820289802000000, 0.500119611771460000000, 0.505695411149647000000, 0.335080964625745000000, 0.281705325665736000000, 0.267242147598882000000,
            0.235826171188724000000, 0.499363716873834000000, 0.891618205000187000000, 0.874917710855154000000, 0.977811523772977000000, 0.915657950769241000000, 0.927573643529782000000, 0.680825428678512000000, 0.843622921495327000000, 0.767197186951035000000,
            0.612186050051103000000, 0.583240473313027000000, 0.165041917298509000000, 0.138927366230641000000, 0.119127279773760000000, 0.301110430567828000000, 0.379833984642402000000, 0.416622642966599000000, 0.623898414809933000000, 0.634028881312565000000,
            0.558825619818573000000, 0.534390296402356000000, 0.831108533272258000000, 0.771800362130530000000, 0.894859313289062000000, 0.883016476773554000000, 0.838429926642466000000, 0.714451319455194000000, 0.590707960023779000000, 0.570824520742626000000,
            0.509873896338612000000, 0.252300312067099000000, 0.129446176329507000000, 0.225267422849496000000, 0.277008029179284000000, 1.057626548079960000000, 1.093398518690930000000, 1.170818178489980000000, 1.074984668055080000000, 0.880556734310686000000,
            0.835951295732459000000, 0.867652772776983000000, 0.872014190308955000000, 0.828953998047960000000, 0.799033604516476000000, 0.733872477426493000000, 0.815282845088709000000, 0.800727783901004000000, 0.799646200682237000000, 0.823244248608595000000,
            1.004205353516470000000, 0.884964068541878000000, 0.844025056106732000000, 0.844488602832606000000, 0.807461263013206000000, 0.735011228915309000000, 0.670187184641253000000, 0.531064991807319000000, 0.471676102172974000000, 0.746782528656451000000,
            0.641099149449804000000, 0.622547625353024000000, 0.420991644650155000000, 0.486021816930671000000, 0.420547475845739000000, 0.569061417463662000000, 0.831426950099117000000, 0.552587497095990000000, 0.560706672633800000000, 0.412683301938428000000,
            0.353832663774517000000, 0.480524511802525000000, 0.531356594413289000000, 0.982967955091274000000, 0.901725574202140000000, 0.901441485506354000000, 1.083173016610340000000, 0.928104441056401000000, 0.867278164606273000000, 0.811515363205661000000,
            0.812683707431119000000, 0.751122827385219000000, 0.848090138221818000000, 1.040718585764010000000, 1.047247272626320000000, 1.015005265658590000000, 0.898038263085698000000, 0.919093180380567000000, 0.911790409663656000000, 0.976664585801571000000,
            0.941396805897482000000, 0.901682219089322000000, 0.848579315594739000000, 0.782612841808678000000, 0.755659504509320000000, 0.671052337514616000000, 0.391300709778930000000, 0.407620017344659000000, 0.169529711256848000000, 0.198334626236754000000,
            0.113909491536172000000, 0.245949640465059000000, 0.335628427654456000000, 0.201093101817606000000, 0.238500483272990000000, 0.122473731427336000000, 0.061537109951741100000, 0.087667409874974000000, 0.288380794996592000000, 0.320252320981672000000,
            0.289361488328031000000, 0.194182150122481000000, 0.386474792944973000000, 0.295883100679632000000, 0.441029595327211000000, 0.785441608089663000000, 0.875114988525714000000, 0.518591364397242000000, 0.440086949740283000000, 0.348765749804372000000,
            0.579933356638422000000, 0.381187063742269000000, 0.435370451063818000000, 0.504175559245869000000, 0.624442183479574000000, 0.534518259049816000000, 0.659302788787014000000, 0.926975133305080000000, 0.745250666727919000000, 0.989762183860115000000,
            1.120915940771400000000, 0.962308254300752000000, 1.110126710197300000000, 1.025613717287490000000, 0.828228193670808000000, 0.845424302122895000000, 0.753710101838263000000, 0.634101520717285000000, 0.375117492026793000000, 0.619277796850900000000,
            0.437403065732110000000, 0.306600373788020000000, 0.115191497658710000000, 0.285124626418301000000, 0.168414883509144000000, 0.196737242093210000000, 0.036348342443188000000, 0.131779282523164000000, 0.030436914896960200000, 0.171053173079037000000,
            0.291374895731579000000, 0.195848883255009000000, 0.108908161659781000000, 0.031482578638390500000, 0.107860066050537000000, -0.014268465814228200000, -0.104543242608985000000, 0.035741663175521800000, 0.119099668976155000000, 0.123185784358551000000,
            0.161862613165573000000, 0.189459580567713000000, -0.171109704025311000000, 0.000008263339466562320, 0.062146938855286000000, 0.143899144472743000000, 0.126947159686482000000, 0.204983743936408000000, 0.308181005936353000000, 0.291404054985413000000,
            0.258665349753513000000, 0.264648552071053000000, 0.201823109830976000000, 0.186669665403447000000, 0.326046282377343000000, 0.332901286717168000000, 0.481944933051642000000, 0.418904130514229000000, 0.481679784381663000000, 0.412425934572330000000,
            0.474692770965864000000, 0.428636240779448000000, 0.929275361545402000000, 1.274448409938370000000, 1.252146979654830000000, 1.026301442347280000000, 0.887738595677410000000, 0.865642447183746000000, 0.799489222339808000000, 0.727038578285905000000,
            0.721099659857208000000, 0.774524404016496000000, 0.987121128164541000000, 1.056769953791240000000, 0.993417988985819000000, 0.975229614743312000000, 0.783896072820707000000, 0.625426702671374000000, 0.630526055025999000000, 0.595753178855075000000,
            0.487303754418079000000, 0.553882410631350000000, 0.572012664389889000000, 0.514476471153189000000, 0.559874904927407000000, 0.434529123946968000000, 0.456730612412062000000, 0.509332136325035000000, 0.495778897023517000000, 0.418676826857180000000,
            0.370508258750670000000, 0.281787886245806000000,
        };

        /// <summary>
        /// Population %Band.
        /// </summary>
        private static readonly double[] PopulationPercentBandExpected =
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, 0.20901483689438600,
            0.10497215382837200, 0.09440082559314290, -0.03569383806489990, -0.05186498555598390, 0.05304964511168750, 0.00908668279016512, 0.21224728773988800, 0.48426934098979600, 0.33801810458703500, 0.34778428367170200,
            0.31307775596700300, 0.44444230282910700, 0.37259676241016700, 0.64101941165507900, 0.61369873659930300, 0.50012271908817200, 0.50584336854576200, 0.33079663985924800, 0.27603438975756600, 0.26119548215862100,
            0.22896337045218200, 0.49934718728675600, 0.90179180061263800, 0.88465745515070900, 0.99022427976789600, 0.92645605936131800, 0.93868130218373100, 0.68552297533067100, 0.85254967873446200, 0.77413852954981200,
            0.61510045875837300, 0.58540292363648700, 0.15634025829232100, 0.12954729422226600, 0.10923283414809300, 0.29594360730705500, 0.37671226958677200, 0.41445663662965600, 0.62711709145265800, 0.63751073078088200,
            0.56035381248184700, 0.53528369963060900, 0.83971018732800300, 0.77886128763482900, 0.90511710755378700, 0.89296661366159200, 0.84722177843293600, 0.72002241133712700, 0.59306440334620300, 0.57266442507874000,
            0.51013040389414900, 0.24586548236259600, 0.11981979863169500, 0.21813032323101900, 0.27121506524914100, 1.07211276687801000, 1.10881403433629000, 1.18824492931591000, 1.08992182220539000, 0.89044297114298500,
            0.84467875677646100, 0.87720378595326600, 0.88167850592547400, 0.83749968082906900, 0.80680200477989700, 0.73994809898810600, 0.82347337384483200, 0.80854019615297200, 0.80743051518453900, 0.83164160150845100,
            1.01730377771334000, 0.89496480065459200, 0.85296226014038700, 0.85343784904631400, 0.81544859995630900, 0.74111643336403500, 0.67460836724424400, 0.53187200910201200, 0.47094029398279900, 0.75319353207435300,
            0.64476467283312700, 0.62573121071164500, 0.41893913777720800, 0.48565868676938600, 0.41848343019920500, 0.57085551928203300, 0.84003687609930100, 0.55395363361082600, 0.56228373194940000, 0.41041495801327100,
            0.35003547725070300, 0.48001857071310000, 0.53217118706314800, 0.99551466667448200, 0.91216174261037400, 0.91187027375842500, 1.09832289056240000, 0.93922588895538300, 0.87681944607960400, 0.81960801899095200,
            0.82080671487405600, 0.75764658461165100, 0.85713294638991400, 1.05476556356397000, 1.06146385495225000, 1.02838425377557000, 0.90837864122750200, 0.92998053057698000, 0.92248804591118800, 0.98904754623804800,
            0.95286356753035000, 0.91211726120317000, 0.85763483178486100, 0.78995465771697000, 0.76230111713138000, 0.67549599536355900, 0.38847688134616100, 0.40522013762961800, 0.16094463774219600, 0.19049785694523200,
            0.10387949637056300, 0.23934983077770000, 0.33135832507527300, 0.19332799317594200, 0.23170715675735800, 0.11266622110096000, 0.05014656661779290, 0.07695568867252240, 0.28288327678103300, 0.31558277248964500,
            0.28388944690912300, 0.18623750634443800, 0.38352559514555700, 0.29058048000255700, 0.43949764139201700, 0.79285691068437000, 0.88485985777005300, 0.51907433740729800, 0.43853050742614100, 0.34483693320545500,
            0.58200989352052300, 0.37810049945189400, 0.43369148188645000, 0.50428403339411000, 0.62767498633625200, 0.53541498653677900, 0.66344121272227000, 0.93806724364968500, 0.75162187489729600, 1.00248539831043000,
            1.13704631369604000, 0.97431826090285000, 1.12597679669136000, 1.03926829549597000, 0.83675502125026300, 0.85439785626221100, 0.76030107219137700, 0.63758525723763300, 0.37187325026538800, 0.62237643745343500,
            0.43577690053424700, 0.30157617020514800, 0.10519480689952800, 0.27954251830896700, 0.15980084860674700, 0.18885897539399300, 0.02430343643831230, 0.12221351507950200, 0.01823843974596210, 0.16250767659199000,
            0.28595515931909100, 0.18794753845711500, 0.09874824018574830, 0.01931126810823040, 0.09767291677974840, -0.02762831308544260, -0.12024827981618200, 0.02368099664302740, 0.10920450606746600, 0.11339677199392700,
            0.15307836107723500, 0.18139225221503000, -0.18854402820424500, -0.01298069803516830, 0.05077223787130620, 0.13464823107003200, 0.11725586165445100, 0.19731970776554400, 0.30319786457194700, 0.28598507608228800,
            0.25239587323906200, 0.25853450929300400, 0.19407696559450900, 0.17852985965233900, 0.32152725145442000, 0.32856033751053100, 0.48147589216553600, 0.41679739346407600, 0.48120385537005400, 0.41015090466712200,
            0.47403533085971600, 0.42678232791629600, 0.94042722802911000, 1.29456730340353000, 1.27168651871209000, 1.03997388651950000, 0.89781140543292200, 0.87514123541396300, 0.80726945880346000, 0.73293666640952900,
            0.72684346466688700, 0.78165609564000300, 0.99977573234011700, 1.07123391968126000, 1.00623617522884000, 0.98757529699640600, 0.79127122495603500, 0.62868508171425100, 0.63391690683975100, 0.59824068864864500,
            0.48697392688019200, 0.55528218686592800, 0.57388343473999900, 0.51485254601775700, 0.56143035628867700, 0.43282829847753900, 0.45560654502679400, 0.50957456984819400, 0.49566923972420600, 0.41656418483259400,
            0.36714427670437500, 0.27611909512545400,
        };

        [TestMethod]
        public void BollingerBands_Metadata_ValuesAreCorrect()
        {
            var parameters = new BollingerBands.Parameters();
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });
            var metadata = target.Metadata;

            Assert.AreEqual(IndicatorType.BollingerBands, metadata.IndicatorType);
            Assert.IsNotNull(metadata.Outputs);
            Assert.AreEqual(7, metadata.Outputs.Length);

            Assert.AreEqual((int)BollingerBands.OutputKind.MiddleMovingAverageValue, metadata.Outputs[0].Kind);
            Assert.AreEqual(IndicatorOutputType.Scalar, metadata.Outputs[0].Type);

            Assert.AreEqual((int)BollingerBands.OutputKind.StandardDeviationValue, metadata.Outputs[1].Kind);
            Assert.AreEqual(IndicatorOutputType.Scalar, metadata.Outputs[1].Type);

            Assert.AreEqual((int)BollingerBands.OutputKind.LowerBandValue, metadata.Outputs[2].Kind);
            Assert.AreEqual(IndicatorOutputType.Scalar, metadata.Outputs[2].Type);

            Assert.AreEqual((int)BollingerBands.OutputKind.UpperBandValue, metadata.Outputs[3].Kind);
            Assert.AreEqual(IndicatorOutputType.Scalar, metadata.Outputs[3].Type);

            Assert.AreEqual((int)BollingerBands.OutputKind.PercentBandValue, metadata.Outputs[4].Kind);
            Assert.AreEqual(IndicatorOutputType.Scalar, metadata.Outputs[4].Type);

            Assert.AreEqual((int)BollingerBands.OutputKind.BandWidthValue, metadata.Outputs[5].Kind);
            Assert.AreEqual(IndicatorOutputType.Scalar, metadata.Outputs[5].Type);

            Assert.AreEqual((int)BollingerBands.OutputKind.LowerUpperBand, metadata.Outputs[6].Kind);
            Assert.AreEqual(IndicatorOutputType.Band, metadata.Outputs[6].Type);
        }

        [TestMethod]
        public void BollingerBands_Metadata_SampleStDev_NameAndDescriptionAreCorrect()
        {
            var parameters = new BollingerBands.Parameters { StandardDeviationIsUnbiased = true };
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });
            var metadata = target.Metadata;

            Assert.AreEqual(IndicatorType.BollingerBands, metadata.IndicatorType);
            Assert.IsNotNull(metadata.Outputs);
            Assert.AreEqual(7, metadata.Outputs.Length);

            Assert.AreEqual("ma-bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[0].Name);
            Assert.AreEqual("Moving Average used by Bollinger Bands bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[0].Description);

            Assert.AreEqual("stdev-bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[1].Name);
            Assert.AreEqual("Standard Deviation of Bollinger Bands bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[1].Description);

            Assert.AreEqual("lo-bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[2].Name);
            Assert.AreEqual("Lower Band of Bollinger Bands bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[2].Description);

            Assert.AreEqual("up-bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[3].Name);
            Assert.AreEqual("Upper Band of Bollinger Bands bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[3].Description);

            Assert.AreEqual("%b(c)-bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[4].Name);
            Assert.AreEqual("%B(c) of Bollinger Bands bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[4].Description);

            Assert.AreEqual("bw-bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[5].Name);
            Assert.AreEqual("Band Width of Bollinger Bands bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[5].Description);

            Assert.AreEqual("bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[6].Name);
            Assert.AreEqual("Bollinger Bands bb(stdev.s(20,c),2,sma(20,c))", metadata.Outputs[6].Description);
        }

        [TestMethod]
        public void BollingerBands_Metadata_PopulationStDev_NameAndDescriptionAreCorrect()
        {
            var parameters = new BollingerBands.Parameters();
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });
            var metadata = target.Metadata;

            Assert.AreEqual("ma-bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[0].Name);
            Assert.AreEqual("Moving Average used by Bollinger Bands bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[0].Description);

            Assert.AreEqual("stdev-bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[1].Name);
            Assert.AreEqual("Standard Deviation of Bollinger Bands bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[1].Description);

            Assert.AreEqual("lo-bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[2].Name);
            Assert.AreEqual("Lower Band of Bollinger Bands bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[2].Description);

            Assert.AreEqual("up-bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[3].Name);
            Assert.AreEqual("Upper Band of Bollinger Bands bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[3].Description);

            Assert.AreEqual("%b(c)-bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[4].Name);
            Assert.AreEqual("%B(c) of Bollinger Bands bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[4].Description);

            Assert.AreEqual("bw-bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[5].Name);
            Assert.AreEqual("Band Width of Bollinger Bands bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[5].Description);

            Assert.AreEqual("bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[6].Name);
            Assert.AreEqual("Bollinger Bands bb(stdev.p(20,c),2,sma(20,c))", metadata.Outputs[6].Description);
        }

        [TestMethod]
        public void BollingerBands_Update_PopulationStDev_Single_AllOutputsRequested_ReturnsCorrectValues()
        {
            IndicatorOutput output;
            var scalar = new Scalar(DateTime.Now, 1d);
            int count = ClosingPrice.Length;

            var parameters = new BollingerBands.Parameters();
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });

            for (int i = 0; i < 19; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[1];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[2];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[3];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[4];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[5];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                var band = (Band)output.Outputs[6];
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
            }

            for (int i = 19; i < count; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.AreEqual(Math.Round(Sma20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[1];
                Assert.AreEqual(Math.Round(PopulationStDev20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[2];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[3];
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[4];
                Assert.AreEqual(Math.Round(PopulationPercentBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[5];
                Assert.AreEqual(Math.Round(PopulationBandWidthExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                var band = (Band)output.Outputs[6];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(band.FirstValue, Decimals));
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(band.SecondValue, Decimals));
            }
        }

        [TestMethod]
        public void BollingerBands_Update_SampleStDev_Single_AllOutputsRequested_ReturnsCorrectValues()
        {
            IndicatorOutput output;
            var scalar = new Scalar(DateTime.Now, 1d);
            int count = ClosingPrice.Length;

            var parameters = new BollingerBands.Parameters { StandardDeviationIsUnbiased = true };
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });

            for (int i = 0; i < 19; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[1];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[2];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[3];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[4];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[5];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                var band = (Band)output.Outputs[6];
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
            }

            for (int i = 19; i < count; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.AreEqual(Math.Round(Sma20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[1];
                Assert.AreEqual(Math.Round(SampleStDev20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[2];
                Assert.AreEqual(Math.Round(SampleLowerBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[3];
                Assert.AreEqual(Math.Round(SampleUpperBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[4];
                Assert.AreEqual(Math.Round(SamplePercentBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[5];
                Assert.AreEqual(Math.Round(SampleBandWidthExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                var band = (Band)output.Outputs[6];
                Assert.AreEqual(Math.Round(SampleLowerBandExpected[i], Decimals), Math.Round(band.FirstValue, Decimals));
                Assert.AreEqual(Math.Round(SampleUpperBandExpected[i], Decimals), Math.Round(band.SecondValue, Decimals));
            }
        }

        [TestMethod]
        public void BollingerBands_Update_PopulationStDev_Collection_AllOutputsRequested_ReturnsCorrectValues()
        {
            int count = ClosingPrice.Length;
            var scalarArray = new Scalar[count];
            for (int i = 0; i < count; ++i)
            {
                scalarArray[i] = new Scalar { Time = DateTime.UtcNow, Value = ClosingPrice[i] };
            }

            var parameters = new BollingerBands.Parameters();
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });

            var outputs = target.Update(scalarArray).ToList();
            Assert.AreEqual(count, outputs.Count);

            for (int i = 0; i < 19; ++i)
            {
                var output = outputs[i];
                var scalar = (Scalar)output.Outputs[0];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[1];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[2];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[3];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[4];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[5];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                var band = (Band)output.Outputs[6];
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
            }

            for (int i = 19; i < count; ++i)
            {
                var output = outputs[i];
                var scalar = (Scalar)output.Outputs[0];
                Assert.AreEqual(Math.Round(Sma20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[1];
                Assert.AreEqual(Math.Round(PopulationStDev20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[2];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[3];
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[4];
                Assert.AreEqual(Math.Round(PopulationPercentBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[5];
                Assert.AreEqual(Math.Round(PopulationBandWidthExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                var band = (Band)output.Outputs[6];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(band.FirstValue, Decimals));
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(band.SecondValue, Decimals));
            }
        }

        [TestMethod]
        public void BollingerBands_Update_SampleStDev_Collection_AllOutputsRequested_ReturnsCorrectValues()
        {
            int count = ClosingPrice.Length;
            var scalarArray = new Scalar[count];
            for (int i = 0; i < count; ++i)
            {
                scalarArray[i] = new Scalar { Time = DateTime.UtcNow, Value = ClosingPrice[i] };
            }

            var parameters = new BollingerBands.Parameters { StandardDeviationIsUnbiased = true };
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });

            var outputs = target.Update(scalarArray).ToList();
            Assert.AreEqual(count, outputs.Count);

            for (int i = 0; i < 19; ++i)
            {
                var output = outputs[i];
                var scalar = (Scalar)output.Outputs[0];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[1];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[2];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[3];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[4];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[5];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                var band = (Band)output.Outputs[6];
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
            }

            for (int i = 19; i < count; ++i)
            {
                var output = outputs[i];
                var scalar = (Scalar)output.Outputs[0];
                Assert.AreEqual(Math.Round(Sma20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[1];
                Assert.AreEqual(Math.Round(SampleStDev20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[2];
                Assert.AreEqual(Math.Round(SampleLowerBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[3];
                Assert.AreEqual(Math.Round(SampleUpperBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[4];
                Assert.AreEqual(Math.Round(SamplePercentBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[5];
                Assert.AreEqual(Math.Round(SampleBandWidthExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                var band = (Band)output.Outputs[6];
                Assert.AreEqual(Math.Round(SampleLowerBandExpected[i], Decimals), Math.Round(band.FirstValue, Decimals));
                Assert.AreEqual(Math.Round(SampleUpperBandExpected[i], Decimals), Math.Round(band.SecondValue, Decimals));
            }
        }

        [TestMethod]
        public void BollingerBands_Reset_FunctionsCorrectly()
        {
            IndicatorOutput output;
            var scalar = new Scalar(DateTime.Now, 1d);
            int count = ClosingPrice.Length;

            var parameters = new BollingerBands.Parameters();
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });

            for (int i = 0; i < 19; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[1];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[2];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[3];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[4];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[5];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                var band = (Band)output.Outputs[6];
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
            }

            for (int i = 19; i < count; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.AreEqual(Math.Round(Sma20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[1];
                Assert.AreEqual(Math.Round(PopulationStDev20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[2];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[3];
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[4];
                Assert.AreEqual(Math.Round(PopulationPercentBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[5];
                Assert.AreEqual(Math.Round(PopulationBandWidthExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                var band = (Band)output.Outputs[6];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(band.FirstValue, Decimals));
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(band.SecondValue, Decimals));
            }

            target.Reset();

            for (int i = 0; i < 19; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[1];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[2];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[3];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[4];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                scalar = (Scalar)output.Outputs[5];
                Assert.IsTrue(double.IsNaN(scalar.Value));
                var band = (Band)output.Outputs[6];
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
            }

            for (int i = 19; i < count; ++i)
            {
                scalar.Value = ClosingPrice[i];
                output = target.Update(scalar);
                scalar = (Scalar)output.Outputs[0];
                Assert.AreEqual(Math.Round(Sma20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[1];
                Assert.AreEqual(Math.Round(PopulationStDev20Expected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[2];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[3];
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[4];
                Assert.AreEqual(Math.Round(PopulationPercentBandExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                scalar = (Scalar)output.Outputs[5];
                Assert.AreEqual(Math.Round(PopulationBandWidthExpected[i], Decimals), Math.Round(scalar.Value, Decimals));
                var band = (Band)output.Outputs[6];
                Assert.AreEqual(Math.Round(PopulationLowerBandExpected[i], Decimals), Math.Round(band.FirstValue, Decimals));
                Assert.AreEqual(Math.Round(PopulationUpperBandExpected[i], Decimals), Math.Round(band.SecondValue, Decimals));
            }
        }

        [TestMethod]
        public void BollingerBands_IsPrimed_FunctionsCorrectly()
        {
            var scalar = new Scalar(DateTime.Now, 1d);
            int count = ClosingPrice.Length;

            var parameters = new BollingerBands.Parameters();
            var target = new BollingerBands(parameters, new[] { Middle, StDev, Lower, Upper, PercentB, BandWidth, LowerUpper });

            for (int i = 0; i < 19; ++i)
            {
                scalar.Value = ClosingPrice[i];
                target.Update(scalar);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 19; i < count; ++i)
            {
                scalar.Value = ClosingPrice[i];
                target.Update(scalar);
                Assert.IsTrue(target.IsPrimed);
            }

            target.Reset();

            for (int i = 0; i < 19; ++i)
            {
                scalar.Value = ClosingPrice[i];
                target.Update(scalar);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 19; i < count; ++i)
            {
                scalar.Value = ClosingPrice[i];
                target.Update(scalar);
                Assert.IsTrue(target.IsPrimed);
            }
        }

        [TestMethod]
        public void BollingerBands_Constructor_CreatesInstance()
        {
            var parameters = new BollingerBands.Parameters();
            var target = new BollingerBands(parameters, new[] { Middle, Lower, Upper });

            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void BollingerBands_Constructor_StandardDeviation_LengthIsNegative_ThrowsException()
        {
            var parameters = new BollingerBands.Parameters { StandardDeviationLength = -1 };
            var target = new BollingerBands(parameters, new[] { Middle, Lower, Upper });

            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void BollingerBands_Constructor_StandardDeviation_LengthIsZero_ThrowsException()
        {
            var parameters = new BollingerBands.Parameters { StandardDeviationLength = 0 };
            var target = new BollingerBands(parameters, new[] { Middle, Lower, Upper });

            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void BollingerBands_Constructor_StandardDeviation_LengthIsOne_ThrowsException()
        {
            var parameters = new BollingerBands.Parameters { StandardDeviationLength = 1 };
            var target = new BollingerBands(parameters, new[] { Middle, Lower, Upper });

            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void BollingerBands_Constructor_MovingAverageParameters_Invalid_ThrowsException()
        {
            var parameters = new BollingerBands.Parameters
            {
                MovingAverageParameters = new IndicatorInput
                {
                    IndicatorType = IndicatorType.SimpleMovingAverage,
                    Parameters = new SimpleMovingAverage.Parameters { Length = -1 },
                    OutputKinds = new[] { (int)SimpleMovingAverage.OutputKind.Value },
                },
            };
            var target = new BollingerBands(parameters, new[] { Middle, Lower, Upper });

            Assert.IsNotNull(target);
        }

        [TestMethod]

        // [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void BollingerBands_Constructor_MovingAverageParameters_NoOutputs_ThrowsException()
        {
            var parameters = new BollingerBands.Parameters
            {
                MovingAverageParameters = new IndicatorInput
                {
                    // TODO: use another moving average which allows to specify empty outputs
                    IndicatorType = IndicatorType.SimpleMovingAverage,
                    Parameters = new SimpleMovingAverage.Parameters { Length = 20 },
                    OutputKinds = Array.Empty<int>(),
                },
            };
            var target = new BollingerBands(parameters, new[] { Middle, Lower, Upper });

            Assert.IsNotNull(target);
        }

        [TestMethod]

        // [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void BollingerBands_Constructor_MovingAverageParameters_FirstOutputIsNotScalar_ThrowsException()
        {
            var parameters = new BollingerBands.Parameters
            {
                MovingAverageParameters = new IndicatorInput
                {
                    // TODO: use another indicator which has a non-scalar output
                    IndicatorType = IndicatorType.SimpleMovingAverage,
                    Parameters = new SimpleMovingAverage.Parameters { Length = 20 },
                    OutputKinds = Array.Empty<int>(),
                },
            };
            var target = new BollingerBands(parameters, new[] { Middle, Lower, Upper });

            Assert.IsNotNull(target);
        }
    }
}
