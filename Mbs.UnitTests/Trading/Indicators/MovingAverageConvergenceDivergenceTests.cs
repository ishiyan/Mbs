using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Mbs.Trading.Data;
using Mbs.Trading.Indicators;
using Mbs.Trading.Indicators.Abstractions;

namespace Mbs.UnitTests.Trading.Indicators
{
    [TestClass]
    public class MovingAverageConvergenceDivergenceTests
    {
        #region Test data
        /// <summary>
        /// Input Close test data, length = 252.
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_data.c, TA_SREF_close_daily_ref_0_PRIV[252].
        /// The same data in TA-Lib (http://ta-lib.org/) tests, test_MACD.xsl, INPUT, A4…A255, 252 entries.
        /// </summary>
        private readonly List<double> input = new List<double>
        {
            91.500000,94.815000,94.375000,95.095000,93.780000,94.625000,92.530000,92.750000,90.315000,92.470000,96.125000,
            97.250000,98.500000,89.875000,91.000000,92.815000,89.155000,89.345000,91.625000,89.875000,88.375000,87.625000,
            84.780000,83.000000,83.500000,81.375000,84.440000,89.250000,86.375000,86.250000,85.250000,87.125000,85.815000,
            88.970000,88.470000,86.875000,86.815000,84.875000,84.190000,83.875000,83.375000,85.500000,89.190000,89.440000,
            91.095000,90.750000,91.440000,89.000000,91.000000,90.500000,89.030000,88.815000,84.280000,83.500000,82.690000,
            84.750000,85.655000,86.190000,88.940000,89.280000,88.625000,88.500000,91.970000,91.500000,93.250000,93.500000,
            93.155000,91.720000,90.000000,89.690000,88.875000,85.190000,83.375000,84.875000,85.940000,97.250000,99.875000,
            104.940000,106.000000,102.500000,102.405000,104.595000,106.125000,106.000000,106.065000,104.625000,108.625000,
            109.315000,110.500000,112.750000,123.000000,119.625000,118.750000,119.250000,117.940000,116.440000,115.190000,
            111.875000,110.595000,118.125000,116.000000,116.000000,112.000000,113.750000,112.940000,116.000000,120.500000,
            116.620000,117.000000,115.250000,114.310000,115.500000,115.870000,120.690000,120.190000,120.750000,124.750000,
            123.370000,122.940000,122.560000,123.120000,122.560000,124.620000,129.250000,131.000000,132.250000,131.000000,
            132.810000,134.000000,137.380000,137.810000,137.880000,137.250000,136.310000,136.250000,134.630000,128.250000,
            129.000000,123.870000,124.810000,123.000000,126.250000,128.380000,125.370000,125.690000,122.250000,119.370000,
            118.500000,123.190000,123.500000,122.190000,119.310000,123.310000,121.120000,123.370000,127.370000,128.500000,
            123.870000,122.940000,121.750000,124.440000,122.000000,122.370000,122.940000,124.000000,123.190000,124.560000,
            127.250000,125.870000,128.860000,132.000000,130.750000,134.750000,135.000000,132.380000,133.310000,131.940000,
            130.000000,125.370000,130.130000,127.120000,125.190000,122.000000,125.000000,123.000000,123.500000,120.060000,
            121.000000,117.750000,119.870000,122.000000,119.190000,116.370000,113.500000,114.250000,110.000000,105.060000,
            107.000000,107.870000,107.000000,107.120000,107.000000,91.000000,93.940000,93.870000,95.500000,93.000000,
            94.940000,98.250000,96.750000,94.810000,94.370000,91.560000,90.250000,93.940000,93.620000,97.000000,95.000000,
            95.870000,94.060000,94.620000,93.750000,98.000000,103.940000,107.870000,106.060000,104.500000,105.000000,
            104.190000,103.060000,103.420000,105.270000,111.870000,116.000000,116.620000,118.280000,113.370000,109.000000,
            109.700000,109.250000,107.000000,109.190000,110.000000,109.200000,110.120000,108.000000,108.620000,109.750000,
            109.810000,109.000000,108.750000,107.870000
        };

        /// <summary>
        /// Output data, MACD.
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MACD.xsl, Classic, N37…N255, 252 entries.
        /// </summary>
        private readonly List<double> expected = new List<double>
        {
            // Begins with 33 double.NaN values.
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,-2.1834929152886500,-1.8948492804471900,-1.7743467257372600,-1.6645017415544000,-1.7142300104532600,-1.7882993947990400,-1.8510796885765000,
            -1.9190576430907500,-1.7809314519769400,-1.3580584366943200,-0.9913282003709580,-0.5606839616518470,-0.2444164360268670, 0.0611996189331734, 0.1053010908371020, 0.2981976732024380, 0.4060431702327920,
             0.3686452756527810, 0.3179928479829500,-0.0870823343564666,-0.4656787611539670,-0.8216083974066490,-0.9267771050415800,-0.9264189460086380,-0.8729027935354310,-0.6016533544919300,-0.3551570321131980,
            -0.2102364714790070,-0.1042703744410720, 0.2567488796421170, 0.4991799319335970, 0.8230312699746920, 1.0873246969872200, 1.2544796646239600, 1.2566725348279800, 1.1068615637932200, 0.9521451441643340,
             0.7550636741512310, 0.2980902868287100,-0.2081206609234560,-0.4826948147358650,-0.6073589544494380, 0.2041134028057170, 1.0469579744124100, 2.0994207245383100, 2.9846331843288100, 3.3649605168219100,
             3.6170122956490000, 3.9479701019021600, 4.2843276982326600, 4.4890599723009200, 4.6034905577127900, 4.5258109245430400, 4.7324629393012900, 4.8954813219261300, 5.0619432305703400, 5.3141633216098800,
             6.2688752069359000, 6.6761979067561600, 6.8494427808973300, 6.9470056562968700, 6.8397742264099300, 6.5581567331775800, 6.1630643184436600, 5.5188401836128900, 4.8491051471088600, 4.8698072678295300,
             4.6610148294445400, 4.4443140320837100, 3.9047984326462300, 3.5772030378431100, 3.2151587480361900, 3.1389683927967300, 3.4024777339305200, 3.2606405768823000, 3.1426696922788900, 2.8748273218086500,
             2.5572319908498300, 2.3741902701174100, 2.2332408846989300, 2.4818618404571100, 2.6084809728550500, 2.7226300825929900, 3.1001243414179200, 3.2504674291990800, 3.2969132395210900, 3.2654173559896400,
             3.2482007252343700, 3.1530230148108800, 3.2068521816892300, 3.5818254357199600, 3.9743905158213100, 4.3363786496235400, 4.4708550661395600, 4.6696516310323100, 4.8671172971900600, 5.2359907701377000,
             5.4996267871748900, 5.6490894582191100, 5.6515563434165000, 5.5140981327487300, 5.3387779035047900, 5.0113472064788600, 4.1887579457721800, 3.5563731068051500, 2.6111556619528600, 1.9158296790975800,
             1.2048383286657200, 0.8933227312770670, 0.8089920184366410, 0.4935877047475830, 0.2663781973872120,-0.1890865527941370,-0.7735209120211690,-1.2919977357799900,-1.3093570964368700,-1.2833069420063600,
            -1.3527741208200000,-1.6215273336133700,-1.4945217045071600,-1.5526851380620500,-1.4010731827211300,-0.9472339221808710,-0.4907247132426990,-0.4968132280262690,-0.5701097768963020,-0.7159676453625820,
            -0.6074976831027070,-0.7102349185617380,-0.7531175398637090,-0.7326624136488530,-0.6237284838378090,-0.5958887555375440,-0.4579984982591300,-0.1301585702118330, 0.0180938927336314, 0.3725584276027550,
             0.8965114571714140, 1.1970842130195400, 1.7380220221538800, 2.1619701971491500, 2.2604826396992900, 2.3860923010739200, 2.3480247445887700, 2.1366837844413200, 1.5774088580073700, 1.5009694272342500,
             1.1838619595090200, 0.7679645194450020, 0.1788942798570190,-0.0453504295621485,-0.3800680744966770,-0.5980939436106640,-1.0365120012514100,-1.2932040748873000,-1.7388379892756900,-1.8990487428360900,
            -1.8330138774736000,-1.9845476567198100,-2.3056120403831700,-2.7598292977788400,-3.0244174134275400,-3.5362808383554200,-4.2910880135740700,-4.6788020338898200,-4.8598451890216700,-5.0157069750762800,
            -5.0710892065996800,-5.0662623030171500,-6.2810986343639700,-6.9267840947141800,-7.3593093517439600,-7.4842871531006900,-7.6963434116781900,-7.6200189030231900,-7.2093370925040400,-6.9250782712425700,
            -6.7782079324053200,-6.6209937588729400,-6.6465268849216700,-6.6952889992342500,-6.3628343708553800,-6.0553803529419700,-5.4758607622355600,-5.1189623847620300,-4.7116036857755100,-4.4831419850222400,
            -4.2083854732067500,-4.0145633004372700,-3.4779269736185800,-2.5440047577507600,-1.4698035372531600,-0.7558304609401740,-0.3122808374933610, 0.0786743471158928, 0.3194663083098280, 0.4143378869283370,
             0.5126636207527750, 0.7314354792106310, 1.4209982118575700, 2.2745188917164500, 2.9667699213299400, 3.6077441477071100, 3.6771371268036700, 3.3409961602633300, 3.0954042786688900, 2.8318162884889800,
             2.4135428911857700, 2.2330319059346800, 2.1307736479068100, 1.9625567944900100, 1.8817879572604300, 1.6279458431089500, 1.4599732939235000, 1.4018754471950200, 1.3451677274254800, 1.2207936708832200,
             1.0894944109611400, 0.9040092995012690
        };

        /// <summary>
        /// Output data, MACD, Metastock.
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MACD.xsl, Classic, N37…N255, 252 entries.
        /// </summary>
        private readonly List<double> expectedM = new List<double>
        {
            // Begins with 33 double.NaN values.
                      double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                      double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                      double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                      double.NaN,          double.NaN,          double.NaN,-1.21846552993858000,-1.00944831763985000,-0.95337724089652900,-0.90306586284701500,-0.99884905089852800,-1.11429653068144000,-1.21615627569059000,
            -1.32006174210252000,-1.22753172047024000,-0.86422025910656000,-0.55009414469444100,-0.17279892811009700, 0.09991842387057660, 0.36496835959683000, 0.38625797751613800, 0.54865153735815400, 0.63266114398865600,
             0.58134625933200800, 0.51833478585324100, 0.12283574848970600,-0.24800727180787900,-0.59754251470903300,-0.71114224614957800,-0.72458468472552800,-0.68687722435271300,-0.44325236486062600,-0.22121572998028700,
            -0.09327574884332530,-0.00100858649990698, 0.33179781649072000, 0.55448412540658900, 0.85458328938085500, 1.09967219505009000, 1.25412703493819000, 1.25383322365717000, 1.11049659077133000, 0.96205507651868100,
             0.77339481632667200, 0.33998499506702700,-0.14073330809287700,-0.40461482423629000,-0.52766474953138200, 0.22977347513756300, 1.01959932768824000, 2.00900441181970000, 2.84382285958510000, 3.20570585697031000,
             3.44704717277351000, 3.76227250163008000, 4.08254285080021000, 4.27905180576371000, 4.39029263878894000, 4.32036495156864000, 4.51678020178653000, 4.67214791500027000, 4.83061911547080000, 5.06962263179170000,
             5.96925589189136000, 6.35631341386093000, 6.52350386460358000, 6.61906793802321000, 6.52149067644662000, 6.25890378442197000, 5.88828217299286000, 5.28201275656055000, 4.64991078437934000, 4.66535911242761000,
             4.46564507034073000, 4.25838139770860000, 3.74751354437736000, 3.43493416732142000, 3.08977562272882000, 3.01313474128719000, 3.25647808241423000, 3.12017140594820000, 3.00639835325985000, 2.75187230910949000,
             2.45029264341878000, 2.27485983903101000, 2.13908362339200000, 2.36976488308267000, 2.48697816857977000, 2.59315860990534000, 2.94746994753613000, 3.08938819983857000, 3.13396580846319000, 3.10525783789909000,
             3.08975204536669000, 3.00080090547772000, 3.05160406155338000, 3.40446749732540000, 3.77485611435623000, 4.11735703321020000, 4.24657811403553000, 4.43615418505154000, 4.62455163630605000, 4.97415292644646000,
             5.22531772039683000, 5.36926121528585000, 5.37478259947038000, 5.24815748354141000, 5.08505671445243000, 4.77811184671864000, 4.00452268618736000, 3.40748732850003000, 2.51498404607270000, 1.85545976974592000,
             1.18028488507436000, 0.87990042704426200, 0.79357426711382600, 0.49102261336351200, 0.27161737120197000,-0.16194569587355500,-0.71701276828309800,-1.21061786032192000,-1.23334541300883000,-1.21408981541258000,
            -1.28354159137913000,-1.53970820732981000,-1.42379749178858000,-1.48089496991166000,-1.34037779367443000,-0.91481691367907600,-0.48517798150385300,-0.48916611878914300,-0.55654867289334200,-0.69251703348769000,
            -0.58988134037828400,-0.68554786159175800,-0.72530325045295300,-0.70565126337746200,-0.60276131182637000,-0.57583302266127100,-0.44543253380027200,-0.13614403342808100, 0.00506567036562444, 0.34028481118180300,
             0.83552265652274100, 1.12175378253616000, 1.63418327531069000, 2.03744640215744000, 2.13509076361642000, 2.25759387172286000, 2.22576400941463000, 2.03019793506888000, 1.50634438234502000, 1.43451815221448000,
             1.13615644956195000, 0.74403780079381900, 0.18811408794093200,-0.02609721477897150,-0.34422725787622700,-0.55298444761034200,-0.96889871300317100,-1.21451119364700000,-1.63771075562468000,-1.79302716522888000,
            -1.73522313667135000,-1.88100345893044000,-2.18596194839367000,-2.61639348881471000,-2.86913586072158000,-3.35432677220025000,-4.06857195016310000,-4.43887578689707000,-4.61483982592655000,-4.76652460357181000,
            -4.82316335820522000,-4.82243499125593000,-5.96760991909042000,-6.58036809451052000,-6.99337006887133000,-7.11716745793770000,-7.32193502118935000,-7.25506174880759000,-6.87261319372335000,-6.60709611885896000,
            -6.46950348740967000,-6.32153936669931000,-6.34483525891544000,-6.39002225750757000,-6.07691278475367000,-5.78636519297244000,-5.23932554051352000,-4.90027320143690000,-4.51331522632177000,-4.29404472209136000,
            -4.03133528501668000,-3.84467746816027000,-3.33591513814011000,-2.45287171085769000,-1.43623400940974000,-0.75649498404041500,-0.33053960677334300, 0.04558637917908470, 0.28005258886842900, 0.37650105461189300,
             0.47509802393831500, 0.68602503830190600, 1.33914862166439000, 2.14735161708941000, 2.80514351655007000, 3.41527453293985000, 3.48831820608072000, 3.17875521426933000, 2.95210031579708000, 2.70693177332058000,
             2.31496502434855000, 2.14498781144538000, 2.04796211492150000, 1.88863608723673000, 1.81111884198818000, 1.57079582093914000, 1.41067039265374000, 1.35365173274700000, 1.29809222940192000, 1.17905503231607000,
             1.05344766699378000, 0.87683758975543900
        };

        /// <summary>
        /// Output data, Signal.
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MACD.xsl, U37…U255, 252 entries.
        /// </summary>
        private readonly List<double> expectedSig = new List<double>
        {
            // Begins with 33 double.NaN values.
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,-3.1552099196892100,-2.9031377918408000,-2.6773795786201000,-2.4748040112069600,-2.3226892110562200,-2.2158112478047800,-2.1428649359591300,
            -2.0981034773854500,-2.0346690723037500,-1.8993469451818600,-1.7177431962196800,-1.4863313493061200,-1.2379483666502700,-0.9781187695335780,-0.7614347974594420,-0.5495083033270660,-0.3583980086150950,
            -0.2129893517615200,-0.1067929118126260,-0.1028507963213940,-0.1754163892879080,-0.3046547909116570,-0.4290792537376410,-0.5285471921918410,-0.5974183124605590,-0.5982653208668330,-0.5496436631161060,
            -0.4817622247886860,-0.4062638547191630,-0.2736613078469070,-0.1190930598908060, 0.0693318060822932, 0.2729303842632790, 0.4692402403354150, 0.6267266992339290, 0.7227536721457870, 0.7686319665494960,
             0.7659183080698430, 0.6723527038216170, 0.4962580308726020, 0.3004674617509090, 0.1189021785108390, 0.1359444233698150, 0.3181471335783330, 0.6744018517703280, 1.1364481182820300, 1.5821505979900000,
             1.9891229375218000, 2.3808923703978700, 2.7615794359648300, 3.1070755432320500, 3.4063585461282000, 3.6302490218111700, 3.8506918053091900, 4.0596497086325800, 4.2601084130201300, 4.4709193947380800,
             4.8305105571776400, 5.1996480270933500, 5.5296069778541500, 5.8130867135426900, 6.0184242161161400, 6.1263707195284300, 6.1337094393114700, 6.0107355881717600, 5.7784094999591800, 5.5966890535332500,
             5.4095542087155100, 5.2165061733891500, 4.9541646252405600, 4.6787723077610700, 4.3860495958160900, 4.1366333552122200, 3.9898022309558800, 3.8439699001411600, 3.7037098585687100, 3.5379333512167000,
             3.3417930791433200, 3.1482725173381400, 2.9652661908103000, 2.8685853207396600, 2.8165644511627400, 2.7977775774487900, 2.8582469302426200, 2.9366910300339100, 3.0087354719313400, 3.0600718487430000,
             3.0976976240412800, 3.1087627021952000, 3.1283805980940100, 3.2190695656192000, 3.3701337556596200, 3.5633827344524000, 3.7448772007898400, 3.9298320868383300, 4.1172891289086800, 4.3410294571544800,
             4.5727489231585700, 4.7880170301706700, 4.9607248928198400, 5.0713995408056200, 5.1248752133454500, 5.1021696119721400, 4.9194872787321400, 4.6468644443467500, 4.2397226878679700, 3.7749440861138900,
             3.2609229346242600, 2.7874028939548200, 2.3917207188511800, 2.0120941160304600, 1.6629509323018100, 1.2925434352826200, 0.8793305658218650, 0.4450649055014950, 0.0941805051138218,-0.1813169843102150,
            -0.4156084116121720,-0.6567921960124120,-0.8243380977113630,-0.9700075057814990,-1.0562206411694300,-1.0344232973717200,-0.9256835805459120,-0.8399095100419840,-0.7859495634128470,-0.7719531798027950,
            -0.7390620804627770,-0.7332966480825690,-0.7372608264387970,-0.7363411438808090,-0.7138186118722090,-0.6902326406052760,-0.6437858121360470,-0.5410603637512040,-0.4292295124542370,-0.2688719244428390,
            -0.0357952481199881, 0.2107806441079170, 0.5162289197171100, 0.8453771752035180, 1.1283982681026700, 1.3799370746969200, 1.5735546086752900, 1.6861804438285000, 1.6644261266642700, 1.6317347867782700,
             1.5421602213244200, 1.3873210809485300, 1.1456357207302300, 0.9074384906717550, 0.6499371776380690, 0.4003309533883220, 0.1129623624603760,-0.1682709250091590,-0.4823843378624660,-0.7657172188571900,
            -0.9791765505804730,-1.1802507718083400,-1.4053230255233100,-1.6762242799744100,-1.9458629066650400,-2.2639464930031200,-2.6693747971173100,-3.0712602444718100,-3.4289772333817800,-3.7463231817206800,
            -4.0112763866964800,-4.2222735699606200,-4.6340385828412900,-5.0925876852158700,-5.5459320185214900,-5.9336030454373300,-6.2861511186855000,-6.5529246755530400,-6.6842071589432400,-6.7323813814031100,
            -6.7415466916035500,-6.7174361050574300,-6.7032542610302800,-6.7016612086710700,-6.6338958411079400,-6.5181927434747400,-6.3097263472269000,-6.0715735547339300,-5.7995795809422500,-5.5362920617582500,
            -5.2707107440479500,-5.0194812553258100,-4.7111703989843700,-4.2777372707376400,-3.7161505240407500,-3.1240865114206300,-2.5617253766351800,-2.0336454318849600,-1.5630230838460100,-1.1675508896911400,
            -0.8315079876023550,-0.5189192942397580,-0.1309357930202930, 0.3501551439270560, 0.8734780994076330, 1.4203313090675300, 1.8716924726147600, 2.1655532101444700, 2.3515234238493600, 2.4475819967772800,
             2.4407741756589800, 2.3992257217141200, 2.3455353069526600, 2.2689396044601300, 2.1915092750201900, 2.0787965886379400, 1.9550319296950500, 1.8444006331950500, 1.7445540520411300, 1.6398019758095500,
             1.5297404628398700, 1.4045942301721500
        };

        /// <summary>
        /// Output data, Signal, Metastock.
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MACD.xsl, Metastock, S37…S255, 252 entries.
        /// </summary>
        private readonly List<double> expectedSigM = new List<double>
        {
            // Begins with 33 double.NaN values.
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,         double.NaN,
                     double.NaN,         double.NaN,         double.NaN,-1.7119209074082100,-1.5714263894545400,-1.4478165597429400,-1.3388664203637500,-1.2708629464707100,-1.2395496633128600,-1.2348709857884000,
            -1.2519091370512300,-1.2470336537350300,-1.1704709748093400,-1.0463956087863600,-0.8716762726511050,-0.6773573333467690,-0.4688921947580490,-0.2978621603032120,-0.1285594207709390, 0.0236846921809804,
             0.1352170056111860, 0.2118405616595970, 0.1940395990256190, 0.1056302248589190,-0.0350043230546712,-0.1702319076736530,-0.2811024630840280,-0.3622574153377650,-0.3784564052423370,-0.3470082701899270,
            -0.2962617659206070,-0.2372111300364670,-0.1234093407310290, 0.0121693524964942, 0.1806521398733660, 0.3644561509087110, 0.5423903277146080, 0.6846789069031200, 0.7698424436767620, 0.8082849702451460,
             0.8013069394614510, 0.7090425505825670, 0.5390873788474780, 0.3503469382307240, 0.1747446006783030, 0.1857503755701550, 0.3525201659937720, 0.6838170151589580, 1.1158181840441900, 1.5337957186294100,
             1.9164460094582300, 2.2856113078926000, 2.6449976164741200, 2.9718084543320400, 3.2555052912234200, 3.4684772232924600, 3.6781378189912800, 3.8769398381930800, 4.0676756936486200, 4.2680650812772400,
             4.6083032434000600, 4.9579052774922400, 5.2710249949145100, 5.5406335835362500, 5.7368050021183200, 5.8412247585790500, 5.8506362414618100, 5.7369115444815600, 5.5195113924611200, 5.3486809364544200,
             5.1720737632316800, 4.9893352901270600, 4.7409709409771200, 4.4797635862459800, 4.2017659935425500, 3.9640397430914800, 3.8225274109560300, 3.6820562099544600, 3.5469246386155400, 3.3879141727143300,
             3.2003898668552200, 3.0152838612903800, 2.8400438137107000, 2.7459880275850900, 2.6941860557840300, 2.6739805666082900, 2.7286784427938600, 2.8008203942028000, 2.8674494770548800, 2.9150111492237200,
             2.9499593284523200, 2.9601276438574000, 2.9784229273965900, 3.0636318413823500, 3.2058766959771300, 3.3881727634237400, 3.5598538335461000, 3.7351139038471900, 3.9130014503389600, 4.1252317455604600,
             4.3452489405277300, 4.5500513954793600, 4.7149976362775600, 4.8216296057303300, 4.8743150274747500, 4.8550743913235300, 4.6849640502963000, 4.4294687059370400, 4.0465717739641700, 3.6083493731205200,
             3.1227364755112900, 2.6741692658178800, 2.2980502660770700, 1.9366447355343600, 1.6036392626678800, 1.2505222709596000, 0.8570152631110560, 0.4434886384244620, 0.1081218281378030,-0.1563205005722740,
            -0.3817647187336460,-0.6133534164528780,-0.7754422315200180,-0.9165327791983460,-1.0013017820935600,-0.9840048084106670,-0.8842394430293040,-0.8052247781812720,-0.7554895571236860,-0.7428950523964870,
            -0.7122923099928460,-0.7069434203126280,-0.7106153863406930,-0.7096225617480470,-0.6882503117637120,-0.6657668539432240,-0.6216999899146330,-0.5245887986173230,-0.4186579048207340,-0.2668693616202260,
            -0.0463909579916328, 0.1872379901139260, 0.4766270471532790, 0.7887909181541120, 1.0580508872465700, 1.2979594841418300, 1.4835203891963900, 1.5928558983708900, 1.5755535951657200, 1.5473465065754700,
             1.4651084951727700, 1.3208943562969800, 1.0943383026257700, 0.8702511991448200, 0.6273555077406100, 0.3912875166704200, 0.1192502707357020,-0.1475020221408380,-0.4455437688376070,-0.7150404481158610,
            -0.9190769858269590,-1.1114622804476500,-1.3263622140368600,-1.5843684689924300,-1.8413219473382600,-2.1439229123106600,-2.5288527198811500,-2.9108573332843300,-3.2516538318127800,-3.5546279861645800,
            -3.8083350605727100,-4.0111550467093600,-4.4024460211855700,-4.8380304358505600,-5.2690983624547100,-5.6387121815513100,-5.9753567494789200,-6.2312977493446500,-6.3595608382203900,-6.4090678943481100,
            -6.4211550129604200,-6.4012318837082000,-6.3899525587496500,-6.3899664985012300,-6.3273557557517200,-6.2191576431958600,-6.0231912226594000,-5.7986076184149000,-5.5415491399962700,-5.2920482564152900,
            -5.0399056621355700,-4.8008600233405100,-4.5078710463004300,-4.0968711792118800,-3.5647437452514500,-3.0030939930092500,-2.4685831157620700,-1.9657492167738400,-1.5165888556453800,-1.1379708735939300,
            -0.8153570940874790,-0.5150806676096020,-0.1442348097548030, 0.3140824756140400, 0.8122946838012470, 1.3328906536289700, 1.7639761641193200, 2.0469319741493200, 2.2279656424788700, 2.3237588686472100,
             2.3220000997874800, 2.2865976421190600, 2.2388705366795500, 2.1688236467909900, 2.0972826858304200, 1.9919853128521700, 1.8757223288124800, 1.7713082095993900, 1.6766650135598900, 1.5771430173111300,
             1.4724039472476600, 1.3532906757492100
        };

        /// <summary>
        /// Output data, Histogram.
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MACD.xsl, W37…W255, 252 entries.
        /// </summary>
        private readonly List<double> expectedHist = new List<double>
        {
            // Begins with 33 double.NaN values.
                     double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                     double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                     double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                     double.NaN,          double.NaN,          double.NaN, 0.97171700440055400, 1.00828851139361000, 0.90303285288283500, 0.81030226965255400, 0.60845920060295500, 0.42751185300574200, 0.29178524738262200,
            0.17904583429469900, 0.25373762032681000, 0.54128850848754300, 0.72641499584872500, 0.92564738765426900, 0.99353193062339900, 1.03931838846675000, 0.86673588829654400, 0.84770597652950400, 0.76444117884788700,
            0.58163462741430100, 0.42478575979557600, 0.01576846196492720,-0.29026237186605900,-0.51695360649499300,-0.49769785130393900,-0.39787175381679800,-0.27548448107487200,-0.00338803362509665, 0.19448663100290800,
            0.27152575330967900, 0.30199348027809200, 0.53041018748902500, 0.61827299182440300, 0.75369946389239900, 0.81439431272394500, 0.78523942428854300, 0.62994583559405500, 0.38410789164743000, 0.18351317761483700,
           -0.01085463391861240,-0.37426241699290600,-0.70437869179605800,-0.78316227648677400,-0.72626113296027800, 0.06816897943590220, 0.72881084083407400, 1.42501887276798000, 1.84818506604679000, 1.78280991883191000,
            1.62788935812720000, 1.56707773150428000, 1.52274826226783000, 1.38198442906887000, 1.19713201158459000, 0.89556190273187200, 0.88177113399209600, 0.83583161329355000, 0.80183481755020700, 0.84324392687180300,
            1.43836464975826000, 1.47654987966281000, 1.31983580304319000, 1.13391894275418000, 0.82135001029379100, 0.43178601364915500, 0.02935487913218540,-0.49189540455886400,-0.92930435285032200,-0.72688178570372000,
           -0.74853937927096800,-0.77219214130543700,-1.04936619259433000,-1.10156926991797000,-1.17089084777991000,-0.99766496241549400,-0.58732449702535700,-0.58332932325886900,-0.56104016628982300,-0.66310602940804600,
           -0.78456108829349600,-0.77408224722073200,-0.73202530611137000,-0.38672348028254900,-0.20808347830769100,-0.07514749485580330, 0.24187741117530800, 0.31377639916516800, 0.28817776758974500, 0.20534550724663700,
            0.15050310119309200, 0.04426031261568490, 0.07847158359522320, 0.36275587010076600, 0.60425676016169200, 0.77299591517113600, 0.72597786534972700, 0.73981954419397800, 0.74982816828138500, 0.89496131298322000,
            0.92687786401632400, 0.86107242804843500, 0.69083145059666200, 0.44269859194311000, 0.21390269015933800,-0.09082240549327560,-0.73072933295996300,-1.09049133754159000,-1.62856702591511000,-1.85911440701631000,
           -2.05608460595854000,-1.89408016267775000,-1.58272870041454000,-1.51850641128288000,-1.39657273491460000,-1.48162998807676000,-1.65285147784303000,-1.73706264128148000,-1.40353760155069000,-1.10198995769615000,
           -0.93716570920782900,-0.96473513760096000,-0.67018360679580200,-0.58267763228054600,-0.34485254155170800, 0.08718937519084440, 0.43495886730321300, 0.34309628201571400, 0.21583978651654500, 0.05598553444021250,
            0.13156439736007000, 0.02306172952083100,-0.01585671342491150, 0.00367873023195531, 0.09009012803439990, 0.09434388506773170, 0.18578731387691700, 0.41090179353937100, 0.44732340518786800, 0.64143035204559300,
            0.93230670529140200, 0.98630356891162000, 1.22179310243677000, 1.31659302194563000, 1.13208437159662000, 1.00615522637699000, 0.77447013591347900, 0.45050334061282100,-0.08701726865689820,-0.13076535954401500,
           -0.35829826181540100,-0.61935656150353300,-0.96674144087321200,-0.95278892023390400,-1.03000525213475000,-0.99842489699898600,-1.14947436371179000,-1.12493314987814000,-1.25645365141323000,-1.13333152397890000,
           -0.85383732689313100,-0.80429688491147100,-0.90028901485986100,-1.08360501780442000,-1.07855450676250000,-1.27233434535231000,-1.62171321645676000,-1.60754178941801000,-1.43086795563989000,-1.26938379335560000,
           -1.05981281990320000,-0.84398873305653800,-1.64706005152268000,-1.83419640949831000,-1.81337733322247000,-1.55068410766337000,-1.41019229299269000,-1.06709422747016000,-0.52512993356080400,-0.19269688983946200,
           -0.03666124080177190, 0.09644234618448790, 0.05672737610860870, 0.00637220943682326, 0.27106147025255500, 0.46281239053277500, 0.83386558499134900, 0.95261116997190200, 1.08797589516673000, 1.05315007673600000,
            1.06232527084120000, 1.00491795488854000, 1.23324342536579000, 1.73373251298689000, 2.24634698678759000, 2.36825605048046000, 2.24944453914182000, 2.11231977900086000, 1.88248939215583000, 1.58188877661947000,
            1.34417160835513000, 1.25035477345039000, 1.55193400487786000, 1.92436374778940000, 2.09329182192231000, 2.18741283863958000, 1.80544465418891000, 1.17544295011886000, 0.74388085481953800, 0.38423429171169900,
           -0.02723128447320900,-0.16619381577943900,-0.21476165904585000,-0.30638280997011600,-0.30972131775976000,-0.45085074552899300,-0.49505863577155500,-0.44252518600002100,-0.39938632461565600,-0.41900830492632600,
           -0.44024605187873100,-0.50058493067088000
        };

        /// <summary>
        /// Output data, Histogram, Metastock.
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MACD.xsl, X37…X255, 252 entries.
        /// </summary>
        private readonly List<double> expectedHistM = new List<double>
        {
            // Begins with 33 double.NaN values.
                     double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                     double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                     double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,          double.NaN,
                     double.NaN,          double.NaN,          double.NaN, 0.49345537746962800, 0.56197807181468900, 0.49443931884640900, 0.43580055751673900, 0.27201389557218000, 0.12525313263141200, 0.01871471009780960,
           -0.06815260505129680, 0.01950193326479080, 0.30625071570277600, 0.49630146409191600, 0.69887734454100700, 0.77727575721734500, 0.83386055435487900, 0.68412013781935000, 0.67721095812909200, 0.60897645180767600,
            0.44612925372082200, 0.30649422419364400,-0.07120385053591290,-0.35363749666679800,-0.56253819165436200,-0.54091033847592500,-0.44348222164150000,-0.32461980901494800,-0.06479595961828920, 0.12579254020964000,
            0.20298601707728100, 0.23620254353656000, 0.45520715722175000, 0.54231477291009400, 0.67393114950748900, 0.73521604414137900, 0.71173670722358600, 0.56915431675404800, 0.34065414709457100, 0.15377010627353400,
           -0.02791212313477960,-0.36905755551553900,-0.67982068694035500,-0.75496176246701500,-0.70240935020968600, 0.04402309956740790, 0.66707916169446800, 1.32518739666074000, 1.72800467554092000, 1.67191013834090000,
            1.53060116331528000, 1.47666119373748000, 1.43754523432609000, 1.30724335143167000, 1.13478734756551000, 0.85188772827617100, 0.83864238279525400, 0.79520807680719100, 0.76294342182217600, 0.80155755051446600,
            1.36095264849130000, 1.39840813636869000, 1.25247886968908000, 1.07843435448696000, 0.78468567432829700, 0.41767902584292200, 0.03764593153104560,-0.45489878792101400,-0.86960060808177400,-0.68332182402680700,
           -0.70642869289095200,-0.73095389241846000,-0.99345739659976800,-1.04482941892457000,-1.11199037081373000,-0.95090500180428900,-0.56604932854179600,-0.56188480400626400,-0.54052628535568700,-0.63604186360484300,
           -0.75009722343644200,-0.74042402225936900,-0.70096019031870500,-0.37622314450242800,-0.20720788720426200,-0.08082195670294820, 0.21879150474227300, 0.28856780563576400, 0.26651633140830800, 0.19024668867536700,
            0.13979271691437800, 0.04067326162032090, 0.07318113415678380, 0.34083565594304500, 0.56897941837909700, 0.72918426978645500, 0.68672428048942900, 0.70104028120434800, 0.71155018596709100, 0.84892118088600400,
            0.88006877986909600, 0.81920981980648800, 0.65978496319281700, 0.42652787781107500, 0.21074168697768300,-0.07696254460488560,-0.68044136410893900,-1.02198137743702000,-1.53158772789148000,-1.75288960337460000,
           -1.94245159043693000,-1.79426883877362000,-1.50447599896325000,-1.44562212217085000,-1.33202189146591000,-1.41246796683315000,-1.57402803139415000,-1.65410649874638000,-1.34146724114664000,-1.05776931484030000,
           -0.90177687264548800,-0.92635479087693100,-0.64835526026855800,-0.56436219071331300,-0.33907601158087100, 0.06918789473159090, 0.39906146152545100, 0.31605865939212900, 0.19894088423034400, 0.05037801890879700,
            0.12241096961456200, 0.02139555872087070,-0.01468786411225960, 0.00397129837058530, 0.08548899993734150, 0.08993383128195220, 0.17626745611436100, 0.38844476518924200, 0.42372357518635800, 0.60715417280202900,
            0.88191361451437400, 0.93451579242223400, 1.15755622815741000, 1.24865548400333000, 1.07703987636985000, 0.95963438758103000, 0.74224362021824200, 0.43734203669799500,-0.06920921282069560,-0.11282835436098900,
           -0.32895204561081300,-0.57685655550315700,-0.90622421468483600,-0.89634841392379100,-0.97158276561683700,-0.94427196428076200,-1.08814898373887000,-1.06700917150616000,-1.19216698678707000,-1.07798671711302000,
           -0.81614615084439200,-0.76954117848278200,-0.85959973435681100,-1.03202501982228000,-1.02781391338333000,-1.21040385988959000,-1.53971923028196000,-1.52801845361274000,-1.36318599411377000,-1.21189661740723000,
           -1.01482829763251000,-0.81127994454657600,-1.56516389790485000,-1.74233765865996000,-1.72427170641662000,-1.47845527638639000,-1.34657827171043000,-1.02376399946294000,-0.51305235550295900,-0.19802822451085300,
           -0.04834847444924680, 0.07969251700888690, 0.04511729983420930,-0.00005575900633570, 0.25044297099804600, 0.43279245022342400, 0.78386568214587600, 0.89833441697799500, 1.02823391367451000, 0.99800353432393200,
            1.00857037711889000, 0.95618255518023800, 1.17195590816032000, 1.64399946835419000, 2.12850973584171000, 2.24659900896883000, 2.13804350898872000, 2.01133559595292000, 1.79664144451381000, 1.51447192820582000,
            1.29045511802579000, 1.20110570591151000, 1.48338343141920000, 1.83326914147537000, 1.99284883274883000, 2.08238387931088000, 1.72434204196140000, 1.13182324012001000, 0.72413467331820900, 0.38317290467336300,
           -0.00703507543892901,-0.14160983067368500,-0.19090842175804600,-0.28018755955425200,-0.28616384384224800,-0.42118949191302800,-0.46505193615874000,-0.41765647685238800,-0.37857278415797500,-0.39808798499505600,
           -0.41895628025388200,-0.47645308599377500
        };
        #endregion

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Name_HasCorrectValue()
        {
            var target = new MovingAverageConvergenceDivergence();
            Assert.AreEqual("MACD", target.Name);
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Moniker_HasCorrectValue()
        {
            var target = new MovingAverageConvergenceDivergence();
            Assert.AreEqual("MACD(12,26,9)", target.Moniker);
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Description_HasCorrectValue()
        {
            var target = new MovingAverageConvergenceDivergence();
            Assert.AreEqual("Moving Average Convergence/Divergence", target.Description);
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_IsPrimed_HasCorrectValue()
        {
            var target = new MovingAverageConvergenceDivergence();
            Assert.IsFalse(target.IsPrimed);
            var scalar = new Scalar(DateTime.Now, 1d);
            for (int i = 1; i <= 33; ++i)
            {
                scalar.Value = i;
                target.Update(scalar);
                Assert.IsFalse(target.IsPrimed);
            }

            scalar.Value = 34.0;
            target.Update(scalar);
            Assert.IsTrue(target.IsPrimed);

            scalar.Value = 35.0;
            target.Update(scalar);
            Assert.IsTrue(target.IsPrimed);
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_Update_ReturnsCorrectValues()
        {
            const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 33; i < count; ++i)
            {
                double u = target.Update(input[i]);
                Assert.IsFalse(double.IsNaN(u));
                Assert.AreEqual(u, target.Value);
                double d = Math.Round(target.Value, digits);
                u = Math.Round(expected[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_Signal_ReturnsCorrectValues()
        {
            double u;
            const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                u = target.Signal;
                Assert.IsFalse(target.IsPrimed);
                Assert.IsTrue(double.IsNaN(u));
            }

            for (int i = 33; i < count; ++i)
            {
                target.Update(input[i]);
                u = target.Signal;
                Assert.IsFalse(double.IsNaN(u));
                double d = Math.Round(u, digits);
                u = Math.Round(expectedSig[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_SignalBand_ReturnsCorrectValues()
        {
            const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            for (int i = 0; i < 33; ++i)
            {
                DateTime dateTime = DateTime.Now;
                target.Update(input[i], dateTime);
                Band band = target.ValueSignalBand;
                Assert.IsFalse(target.IsPrimed);
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
                Assert.AreEqual(dateTime, band.Time);
            }
            for (int i = 33; i < count; ++i)
            {
                DateTime dateTime = DateTime.Now;
                target.Update(input[i], dateTime);
                Band band = target.ValueSignalBand;
                Assert.IsFalse(double.IsNaN(band.FirstValue));
                Assert.IsFalse(double.IsNaN(band.SecondValue));
                double d = Math.Round(band.FirstValue, digits);
                double u = Math.Round(expected[i], digits);
                Assert.AreEqual(u, d);
                d = Math.Round(band.SecondValue, digits);
                u = Math.Round(expectedSig[i], digits);
                Assert.AreEqual(u, d);
                Assert.AreEqual(dateTime, band.Time);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_Histogram_ReturnsCorrectValues()
        {
            double u;
            const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                u = target.Histogram;
                Assert.IsFalse(target.IsPrimed);
                Assert.IsTrue(double.IsNaN(u));
            }

            for (int i = 33; i < count; ++i)
            {
                target.Update(input[i]);
                u = target.Histogram;
                Assert.IsFalse(double.IsNaN(u));
                double d = Math.Round(u, digits);
                u = Math.Round(expectedHist[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_HistogramBand_ReturnsCorrectValues()
        {
            const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            for (int i = 0; i < 33; ++i)
            {
                DateTime dateTime = DateTime.Now;
                target.Update(input[i], dateTime);
                Band band = target.HistogramBand;
                Assert.IsFalse(target.IsPrimed);
                Assert.IsTrue(double.IsNaN(band.FirstValue));
                Assert.IsTrue(double.IsNaN(band.SecondValue));
                Assert.AreEqual(dateTime, band.Time);
            }

            for (int i = 33; i < count; ++i)
            {
                DateTime dateTime = DateTime.Now;
                target.Update(input[i], dateTime);
                Band band = target.HistogramBand;
                Assert.IsFalse(double.IsNaN(band.FirstValue));
                double d = Math.Round(band.FirstValue, digits);
                double u = Math.Round(expectedHist[i], digits);
                Assert.AreEqual(u, d);
                Assert.AreEqual(0d, band.SecondValue);
                Assert.AreEqual(dateTime, band.Time);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_Update_MetastockMode_ReturnsCorrectValues()
        {
            const int digits = 9;
            int count = input.Count;
            // The test_MACD.xls uses non-standard alphas for the Metastock data.
            var target = new MovingAverageConvergenceDivergence(0.075, 0.15, 0.2, false);
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 33; i < count; ++i)
            {
                double u = target.Update(input[i]);
                Assert.IsFalse(double.IsNaN(u));
                Assert.AreEqual(u, target.Value);
                double d = Math.Round(target.Value, digits);
                u = Math.Round(expectedM[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_Signal_MetastockMode_ReturnsCorrectValues()
        {
            double u;
            const int digits = 9;
            int count = input.Count;
            // The test_MACD.xls uses non-standard alphas for the Metastock data.
            var target = new MovingAverageConvergenceDivergence(0.075, 0.15, 0.2, false);
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                u = target.Signal;
                Assert.IsFalse(target.IsPrimed);
                Assert.IsTrue(double.IsNaN(u));
            }

            for (int i = 33; i < count; ++i)
            {
                target.Update(input[i]);
                u = target.Signal;
                Assert.IsFalse(double.IsNaN(u));
                double d = Math.Round(u, digits);
                u = Math.Round(expectedSigM[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_TaLibTest_Histogram_MetastockMode_ReturnsCorrectValues()
        {
            double u;
            const int digits = 9;
            int count = input.Count;
            // The test_MACD.xls uses non-standard alphas for the Metastock data.
            var target = new MovingAverageConvergenceDivergence(0.075, 0.15, 0.2, false);
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                u = target.Histogram;
                Assert.IsFalse(target.IsPrimed);
                Assert.IsTrue(double.IsNaN(u));
            }

            for (int i = 33; i < count; ++i)
            {
                target.Update(input[i]);
                u = target.Histogram;
                Assert.IsFalse(double.IsNaN(u));
                double d = Math.Round(u, digits);
                u = Math.Round(expectedHistM[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Value_ReturnsCorrectValues()
        {
            const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 33; i < count; ++i)
            {
                double u = target.Update(input[i]);
                Assert.IsFalse(double.IsNaN(u));
                Assert.AreEqual(u, target.Value);
                double d = Math.Round(target.Value, digits);
                u = Math.Round(expected[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Indicators_AreNotNull()
        {
            var target = new MovingAverageConvergenceDivergence();
            Assert.IsNotNull(target.FastMovingAverageIndicator);
            Assert.IsNotNull(target.SlowMovingAverageIndicator);
            Assert.IsNotNull(target.SignalMovingAverageIndicator);

            target = new MovingAverageConvergenceDivergence(33, 22, 11);
            Assert.IsNotNull(target.FastMovingAverageIndicator);
            Assert.IsNotNull(target.SlowMovingAverageIndicator);
            Assert.IsNotNull(target.SignalMovingAverageIndicator);
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Length_ReturnsCorrectValues()
        {
            var target = new MovingAverageConvergenceDivergence();
            Assert.AreEqual(26, target.SlowLength);
            Assert.AreEqual(12, target.FastLength);
            Assert.AreEqual(9, target.SignalLength);

            target = new MovingAverageConvergenceDivergence(33, 22, 11);
            Assert.AreEqual(33, target.SlowLength);
            Assert.AreEqual(22, target.FastLength);
            Assert.AreEqual(11, target.SignalLength);
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Update_ReturnsCorrectValues()
        {
            const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            var scalar = new Scalar(DateTime.Now, 1d);
            for (int i = 0; i < 33; ++i)
            {
                scalar.Value = input[i];
                scalar.Value = target.Update(scalar).Value;
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 33; i < count; ++i)
            {
                scalar.Value = input[i];
                double u = target.Update(scalar).Value;
                Assert.IsFalse(double.IsNaN(u));
                Assert.AreEqual(u, target.Value);
                double d = Math.Round(target.Value, digits);
                u = Math.Round(expected[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Reset_FunctionsCorrectly()
        {
            double d, u; const int digits = 9;
            int count = input.Count;
            var target = new MovingAverageConvergenceDivergence();
            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 33; i < count; ++i)
            {
                u = target.Update(input[i]);
                Assert.IsFalse(double.IsNaN(u));
                Assert.AreEqual(u, target.Value);
                d = Math.Round(target.Value, digits);
                u = Math.Round(expected[i], digits);
                Assert.AreEqual(u, d);
            }

            target.Reset();

            for (int i = 0; i < 33; ++i)
            {
                target.Update(input[i]);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 33; i < count; ++i)
            {
                u = target.Update(input[i]);
                Assert.IsFalse(double.IsNaN(u));
                Assert.AreEqual(u, target.Value);
                d = Math.Round(target.Value, digits);
                u = Math.Round(expected[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void MovingAverageConvergenceDivergence_Constructor_CreatesAnInstance()
        {
            var target = new MovingAverageConvergenceDivergence();
            Assert.AreEqual(26, target.SlowLength);
            Assert.AreEqual(12, target.FastLength);
            Assert.AreEqual(9, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.ClosingPrice, target.OhlcvComponent);

            target = new MovingAverageConvergenceDivergence(40);
            Assert.AreEqual(40, target.SlowLength);
            Assert.AreEqual(12, target.FastLength);
            Assert.AreEqual(9, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.ClosingPrice, target.OhlcvComponent);

            target = new MovingAverageConvergenceDivergence(40, 30);
            Assert.AreEqual(40, target.SlowLength);
            Assert.AreEqual(30, target.FastLength);
            Assert.AreEqual(9, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.ClosingPrice, target.OhlcvComponent);

            target = new MovingAverageConvergenceDivergence(40, 30, 20);
            Assert.AreEqual(40, target.SlowLength);
            Assert.AreEqual(30, target.FastLength);
            Assert.AreEqual(20, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.ClosingPrice, target.OhlcvComponent);

            target = new MovingAverageConvergenceDivergence(40, 30, 20, false, OhlcvComponent.LowestPrice);
            Assert.AreEqual(40, target.SlowLength);
            Assert.AreEqual(30, target.FastLength);
            Assert.AreEqual(20, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.LowestPrice, target.OhlcvComponent);

            target = new MovingAverageConvergenceDivergence(40, 30, 20, true, OhlcvComponent.HighestPrice);
            Assert.AreEqual(40, target.SlowLength);
            Assert.AreEqual(30, target.FastLength);
            Assert.AreEqual(20, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.HighestPrice, target.OhlcvComponent);

            target = new MovingAverageConvergenceDivergence(40, new ExponentialMovingAverage(40), 30, new ExponentialMovingAverage(30), 20, new ExponentialMovingAverage(20));
            Assert.AreEqual(40, target.SlowLength);
            Assert.AreEqual(30, target.FastLength);
            Assert.AreEqual(20, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.ClosingPrice, target.OhlcvComponent);

            target = new MovingAverageConvergenceDivergence(40, new ExponentialMovingAverage(40), 30, new ExponentialMovingAverage(30), 20, new ExponentialMovingAverage(20), OhlcvComponent.TypicalPrice);
            Assert.AreEqual(40, target.SlowLength);
            Assert.AreEqual(30, target.FastLength);
            Assert.AreEqual(20, target.SignalLength);
            Assert.AreEqual(OhlcvComponent.TypicalPrice, target.OhlcvComponent);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void MovingAverageConvergenceDivergence_Constructor_SlowLengthIsOne_ThrowsException()
        {
            var target = new MovingAverageConvergenceDivergence(1);
            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void MovingAverageConvergenceDivergence_Constructor_SlowLengthIsNegative_ThrowsException()
        {
            var target = new MovingAverageConvergenceDivergence(-8);
            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void MovingAverageConvergenceDivergence_Constructor_FastLengthIsOne_ThrowsException()
        {
            var target = new MovingAverageConvergenceDivergence(40, 1);
            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void MovingAverageConvergenceDivergence_Constructor_FastLengthIsNegative_ThrowsException()
        {
            var target = new MovingAverageConvergenceDivergence(40, -8);
            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void MovingAverageConvergenceDivergence_Constructor_SignalLengthIsOne_ThrowsException()
        {
            var target = new MovingAverageConvergenceDivergence(40, 30, 1);
            Assert.IsNotNull(target);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void MovingAverageConvergenceDivergence_Constructor_SignalLengthIsNegative_ThrowsException()
        {
            var target = new MovingAverageConvergenceDivergence(40, 30, -8);
            Assert.IsNotNull(target);
        }
    }
}
