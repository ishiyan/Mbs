using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Mbs.Trading.Data;
using Mbs.Trading.Indicators2.WellesWilder;

namespace Mbs.UnitTests.Trading.Indicators2.WellesWilder
{
    [TestClass]
    public class AverageDirectionalMovementIndexTests
    {
        #region Test data (WealthLab)
        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, high price, A3…A70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabHigh = new List<double>
        {
            1.740000009536740, 1.779999971389770, 1.720000028610230, 1.750000000000000, 1.830000042915340, 1.799999952316280, 1.769999980926510, 1.740000009536740, 1.649999976158140, 1.919999957084660,
            1.779999971389770, 1.740000009536740, 1.700000047683720, 1.600000023841860, 1.610000014305110, 1.620000004768370, 1.519999980926510, 1.440000057220460, 1.450000047683720, 1.529999971389770,
            1.600000023841860, 1.649999976158140, 1.590000033378600, 1.639999985694890, 1.679999947547910, 1.740000009536740, 1.830000042915340, 1.769999980926510, 1.740000009536740, 1.789999961853030,
            1.779999971389770, 1.820000052452090, 1.820000052452090, 1.809999942779540, 2.000000000000000, 2.359999895095830, 2.450000047683720, 2.500000000000000, 2.700000047683720, 2.670000076293950,
            2.410000085830690, 2.299999952316280, 2.259999990463260, 2.299999952316280, 2.269999980926510, 2.289999961853030, 2.450000047683720, 2.789999961853030, 2.859999895095830, 2.619999885559080,
            2.289999961853030, 2.289999961853030, 2.269999980926510, 2.289999961853030, 2.180000066757200, 2.250000000000000, 2.319999933242800, 2.799999952316280, 2.799999952316280, 2.559999942779540,
            2.559999942779540, 2.559999942779540, 2.750000000000000, 2.930000066757200, 3.140000104904170, 3.380000114440920
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, low price, B3…B70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabLow = new List<double>
        {
            1.580000042915340, 1.549999952316280, 1.549999952316280, 1.600000023841860, 1.700000047683720, 1.710000038146970, 1.649999976158140, 1.649999976158140, 1.549999952316280, 1.679999947547910,
            1.620000004768370, 1.559999942779540, 1.570000052452090, 1.549999952316280, 1.519999980926510, 1.500000000000000, 1.450000047683720, 1.399999976158140, 1.399999976158140, 1.370000004768370,
            1.470000028610230, 1.399999976158140, 1.389999985694890, 1.480000019073490, 1.559999942779540, 1.590000033378600, 1.730000019073490, 1.600000023841860, 1.600000023841860, 1.570000052452090,
            1.679999947547910, 1.679999947547910, 1.639999985694890, 1.679999947547910, 1.779999971389770, 2.009999990463260, 2.210000038146970, 2.319999933242800, 2.500000000000000, 2.349999904632570,
            2.200000047683720, 2.150000095367430, 2.200000047683720, 2.150000095367430, 2.160000085830690, 2.180000066757200, 2.259999990463260, 2.450000047683720, 2.759999990463260, 2.200000047683720,
            2.200000047683720, 2.150000095367430, 2.059999942779540, 2.180000066757200, 2.109999895095830, 2.119999885559080, 2.160000085830690, 2.319999933242800, 2.549999952316280, 2.450000047683720,
            2.349999904632570, 2.400000095367430, 2.460000038146970, 2.619999885559080, 2.670000076293950, 2.940000057220460
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, closing price, C3…C70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabClose = new List<double>
        {
            1.620000004768370, 1.610000014305110, 1.590000033378600, 1.710000038146970, 1.759999990463260, 1.750000000000000, 1.720000028610230, 1.659999966621400, 1.629999995231630, 1.700000047683720,
            1.669999957084660, 1.620000004768370, 1.620000004768370, 1.570000052452090, 1.610000014305110, 1.529999971389770, 1.500000000000000, 1.429999947547910, 1.409999966621400, 1.470000028610230,
            1.539999961853030, 1.480000019073490, 1.580000042915340, 1.590000033378600, 1.679999947547910, 1.720000028610230, 1.820000052452090, 1.629999995231630, 1.690000057220460, 1.769999980926510,
            1.769999980926510, 1.799999952316280, 1.669999957084660, 1.799999952316280, 1.990000009536740, 2.210000038146970, 2.210000038146970, 2.480000019073490, 2.630000114440920, 2.410000085830690,
            2.269999980926510, 2.250000000000000, 2.230000019073490, 2.190000057220460, 2.190000057220460, 2.279999971389770, 2.450000047683720, 2.730000019073490, 2.779999971389770, 2.210000038146970,
            2.250000000000000, 2.150000095367430, 2.200000047683720, 2.190000057220460, 2.119999885559080, 2.150000095367430, 2.299999952316280, 2.779999971389770, 2.579999923706050, 2.490000009536740,
            2.490000009536740, 2.529999971389770, 2.710000038146970, 2.759999990463260, 3.049999952316280, 3.150000095367430
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, trueRange1, D3…D70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabTrueRange1 = new List<double>
        {
            double.NaN,
            0.230000019073490, 0.170000076293950, 0.159999966621400, 0.129999995231620, 0.089999914169310, 0.120000004768370, 0.090000033378600, 0.110000014305120, 0.289999961853030, 0.159999966621400,
            0.180000066757200, 0.129999995231630, 0.070000052452090, 0.090000033378600, 0.120000004768370, 0.079999923706050, 0.100000023841860, 0.050000071525580, 0.159999966621400, 0.129999995231630,
            0.250000000000000, 0.200000047683710, 0.159999966621400, 0.120000004768370, 0.149999976158140, 0.110000014305110, 0.220000028610230, 0.139999985694880, 0.219999909400940, 0.100000023841860,
            0.140000104904180, 0.180000066757200, 0.139999985694880, 0.220000028610230, 0.369999885559090, 0.240000009536750, 0.289999961853030, 0.220000028610230, 0.320000171661380, 0.210000038146970,
            0.149999856948850, 0.059999942779540, 0.149999856948850, 0.109999895095820, 0.109999895095830, 0.190000057220460, 0.339999914169310, 0.129999876022340, 0.579999923706050, 0.089999914169310,
            0.139999866485600, 0.210000038146970, 0.109999895095830, 0.080000162124630, 0.130000114440920, 0.169999837875370, 0.500000000000000, 0.250000000000000, 0.129999876022330, 0.210000038146970,
            0.159999847412110, 0.289999961853030, 0.310000181198120, 0.470000028610220, 0.440000057220460
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, +DM1, E3…E70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDmPlus1 = new List<double>
        {
            double.NaN,
            0.039999961853030000, 0.000000000000000000, 0.029999971389770100, 0.080000042915340000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.269999980926520000, 0.000000000000000000,
            0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.009999990463259940, 0.079999923706050000, 0.070000052452089800,
            0.000000000000000000, 0.000000000000000000, 0.049999952316290000, 0.039999961853020000, 0.060000061988830100, 0.090000033378600000, 0.000000000000000000, 0.000000000000000000, 0.049999952316290000, 0.000000000000000000,
            0.040000081062320000, 0.000000000000000000, 0.000000000000000000, 0.190000057220460000, 0.359999895095830000, 0.090000152587889700, 0.049999952316280200, 0.200000047683720000, 0.000000000000000000, 0.000000000000000000,
            0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000, 0.019999980926519900, 0.160000085830690000, 0.339999914169310000, 0.069999933242800100, 0.000000000000000000, 0.000000000000000000,
            0.000000000000000000, 0.000000000000000000, 0.019999980926519900, 0.000000000000000000, 0.069999933242800100, 0.069999933242800100, 0.480000019073480000, 0.000000000000000000, 0.000000000000000000, 0.000000000000000000,
            0.000000000000000000, 0.190000057220460000, 0.180000066757200000, 0.210000038146970000, 0.240000009536750000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, -DM1, F3…F70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDmMinus1 = new List<double>
        {
            double.NaN,
            0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0600000619888299000, 0.0000000000000000000, 0.1000000238418600000, 0.0000000000000000000, 0.0599999427795399000,
            0.0600000619888301000, 0.0000000000000000000, 0.0200001001358101000, 0.0299999713897701000, 0.0199999809265099000, 0.0499999523162800000, 0.0500000715255799000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
            0.0700000524520898000, 0.0099999904632501700, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.1299999952316300000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
            0.0000000000000000000, 0.0399999618530200000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.1500000953674300000, 0.1499998569488500000,
            0.0499999523162900000, 0.0000000000000000000, 0.0499999523162900000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.5599999427795400000, 0.0000000000000000000,
            0.0499999523162900000, 0.0900001525878897000, 0.0000000000000000000, 0.0700001716613698000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0999999046325604000, 0.1000001430511500000,
            0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, +Di1, G3…G70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDiPlus1 = new List<double>
        {
            double.NaN,
           17.39128631995860,  0.00000000000000, 18.74998603015810, 61.53849680748420,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, 93.10345394574710,  0.00000000000000,
            0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, 19.99995231635610, 49.99996274708600, 53.84619616898130,
            0.00000000000000,  0.00000000000000, 31.24997671693420, 33.33330021963740, 40.00004768372360, 81.81820152219650,  0.00000000000000,  0.00000000000000, 22.72726041226100,  0.00000000000000,
           28.57146506404200,  0.00000000000000,  0.00000000000000, 86.36365114164590, 97.29729903884990, 37.50006208816780, 17.24136513563400, 90.90910076109870,  0.00000000000000,  0.00000000000000,
            0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, 18.18181818182300, 84.21054612896210,100.00000000000000, 53.84615384615500,  0.00000000000000,  0.00000000000000,
            0.00000000000000,  0.00000000000000, 18.18181818182300,  0.00000000000000, 53.84605509298400, 41.17647058823560, 96.00000381469600,  0.00000000000000,  0.00000000000000,  0.00000000000000,
            0.00000000000000, 65.51726972872860, 58.06450372432600, 44.68085646035720, 54.54544961945290
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, -Di1, H3…H70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDiMinus1 = new List<double>
        {
            double.NaN,
            0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 50.0000496705355000,  0.0000000000000000, 90.9091007610946000,  0.0000000000000000, 37.4999720603160000,
           33.3333554091196000,  0.0000000000000000, 28.5715502134784000, 33.3332891817608000, 16.6666501098186000, 62.4999999999984000, 50.0000596046358000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
           28.0000209808359000,  4.9999940395337600,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 59.0908992389036000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
            0.0000000000000000, 22.2221927878368000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 46.8750046566094000, 71.4284903338312000,
           33.3333333333377000,  0.0000000000000000, 33.3333333333377000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 96.5517269728735000,  0.0000000000000000,
           35.7142857142887000, 42.8572077329350000,  0.0000000000000000, 87.5000372528230000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 76.9230769230760000, 47.6191070885253000,
            0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, trueRange10, I3…I70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabTrueRange10 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            1.549999952316290, 1.575000023841860, 1.547500016689300, 1.462750067472460, 1.406475094103820, 1.385827589461810, 1.327244754221680, 1.294520302641370, 1.215068343902810, 1.253561476133930,
            1.258205323752170, 1.382384791376950, 1.444146359922970, 1.459731690552070, 1.433758526265230, 1.440382649796850, 1.406344399122270, 1.485709987820280, 1.477138974733130, 1.549424986660760,
            1.494482511836540, 1.485034365557070, 1.516530995758560, 1.504877881877580, 1.574390122300060, 1.786950995629140, 1.848255905602980, 1.953430276895710, 1.978087277816370, 2.100278721696110,
            2.100250887673470, 2.040225655854970, 1.896203033049020, 1.856582586692960, 1.780924223119490, 1.712831695903370, 1.731548583533490, 1.898393639349450, 1.838554151436850, 2.234698659999210,
            2.101228708168600, 2.031105703837340, 2.037995171600580, 1.944195549536350, 1.829776156707350, 1.776798655477530, 1.769118627805150, 2.092206765024630, 2.132986088522170, 2.049687355692280,
            2.054718658270020, 2.009246639855130, 2.098321937722650, 2.198489925148500, 2.448640961243870, 2.643776922339950
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, +DM10, J3…J70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDmPlus10 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            0.4199999570846600, 0.3779999613761940, 0.3401999652385750, 0.3061799687147170, 0.2755619718432450, 0.2480057746589210, 0.2232051971930290, 0.2008846774737260, 0.1807962097263530, 0.1727165792169780,
            0.2354448450013300, 0.2819004129532870, 0.2537103716579580, 0.2283393344921620, 0.2555053533592360, 0.2699547798763320, 0.3029593638775290, 0.3626634608683760, 0.3263971147815390, 0.2937574033033850,
            0.3143816152893360, 0.2829434537604030, 0.2946491894466830, 0.2651842705020140, 0.2386658434518130, 0.4047993163270920, 0.7243192797902120, 0.7418875043990810, 0.7176987062754530, 0.8459288833316280,
            0.7613359949984650, 0.6852023954986180, 0.6166821559487570, 0.5550139403538810, 0.4995125463184930, 0.4495612916866430, 0.4246051434444990, 0.5421447149307390, 0.8279301576069750, 0.8151370750890780,
            0.7336233675801700, 0.6602610308221530, 0.5942349277399380, 0.5348114349659440, 0.5013302723958690, 0.4511972451562830, 0.4760774538834540, 0.4984696417379090, 0.9286226966375980, 0.8357604269738380,
            0.7521843842764550, 0.6769659458488090, 0.6092693512639280, 0.7383424733579950, 0.8445082927793960, 0.9700575016484260, 1.1130517610203300
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, -DM10, K3…K70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDmMinus10 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            0.1600000858306900, 0.2040000200271610, 0.2436000800132750, 0.2192400720119470, 0.2173161649465630, 0.2255845198416770, 0.2230260487840190, 0.2507233962218970, 0.2756511281252870, 0.2480860153127580,
            0.2232774137814830, 0.2009496724033340, 0.2508547576150910, 0.2357692723168320, 0.2121923450851490, 0.1909731105766340, 0.1718757995189700, 0.1546882195670730, 0.2692193928419960, 0.2422974535577970,
            0.2180677082020170, 0.1962609373818150, 0.1766348436436340, 0.1989713211322900, 0.1790741890190610, 0.1611667701171550, 0.1450500931054400, 0.1305450837948960, 0.1174905754154060, 0.1057415178738660,
            0.2451674614539090, 0.3706505722573680, 0.3835854673479210, 0.3452269206131290, 0.3607041808681060, 0.3246337627812960, 0.2921703865031660, 0.2629533478528500, 0.2366580130675650, 0.2129922117608080,
            0.7516929333642670, 0.6765236400278410, 0.6588712283413470, 0.6829842580951020, 0.6146858322855910, 0.6232174207184020, 0.5608956786465620, 0.5048061107819060, 0.4543254997037150, 0.4088929497333440,
            0.4680035593925700, 0.5212033465044620, 0.4690830118540160, 0.4221747106686140, 0.3799572396017530, 0.3419615156415780, 0.3077653640774200
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, +DI10, L3…L70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDiPlus10 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            24.38709503257200, 21.59999746595130, 19.78545818498620, 18.83862308202780, 17.63314371499380, 16.10627461095010, 15.13546592177180, 13.96627069945930, 14.21455674355000, 18.78207407326030,
            22.40496106888310, 18.35309338185390, 15.81137070513700, 17.50358336487200, 18.82846901559720, 21.03325556721050, 25.78767058017380, 21.96910012433880, 19.88691709637260, 20.29021204613950,
            18.93253694970970, 19.84123709730810, 17.48624137875740, 15.85948244212600, 25.71150000202700, 40.53380767362330, 40.13986927622160, 36.74043116685910, 42.76499287056020, 36.24928382760730,
            32.62478780607230, 30.22617396164110, 29.26975279970110, 26.90494621132090, 25.24314543261060, 24.78965939619400, 31.30981827979720, 43.61214346939620, 44.33576647454420, 32.82873797312910,
            31.42261612243180, 29.25672093861280, 26.24203641002350, 25.78600041109170, 24.65860337628430, 26.79411380776310, 28.17615698028880, 44.38484341802920, 39.18264781337090, 36.69751790132910,
            32.94689241877920, 30.32327336915970, 35.18728275601660, 38.41310724780100, 39.61615920839820, 42.10081991468470
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, -DI10, M3…M70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDiMinus10 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            13.161292019545400, 15.466671512744900, 14.167371221163900, 14.856684663981600, 16.038998542339300, 16.093347432246800, 18.890517022154400, 21.293689064809800, 20.417453599021700, 17.811445073287200,
            15.971135124756200, 18.146521806364900, 16.325857188699900, 14.536393671421800, 13.319754134198300, 11.932648559965100, 10.999312804432300, 18.120588476151700, 16.403158924269300, 14.074105560410900,
            13.132367614033400, 11.894327009555400, 13.120161848902100, 11.899582761867500, 10.236774725295100,  8.117183597100900,  7.063149826771780,  6.014577372176100,  5.345644707375850, 11.673091714985300,
            17.647918847826400, 18.801129485217500, 18.206221306271100, 19.428394053324100, 18.228387180486700, 17.057740535859900, 15.186021943216400, 12.466224504874700, 11.584766844879300, 33.637328684151600,
            32.196573242971200, 32.439041803513700, 33.512555260801100, 31.616461236740400, 34.059762907823200, 31.567768070818100, 28.534327933011000, 21.715133862420400, 19.169977335231600, 22.832924157572400,
            25.366166039650900, 23.346213578231300, 20.119634793830000, 17.282646386295700, 13.965359603715300, 11.641124539547900
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, dx10, P3…P70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabDx10 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            29.89689809430460000, 16.54674164741230000, 16.54674164741230000, 11.81748642292120000,  4.73431467612476000,  0.04014698894911670, 11.03583431100520000, 20.78113081903100000, 17.91087723211610000,  2.65246148118754000,
            16.76519130987920000,  0.56595548863666500,  1.60090498552794000,  9.26089831490541000, 17.13536345611050000, 27.60611986292620000, 40.19997405367510000,  9.59975440702229000,  9.59975440702229000, 18.08884016525250000,
            18.08884016525250000, 25.04102356899340000, 14.26524867159010000, 14.26524867159010000, 43.04719877132370000, 66.63096317223280000, 70.07331327108330000, 71.86492260112730000, 77.77770166227270000, 51.28333442230760000,
            29.79125246100980000, 23.30343231870250000, 23.30343231870250000, 16.13644109251040000, 16.13644109251040000, 18.47646179425270000, 34.67793303496450000, 55.53998821579720000, 58.56703733955470000,  1.21654665559167000,
             1.21654665559166000,  5.15808659048805000, 12.16729735319650000, 10.15716165870890000, 16.01059451492850000,  8.17940427792641000,  0.63157801113823000, 34.29609281017680000, 34.29609281017680000, 23.28992237289050000,
            13.00004935349500000, 13.00004935349500000, 27.24369505605970000, 37.93908778095670000, 47.87247575909310000, 56.67769501916090000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (WealthLab example), test_ADX.xsl, adx10, Q3…Q70, 66 entries.
        /// </summary>
        private readonly List<double> wealthLabAdx10 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            13.19626333204640, 13.55315612982970, 12.25443606571040, 11.18908295769210, 10.99626449341350, 11.61017438968320, 13.20976893700750, 15.90878944867420, 15.27788594450900, 14.71007279076040,
            15.04794952820960, 15.35203859191390, 16.32093708962180, 16.11536824781870, 15.93035629019580, 18.64204053830860, 23.44093280170100, 28.10417084863920, 32.48024602388800, 37.00999158772650,
            38.43732587118460, 37.57271853016710, 36.14578990902070, 34.86155414998880, 32.98904284424100, 31.30378266906790, 30.02105058158640, 30.48673882692420, 32.99206376581150, 35.54956112318580,
            32.11625967642640, 29.02628837434290, 26.63946819595750, 25.19225111168140, 23.68874216638410, 22.92092740123860, 21.44677508890730, 19.36525538113040, 20.85833912403510, 22.20211449264920,
            22.31089528067340, 21.37981068795550, 20.54183455450950, 21.21202060466450, 22.88472732229370, 25.38350216597370, 28.51292145129240
        };
        #endregion

        #region Test data (from Wilder's book)
        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, high price, B3…B44, 42 entries.
        /// </summary>
        private readonly List<double> bookHigh = new List<double>
        {
            274.000, 273.250, 272.000, 270.750, 270.000, 270.500, 268.500, 265.500, 262.500, 263.500,
            269.500, 267.250, 267.500, 269.750, 268.250, 264.000, 268.000, 266.000, 274.000, 277.500,
            277.000, 272.000, 267.750, 269.250, 266.000, 265.000, 264.750, 261.000, 257.500, 259.000,
            259.750, 257.250, 250.000, 254.250, 254.000, 253.250, 253.250, 251.750, 253.000, 251.500,
            246.250, 244.250
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, low price, C3…C44, 42 entries.
        /// </summary>
        private readonly List<double> bookLow = new List<double>
        {
            272.000, 270.250, 269.750, 268.000, 269.000, 268.000, 266.500, 263.000, 259.000, 260.000,
            263.000, 265.000, 265.500, 266.000, 263.250, 261.500, 266.250, 264.250, 267.000, 273.500,
            272.500, 269.500, 264.000, 263.000, 263.500, 262.000, 261.500, 255.500, 253.000, 254.000,
            257.500, 250.000, 247.000, 252.750, 250.500, 250.250, 251.000, 250.500, 249.500, 245.250,
            240.000, 241.250
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, closing price, D3…D44, 42 entries.
        /// </summary>
        private readonly List<double> bookClose = new List<double>
        {
            272.750, 270.750, 270.000, 269.250, 269.750, 270.000, 266.500, 263.250, 260.250, 263.000,
            266.500, 267.000, 265.750, 268.500, 264.250, 264.000, 266.500, 265.250, 273.000, 276.750,
            273.000, 270.250, 266.750, 263.000, 265.500, 262.250, 262.750, 255.500, 253.000, 257.500,
            257.500, 250.000, 249.750, 253.750, 251.250, 250.500, 253.000, 251.500, 250.000, 245.750,
            242.750, 243.500
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, trueRange1, E4…E44, 42 entries.
        /// </summary>
        private readonly List<double> bookTr1 = new List<double>
        {
            double.NaN,
            3.000, 2.250, 2.750, 1.000, 2.500, 3.500, 3.500, 4.250, 3.500, 6.500,
            2.250, 2.000, 4.000, 5.250, 2.750, 4.000, 2.250, 8.750, 4.500, 4.500,
            3.500, 6.250, 6.250, 3.000, 3.500, 3.250, 7.250, 4.500, 6.000, 2.250,
            7.500, 3.000, 4.500, 3.500, 3.000, 2.750, 2.500, 3.500, 6.250, 6.250,
            3.000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, +DM1, F3…F44, 42 entries.
        /// </summary>
        private readonly List<double> bookDmPlus1 = new List<double>
        {
            double.NaN,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 6.000,
            0.000, 0.250, 2.250, 0.000, 0.000, 4.000, 0.000, 8.000, 3.500, 0.000,
            0.000, 0.000, 1.500, 0.000, 0.000, 0.000, 0.000, 0.000, 1.500, 0.750,
            0.000, 0.000, 4.250, 0.000, 0.000, 0.000, 0.000, 1.250, 0.000, 0.000,
            0.000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, -DM1, G3…G44, 42 entries.
        /// </summary>
        private readonly List<double> bookDmMinus1 = new List<double>
        {
            double.NaN,
            1.750, 0.500, 1.750, 0.000, 1.000, 1.500, 3.500, 4.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 2.750, 1.750, 0.000, 2.000, 0.000, 0.000, 1.000,
            3.000, 5.500, 0.000, 0.000, 1.500, 0.500, 6.000, 2.500, 0.000, 0.000,
            7.500, 3.000, 0.000, 2.250, 0.250, 0.000, 0.500, 0.000, 4.250, 5.250,
            0.000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, trueRange14, H3…H44, 42 entries.
        /// </summary>
        private readonly List<double> bookTr14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            46.25000000000000, 45.69642857142860, 46.43239795918370, 45.36579810495630, 50.87538395460220, 51.74142795784490, 52.54561167514170, 52.29235369834590, 54.80718557703550, 57.14238660724720,
            56.06078756387240, 55.55644559502440, 54.83812805252260, 58.17111890591390, 58.51603898406290, 60.33632191377270, 58.27658463421750, 61.61397144605910, 60.21297348562630, 60.41204680808160,
            59.59690060750430, 58.33997913553970, 56.92283776871550, 55.35692078523580, 54.90285501486180, 57.23122251380020, 59.39327804852880, 58.15090104506240
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, +DM14, I3…I44, 42 entries.
        /// </summary>
        private readonly List<double> bookDmPlus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN,
             9.500000000000000,  8.821428571428570,  8.191326530612240, 11.606231778425700, 10.777215222823800,
            18.007414135479300, 20.221170268659300, 18.776800963755100, 17.435600894915400, 16.190200830992900,
            16.533757914493400, 15.352775206315300, 14.256148405864200, 13.237852091159600, 12.292291227505400,
            11.414270425540700, 12.098965395144900, 11.984753581206000, 11.128699753977000, 10.333792628692900,
            13.845664583786300, 12.856688542087300, 11.938353646223900, 11.085614100065100, 10.293784521489000,
            10.808514198525500, 10.036477470059400,  9.319586222197990,  8.653901492040990
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, -DM14, J3…J44, 42 entries.
        /// </summary>
        private readonly List<double> bookDmMinus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN,
            14.00000000000000, 15.75000000000000, 16.37500000000000, 15.20535714285710, 16.11926020408160,
            14.96788447521870, 13.89874986984590, 13.90598202199980, 15.91269759185690, 20.27607633529570,
            18.82778516848890, 17.48294337073970, 17.73416170140110, 16.96743586558680, 21.75547616090200,
            22.70151357798040, 21.07997689383900, 19.57426425856480, 25.67610252581010, 26.84209520253800,
            24.92480268807100, 25.39445963892310, 23.83056966471430, 22.12838611723470, 21.04778710886080,
            19.54437374394210, 22.39834704794630, 26.04846511595010, 24.18786046481080
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, +DI14, K3…K44, 42 entries.
        /// </summary>
        private readonly List<double> bookDiPlus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            19.07335907335910, 17.92552894545860, 24.99597756856770, 23.75625619522920, 35.39514149229390, 39.08119869659190, 35.73428943950800, 33.34254372158230, 29.54028866933220, 28.93431460630750,
            27.38594278366720, 25.66065602861570, 24.13986866670710, 21.13126145534000, 19.50622534216550, 20.05254051189220, 20.56529849240530, 18.06197440741150, 17.16206995019060, 22.91871458646570,
            21.57274692313180, 20.46341775078090, 19.47480929377990, 18.59529824902120, 19.68661592479970, 17.53671689896060, 15.69131478916380, 14.88180120430960
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, -DI14, L3…L44, 42 entries.
        /// </summary>
        private readonly List<double> bookDiMinus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            34.05405405405410, 35.83431027745210, 32.74730104661700, 35.53174611144020, 29.42068110694750, 26.86193717183370, 26.46459252957640, 30.43025694282390, 36.99528834005940, 32.94889535835560,
            31.18568990994040, 31.92097966574990, 30.94094650593430, 37.39910211472700, 38.79536956382720, 34.93745761295260, 33.58855770533880, 41.67253290641830, 44.57859103893210, 41.25800068859230,
            42.61036963342590, 40.84775143533960, 38.87435515275090, 38.02196150056530, 35.59810093418940, 39.13658675130580, 43.85759798384350, 41.59498826349590
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, dx14, O3…O44, 42 entries.
        /// </summary>
        private readonly List<double> bookDx14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            28.197674418604700, 33.312564901350000, 13.423767517092300, 19.861505630265500,  9.217595558860270, 18.529997646971100, 14.903317578182700,  4.566659686288260, 11.204531478963300,  6.487350533917930,
             6.487350533917930, 10.872083714959100, 12.347453133927600, 27.793848640479900, 33.085105566604500, 27.068408089898400, 24.048627609045600, 39.525827801613900, 44.405940347110300, 28.576230527731600,
            32.777502619019700, 33.247341316683500, 33.247341316683500, 34.312263322998500, 28.780983087919200, 38.112953473894800, 47.299407970798500, 47.299407970798500
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (Wilder's book example), test_ADX.xsl, adx14, P3…P44, 42 entries.
        /// </summary>
        private readonly List<double> bookAdx14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            15.51469292669860, 16.76972240097760, 17.50534280732910, 17.97272029316600, 19.51222797234080, 21.29035028482440, 21.81077030217490, 22.59410832480670, 23.35505353851210, 24.06164552266720,
            24.79383250840520, 25.07862897837050, 26.00965215662220, 27.53034900049190, 28.94242464122810
        };
        #endregion

        #region Test data (from TASC magazine article)
        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, high price, B4…B65, 63 entries.
        /// </summary>
        private readonly List<double> tascHigh = new List<double>
        {
            417.270, 419.790, 419.440, 417.960, 420.230, 420.500, 417.620, 415.360, 420.440, 421.180,
            420.850, 419.450, 418.860, 416.390, 418.130, 419.780, 417.270, 416.840, 416.410, 417.830,
            412.170, 412.630, 409.950, 413.850, 416.170, 414.550, 415.290, 413.770, 414.380, 418.080,
            417.770, 413.840, 413.270, 408.700, 413.900, 414.260, 412.940, 412.270, 415.350, 415.990,
            416.070, 413.740, 413.780, 413.270, 409.330, 407.510, 405.640, 409.160, 407.020, 404.720,
            406.690, 406.400, 409.720, 410.840, 410.570, 411.300, 411.300, 411.430, 409.870, 409.440,
            407.860, 404.300, 405.210
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, low price, C4…C65, 63 entries.
        /// </summary>
        private readonly List<double> tascLow = new List<double>
        {
            411.040, 416.160, 416.920, 415.200, 415.020, 415.850, 413.310, 413.540, 414.320, 418.790,
            415.370, 416.000, 415.800, 411.320, 412.490, 414.360, 414.290, 414.480, 414.540, 409.170,
            409.260, 408.640, 407.450, 409.280, 413.180, 411.930, 408.040, 411.070, 412.240, 413.360,
            412.070, 411.200, 406.340, 406.540, 408.260, 409.720, 410.340, 408.020, 410.450, 413.470,
            411.800, 411.520, 411.880, 409.330, 405.420, 403.650, 404.250, 405.210, 402.640, 401.940,
            403.920, 403.550, 406.390, 408.230, 409.120, 408.530, 408.870, 407.990, 407.520, 406.750,
            402.870, 402.970, 402.220
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, closing price, D4…D65, 63 entries.
        /// </summary>
        private readonly List<double> tascClose = new List<double>
        {
            417.260, 419.340, 417.960, 417.400, 418.100, 417.610, 415.100, 414.340, 420.440, 420.770,
            418.210, 418.860, 416.360, 412.640, 418.130, 414.960, 415.480, 414.990, 414.960, 410.340,
            411.620, 408.780, 409.530, 413.850, 413.840, 413.820, 411.090, 413.770, 413.760, 417.130,
            413.690, 412.480, 407.380, 408.260, 413.900, 411.460, 412.270, 410.450, 415.350, 413.860,
            412.700, 412.450, 412.850, 409.330, 406.510, 404.440, 405.210, 406.890, 404.030, 403.890,
            405.840, 406.390, 409.580, 409.150, 409.800, 411.300, 409.910, 408.880, 407.520, 407.860,
            403.500, 403.000, 403.690
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, trueRange1, E4…E65, 63 entries.
        /// </summary>
        private readonly List<double> tascTr1 = new List<double>
        {
            double.NaN,
            3.630, 2.520, 2.760, 5.210, 4.650, 4.310, 1.820, 6.120, 2.390, 5.480,
            3.450, 3.060, 5.070, 5.640, 5.420, 2.980, 2.360, 1.870, 8.660, 2.910,
            3.990, 2.500, 4.570, 2.990, 2.620, 7.250, 2.700, 2.140, 4.720, 5.700,
            2.640, 6.930, 2.160, 5.640, 4.540, 2.600, 4.250, 4.900, 2.520, 4.270,
            2.220, 1.900, 3.940, 3.910, 3.860, 1.390, 3.950, 4.380, 2.780, 2.800,
            2.850, 3.330, 2.610, 1.450, 2.770, 2.430, 3.440, 2.350, 2.690, 4.990,
            1.330, 2.990
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, +DM1, F4…F65, 63 entries.
        /// </summary>
        private readonly List<double> tascDmPlus1 = new List<double>
        {
            double.NaN,
            2.520, 0.000, 0.000, 2.270, 0.270, 0.000, 0.000, 5.080, 0.740, 0.000,
            0.000, 0.000, 0.000, 1.740, 1.650, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 3.900, 2.320, 0.000, 0.000, 0.000, 0.610, 3.700, 0.000,
            0.000, 0.000, 0.000, 5.200, 0.360, 0.000, 0.000, 3.080, 0.640, 0.000,
            0.000, 0.040, 0.000, 0.000, 0.000, 0.000, 3.520, 0.000, 0.000, 1.970,
            0.000, 3.320, 1.120, 0.000, 0.730, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.910
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, -DM1, G4…G65, 63 entries.
        /// </summary>
        private readonly List<double> tascDmMinus1 = new List<double>
        {
            double.NaN,
            0.000, 0.000, 1.720, 0.000, 0.000, 2.540, 0.000, 0.000, 0.000, 3.420,
            0.000, 0.200, 4.480, 0.000, 0.000, 0.070, 0.000, 0.000, 5.370, 0.000,
            0.620, 1.190, 0.000, 0.000, 1.250, 3.890, 0.000, 0.000, 0.000, 1.290,
            0.870, 4.860, 0.000, 0.000, 0.000, 0.000, 2.320, 0.000, 0.000, 1.670,
            0.280, 0.000, 2.550, 3.910, 1.770, 0.000, 0.000, 2.570, 0.700, 0.000,
            0.370, 0.000, 0.000, 0.000, 0.000, 0.000, 0.880, 0.470, 0.770, 3.880,
            0.000, 0.000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, trueRange14, H4…H65, 63 entries.
        /// </summary>
        private readonly List<double> tascTr14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            56.11000000000000, 57.52214285714280, 56.39341836734680, 54.72531705539340, 52.68636583715110, 57.58305399164020, 56.37997870652310, 56.34283737034290, 54.81834898674700, 55.47275263055080,
            54.50041315694000, 53.22752650287290, 56.67556032409630, 55.32730601523220, 53.51535558557280, 54.41283018660330, 56.22619945898870, 54.85004235477520, 57.86218218657700, 55.88916917325000,
            57.53708566087500, 57.96729382795530, 56.42677284024430, 56.64628906594110, 57.50012556123110, 55.91297373542880, 56.18918989718390, 54.39567633309940, 52.41027088073510, 52.60668010353970,
            52.75906009614400, 52.85055580356230, 50.46551610330780, 50.81083638164300, 51.56149092581140, 50.65852728825350, 49.84006105337820, 49.13005669242260, 48.95076692867820, 48.06428357662970,
            46.08112046401330, 45.55961185944090, 44.73535386948090, 44.97997145023220, 44.11711634664420, 43.65589375045540, 45.52761562542280, 43.60564308074980, 43.48095428926760
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, +dm14, I4…I65, 63 entries.
        /// </summary>
        private readonly List<double> tascDmPlus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN,
            10.880000000000100, 11.842857142857200, 12.646938775510200, 11.743586005830900, 10.904758433985900,
            10.125847117272600,  9.402572323181690,  8.730960014383000,  8.107320013355640,  7.528225726687380,
            10.890495317638300, 12.432602794949900, 11.544559738167700, 10.719948328298600,  9.954237733420130,
             9.853220752461560, 12.849419270142900, 11.931603607989800, 11.079346207419100, 10.287964335460600,
             9.553109740070560, 14.070744758636900, 13.425691561591500, 12.466713592906300, 11.576234050555900,
            13.829360189801900, 13.481548747673200, 12.518580979982300, 11.624396624269300, 10.834082579678600,
            10.060219538272900,  9.341632428396310,  8.674372969225140,  8.054774899994780, 10.999433835709500,
            10.213759990301700,  9.484205705280110, 10.776762440617200, 10.006993694858800, 12.612208430940400,
            12.831336400158900, 11.914812371576100, 11.793754345035000, 10.951343320389600, 10.169104511790400,
             9.442739903805340,  8.768258482104960,  8.141954304811750,  7.560386140182340,  7.930358558740710
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, -dm14, J4…J65, 63 entries.
        /// </summary>
        private readonly List<double> tascDmMinus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN,
            12.360000000000100, 11.477142857142900, 10.657346938775600,  9.966107871720170,  9.254243023740160,
             8.593225664901570, 13.349423831694300, 12.395893558001900, 12.130472589573200, 12.454010261746500,
            11.564438100193200, 10.738406807322200, 11.221377749656400, 14.309850767538000, 13.287718569856800,
            12.338595814867000, 11.457267542376500, 11.928891289349600, 11.946827625824600, 15.953482795408600,
            14.813948310022300, 13.755809145020700, 12.773251348947800, 11.860876252594400, 13.333670805980500,
            12.381265748410400, 11.496889623524000, 12.345683221843700, 11.743848705997800, 10.905002369855100,
            12.676073629151100, 15.680639798497500, 16.330594098604800, 15.164123091561600, 14.080971442164400,
            15.645187767724000, 15.227674355743700, 14.139983330333500, 13.499984521024000, 12.535699912379400,
            11.640292775780900, 10.808843291796500, 10.036783056668200,  9.319869981191890,  9.534164982535320,
             9.323153198068540,  9.427213683920770, 12.633841277926400, 11.731424043788800, 10.893465183518200
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, +di14, K4…K65, 63 entries.
        /// </summary>
        private readonly List<double> tascDiPlus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            21.10649998727000, 21.98620939230150, 20.82439111836280, 19.92635040003140, 19.21910337974480, 16.32871421607250, 15.48592286604190, 14.38926470824680, 13.73303987777420, 19.63215236526870,
            22.81194228592140, 21.68907799528240, 18.91458728770770, 17.99154603818880, 18.41195044795310, 23.61468651065770, 21.22071867349440, 20.19933938383650, 17.78011811287550, 17.09295357470250,
            24.45508770042720, 23.16080443816880, 22.09361437026030, 20.43599720553660, 24.05100868010320, 24.11166469425460, 22.27934056869130, 21.37007462336840, 20.67167827529950, 19.12346401345340,
            17.70621465085400, 16.41302127732870, 15.96094823147330, 21.64781101631960, 19.80889188211720, 18.72183463074990, 21.62269108995550, 20.36837400271560, 25.76508852111860, 26.69619818571040,
            25.85616897245570, 25.88642410172570, 24.48028767659040, 22.60807240182870, 21.40380125847370, 20.08493637130840, 17.88355087997460, 17.33809114151090, 18.23869482252410
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, -di14, L4…L65, 63 entries.
        /// </summary>
        private readonly List<double> tascDiMinus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            20.45471904677050, 18.52738164717420, 17.67246632718900, 16.91035067804710, 16.31015069716990, 23.18290348690490, 21.98633955242640, 21.52975099539140, 22.71868907390380, 20.84706013637450,
            19.70334936067330, 21.08190721402530, 25.24871511760610, 24.01656528550030, 23.05617832462530, 21.05618748939350, 21.21589473258020, 21.78089042949400, 27.57151941481660, 26.50593760680310,
            23.90772662017980, 22.03527283308810, 21.01994435544800, 23.53847185021940, 21.53258906404620, 20.56211439929030, 21.97163412470280, 21.58967310946320, 20.80699486303080, 24.09593915487970,
            29.72122659107700, 30.89956926716770, 30.04848510915690, 27.71253623223480, 30.34277614321690, 30.05944935804460, 28.37071831671650, 27.47805606156790, 25.60879164701150, 24.21817597098380,
            23.45612082118880, 22.03000123801180, 20.83334359751210, 21.19646739456990, 21.13273479801610, 21.59436647387950, 27.74984172654900, 26.90345380772010, 25.05341789659620
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, dx14, O4…O65, 63 entries.
        /// </summary>
        private readonly List<double> tascDx14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            1.5682430776770000,  8.5374504120288100,  8.1874859412401300,  8.1874859412401300,  8.1874859412401300, 17.3472757363612000, 17.3472757363612000, 19.8794041185860000, 24.6508175456955000,  3.0013127628323100,
            7.3117055178358700,  1.4195856800722600, 14.3425139989900000, 14.3425139989900000, 11.1995115625841000,  5.7274433924468000,  0.0113674031148879,  3.7673710998964500, 21.5899619853029000, 21.5899619853029000,
            1.1317808691173900,  2.4903302964227600,  2.4903302964227700,  7.0551724928143800,  5.5248373114215600,  7.9454892041519800,  0.6953664775081380,  0.5111726620474860,  0.3262317173935840, 11.5051915966061000,
           25.3334601774815000, 30.6188010910431000, 30.6188010910431000, 12.2866340169290000, 21.0040556493126000, 23.2417308447623000, 13.4978336281670000, 14.8593783262411000,  0.3042341236357510,  4.8670385441646900,
            4.8670385441647000,  8.0482273800081600,  8.0482273800081600,  3.2225084747376900,  0.6372556056224270,  3.6215339497822700, 21.6207699735302000, 21.6207699735302000, 15.7412578089828000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TASC magazine article), test_ADX.xsl, adx14, P4…P65, 63 entries.
        /// </summary>
        private readonly List<double> tascAdx14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            11.022182600653600, 11.034848955077200, 10.655748557746500,  9.895435618129930, 9.457716723970390, 10.324305671208400, 11.128995407929500, 10.414908655157200,  9.848867343819000,
             9.323257554719270,  9.161251478868920,  8.901507609765540,  8.833220580793140,  8.251945287701360, 7.699032957297510,  7.172404297304370,  7.481889104397350,  8.757001323903360, 10.318558450127600,
            11.768575781621600, 11.805579941286400, 12.462613920431100, 13.232550843597600, 13.251499613924000,13.366348093375200, 12.433339952679600, 11.892889852071400, 11.391043330078000, 11.152270762215900,
            10.930553377772500, 10.379978741841400,  9.684069946397220,  9.251031660924720, 10.134584397539400, 10.955026224395900, 11.296899909009200
        };
        #endregion

        #region Test data (TALib data)
        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, high price, 252 entries.
        /// </summary>
        private readonly List<double> taLibHigh = new List<double>
        {
             93.250000,  94.940000,  96.375000,  96.190000,  96.000000,  94.720000,  95.000000,  93.720000,  92.470000,  92.750000,
             96.250000,  99.625000,  99.125000,  92.750000,  91.315000,  93.250000,  93.405000,  90.655000,  91.970000,  92.250000,
             90.345000,  88.500000,  88.250000,  85.500000,  84.440000,  84.750000,  84.440000,  89.405000,  88.125000,  89.125000,
             87.155000,  87.250000,  87.375000,  88.970000,  90.000000,  89.845000,  86.970000,  85.940000,  84.750000,  85.470000,
             84.470000,  88.500000,  89.470000,  90.000000,  92.440000,  91.440000,  92.970000,  91.720000,  91.155000,  91.750000,
             90.000000,  88.875000,  89.000000,  85.250000,  83.815000,  85.250000,  86.625000,  87.940000,  89.375000,  90.625000,
             90.750000,  88.845000,  91.970000,  93.375000,  93.815000,  94.030000,  94.030000,  91.815000,  92.000000,  91.940000,
             89.750000,  88.750000,  86.155000,  84.875000,  85.940000,  99.375000, 103.280000, 105.375000, 107.625000, 105.250000,
            104.500000, 105.500000, 106.125000, 107.940000, 106.250000, 107.000000, 108.750000, 110.940000, 110.940000, 114.220000,
            123.000000, 121.750000, 119.815000, 120.315000, 119.375000, 118.190000, 116.690000, 115.345000, 113.000000, 118.315000,
            116.870000, 116.750000, 113.870000, 114.620000, 115.310000, 116.000000, 121.690000, 119.870000, 120.870000, 116.750000,
            116.500000, 116.000000, 118.310000, 121.500000, 122.000000, 121.440000, 125.750000, 127.750000, 124.190000, 124.440000,
            125.750000, 124.690000, 125.310000, 132.000000, 131.310000, 132.250000, 133.880000, 133.500000, 135.500000, 137.440000,
            138.690000, 139.190000, 138.500000, 138.130000, 137.500000, 138.880000, 132.130000, 129.750000, 128.500000, 125.440000,
            125.120000, 126.500000, 128.690000, 126.620000, 126.690000, 126.000000, 123.120000, 121.870000, 124.000000, 127.000000,
            124.440000, 122.500000, 123.750000, 123.810000, 124.500000, 127.870000, 128.560000, 129.630000, 124.870000, 124.370000,
            124.870000, 123.620000, 124.060000, 125.870000, 125.190000, 125.620000, 126.000000, 128.500000, 126.750000, 129.750000,
            132.690000, 133.940000, 136.500000, 137.690000, 135.560000, 133.560000, 135.000000, 132.380000, 131.440000, 130.880000,
            129.630000, 127.250000, 127.810000, 125.000000, 126.810000, 124.750000, 122.810000, 122.250000, 121.060000, 120.000000,
            123.250000, 122.750000, 119.190000, 115.060000, 116.690000, 114.870000, 110.870000, 107.250000, 108.870000, 109.000000,
            108.500000, 113.060000,  93.000000,  94.620000,  95.120000,  96.000000,  95.560000,  95.310000,  99.000000,  98.810000,
             96.810000,  95.940000,  94.440000,  92.940000,  93.940000,  95.500000,  97.060000,  97.500000,  96.250000,  96.370000,
             95.000000,  94.870000,  98.250000, 105.120000, 108.440000, 109.870000, 105.000000, 106.000000, 104.940000, 104.500000,
            104.440000, 106.310000, 112.870000, 116.500000, 119.190000, 121.000000, 122.120000, 111.940000, 112.750000, 110.190000,
            107.940000, 109.690000, 111.060000, 110.440000, 110.120000, 110.310000, 110.440000, 110.000000, 110.750000, 110.500000,
            110.500000, 109.500000 
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, low price, 252 entries.
        /// </summary>
        private readonly List<double> taLibLow = new List<double>
        {
             90.750000,  91.405000,  94.250000,  93.500000,  92.815000,  93.500000,  92.000000,  89.750000,  89.440000,  90.625000,
             92.750000,  96.315000,  96.030000,  88.815000,  86.750000,  90.940000,  88.905000,  88.780000,  89.250000,  89.750000,
             87.500000,  86.530000,  84.625000,  82.280000,  81.565000,  80.875000,  81.250000,  84.065000,  85.595000,  85.970000,
             84.405000,  85.095000,  85.500000,  85.530000,  87.875000,  86.565000,  84.655000,  83.250000,  82.565000,  83.440000,
             82.530000,  85.065000,  86.875000,  88.530000,  89.280000,  90.125000,  90.750000,  89.000000,  88.565000,  90.095000,
             89.000000,  86.470000,  84.000000,  83.315000,  82.000000,  83.250000,  84.750000,  85.280000,  87.190000,  88.440000,
             88.250000,  87.345000,  89.280000,  91.095000,  89.530000,  91.155000,  92.000000,  90.530000,  89.970000,  88.815000,
             86.750000,  85.065000,  82.030000,  81.500000,  82.565000,  96.345000,  96.470000, 101.155000, 104.250000, 101.750000,
            101.720000, 101.720000, 103.155000, 105.690000, 103.655000, 104.000000, 105.530000, 108.530000, 108.750000, 107.750000,
            117.000000, 118.000000, 116.000000, 118.500000, 116.530000, 116.250000, 114.595000, 110.875000, 110.500000, 110.720000,
            112.620000, 114.190000, 111.190000, 109.440000, 111.560000, 112.440000, 117.500000, 116.060000, 116.560000, 113.310000,
            112.560000, 114.000000, 114.750000, 118.870000, 119.000000, 119.750000, 122.620000, 123.000000, 121.750000, 121.560000,
            123.120000, 122.190000, 122.750000, 124.370000, 128.000000, 129.500000, 130.810000, 130.630000, 132.130000, 133.880000,
            135.380000, 135.750000, 136.190000, 134.500000, 135.380000, 133.690000, 126.060000, 126.870000, 123.500000, 122.620000,
            122.750000, 123.560000, 125.810000, 124.620000, 124.370000, 121.810000, 118.190000, 118.060000, 117.560000, 121.000000,
            121.120000, 118.940000, 119.810000, 121.000000, 122.000000, 124.500000, 126.560000, 123.500000, 121.250000, 121.060000,
            122.310000, 121.000000, 120.870000, 122.060000, 122.750000, 122.690000, 122.870000, 125.500000, 124.250000, 128.000000,
            128.380000, 130.690000, 131.630000, 134.380000, 132.000000, 131.940000, 131.940000, 129.560000, 123.750000, 126.000000,
            126.250000, 124.370000, 121.440000, 120.440000, 121.370000, 121.690000, 120.000000, 119.620000, 115.500000, 116.750000,
            119.060000, 119.060000, 115.060000, 111.060000, 113.120000, 110.000000, 105.000000, 104.690000, 103.870000, 104.690000,
            105.440000, 107.000000,  89.000000,  92.500000,  92.120000,  94.620000,  92.810000,  94.250000,  96.250000,  96.370000,
             93.690000,  93.500000,  90.000000,  90.190000,  90.500000,  92.120000,  94.120000,  94.870000,  93.000000,  93.870000,
             93.000000,  92.620000,  93.560000,  98.370000, 104.440000, 106.000000, 101.810000, 104.120000, 103.370000, 102.120000,
            102.250000, 103.370000, 107.940000, 112.500000, 115.440000, 115.500000, 112.250000, 107.560000, 106.560000, 106.870000,
            104.500000, 105.750000, 108.620000, 107.750000, 108.060000, 108.000000, 108.190000, 108.120000, 109.060000, 108.750000,
            108.560000, 106.620000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, closing price, 252 entries.
        /// </summary>
        private readonly List<double> taLibClose = new List<double>
        {
             91.500000,  94.815000,  94.375000,  95.095000,  93.780000,  94.625000,  92.530000,  92.750000,  90.315000,  92.470000,
             96.125000,  97.250000,  98.500000,  89.875000,  91.000000,  92.815000,  89.155000,  89.345000,  91.625000,  89.875000,
             88.375000,  87.625000,  84.780000,  83.000000,  83.500000,  81.375000,  84.440000,  89.250000,  86.375000,  86.250000,
             85.250000,  87.125000,  85.815000,  88.970000,  88.470000,  86.875000,  86.815000,  84.875000,  84.190000,  83.875000,
             83.375000,  85.500000,  89.190000,  89.440000,  91.095000,  90.750000,  91.440000,  89.000000,  91.000000,  90.500000,
             89.030000,  88.815000,  84.280000,  83.500000,  82.690000,  84.750000,  85.655000,  86.190000,  88.940000,  89.280000,
             88.625000,  88.500000,  91.970000,  91.500000,  93.250000,  93.500000,  93.155000,  91.720000,  90.000000,  89.690000,
             88.875000,  85.190000,  83.375000,  84.875000,  85.940000,  97.250000,  99.875000, 104.940000, 106.000000, 102.500000,
            102.405000, 104.595000, 106.125000, 106.000000, 106.065000, 104.625000, 108.625000, 109.315000, 110.500000, 112.750000,
            123.000000, 119.625000, 118.750000, 119.250000, 117.940000, 116.440000, 115.190000, 111.875000, 110.595000, 118.125000,
            116.000000, 116.000000, 112.000000, 113.750000, 112.940000, 116.000000, 120.500000, 116.620000, 117.000000, 115.250000,
            114.310000, 115.500000, 115.870000, 120.690000, 120.190000, 120.750000, 124.750000, 123.370000, 122.940000, 122.560000,
            123.120000, 122.560000, 124.620000, 129.250000, 131.000000, 132.250000, 131.000000, 132.810000, 134.000000, 137.380000,
            137.810000, 137.880000, 137.250000, 136.310000, 136.250000, 134.630000, 128.250000, 129.000000, 123.870000, 124.810000,
            123.000000, 126.250000, 128.380000, 125.370000, 125.690000, 122.250000, 119.370000, 118.500000, 123.190000, 123.500000,
            122.190000, 119.310000, 123.310000, 121.120000, 123.370000, 127.370000, 128.500000, 123.870000, 122.940000, 121.750000,
            124.440000, 122.000000, 122.370000, 122.940000, 124.000000, 123.190000, 124.560000, 127.250000, 125.870000, 128.860000,
            132.000000, 130.750000, 134.750000, 135.000000, 132.380000, 133.310000, 131.940000, 130.000000, 125.370000, 130.130000,
            127.120000, 125.190000, 122.000000, 125.000000, 123.000000, 123.500000, 120.060000, 121.000000, 117.750000, 119.870000,
            122.000000, 119.190000, 116.370000, 113.500000, 114.250000, 110.000000, 105.060000, 107.000000, 107.870000, 107.000000,
            107.120000, 107.000000,  91.000000,  93.940000,  93.870000,  95.500000,  93.000000,  94.940000,  98.250000,  96.750000,
             94.810000,  94.370000,  91.560000,  90.250000,  93.940000,  93.620000,  97.000000,  95.000000,  95.870000,  94.060000,
             94.620000,  93.750000,  98.000000, 103.940000, 107.870000, 106.060000, 104.500000, 105.000000, 104.190000, 103.060000,
            103.420000, 105.270000, 111.870000, 116.000000, 116.620000, 118.280000, 113.370000, 109.000000, 109.700000, 109.250000,
            107.000000, 109.190000, 110.000000, 109.200000, 110.120000, 108.000000, 108.620000, 109.750000, 109.810000, 109.000000,
            108.750000, 107.870000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, trueRange1, 252 entries.
        /// </summary>
        private readonly List<double> taLibTrueRange1 = new List<double>
        {
            double.NaN,
            3.5350, 2.1250, 2.6900, 3.1850, 1.2200, 3.0000, 3.9700, 3.3100, 2.4350, 3.7800,
            3.5000, 3.0950, 9.6850, 4.5650, 2.3100, 4.5000, 1.8750, 2.7200, 2.5000, 2.8450,
            1.9700, 3.6250, 3.2200, 2.8750, 3.8750, 3.1900, 5.3400, 3.6550, 3.1550, 2.7500,
            2.1550, 1.8750, 3.4400, 2.1250, 3.2800, 2.3150, 3.5650, 2.3100, 2.0300, 1.9400,
            5.1250, 3.9700, 1.4700, 3.1600, 1.3150, 2.2200, 2.7200, 2.5900, 1.6550, 1.5000,
            2.5600, 5.0000, 1.9350, 1.8150, 2.5600, 1.8750, 2.6600, 3.1850, 2.1850, 2.5000,
            1.5000, 3.4700, 2.2800, 4.2850, 2.8750, 2.0300, 2.6250, 2.0300, 3.1250, 3.0000,
            3.8100, 4.1250, 3.3750, 3.3750,13.4350, 6.8100, 5.5000, 3.3750, 4.2500, 2.7800,
            3.7800, 2.9700, 2.2500, 2.5950, 3.0000, 4.1250, 2.4100, 2.1900, 6.4700,10.2500,
            5.0000, 3.8150, 1.8150, 2.8450, 1.9400, 2.0950, 4.4700, 2.5000, 7.7200, 5.5050,
            2.5600, 4.8100, 5.1800, 3.7500, 3.5600, 5.6900, 4.4400, 4.3100, 3.6900, 3.9400,
            2.0000, 3.5600, 5.6300, 3.0000, 1.6900, 5.0000, 4.7500, 2.4400, 2.8800, 3.1900,
            2.5000, 2.7500, 7.6300, 3.3100, 2.7500, 3.0700, 2.8700, 3.3700, 3.5600, 3.3100,
            3.4400, 2.3100, 3.6300, 2.1200, 5.1900, 8.5700, 2.8800, 5.5000, 2.8200, 2.3700,
            3.5000, 2.8800, 3.7600, 2.3200, 4.1900, 4.9300, 3.8100, 6.4400, 6.0000, 3.3200,
            3.5600, 4.4400, 2.8100, 3.3800, 4.5000, 2.0000, 6.1300, 3.6200, 3.3100, 3.1200,
            3.4400, 3.1900, 3.8100, 2.4400, 2.9300, 3.1300, 3.9400, 3.0000, 3.8800, 4.3100,
            3.2500, 5.7500, 3.3100, 3.5600, 1.6200, 3.0600, 2.8200, 7.6900, 5.5100, 3.8800,
            2.8800, 6.3700, 4.5600, 5.4400, 3.0600, 3.5000, 2.6300, 5.5600, 3.2500, 4.1900,
            3.6900, 4.1300, 5.3100, 3.5700, 4.8700, 5.8700, 2.5600, 5.0000, 4.3100, 3.0600,
            6.0600,18.0000, 3.6200, 3.0000, 2.1300, 2.7500, 2.3100, 4.0600, 2.4400, 3.1200,
            2.4400, 4.4400, 2.7500, 3.6900, 3.3800, 3.4400, 2.6300, 3.2500, 2.5000, 2.0000,
            2.2500, 4.6900, 7.1200, 4.5000, 3.8700, 4.2500, 1.8800, 1.6300, 2.3800, 2.1900,
            2.9400, 7.6000, 4.6300, 3.7500, 5.5000, 9.8700, 5.8100, 6.1900, 3.3200, 4.7500,
            3.9400, 2.4400, 2.6900, 2.0600, 2.3100, 2.4400, 1.8800, 1.6900, 1.7500, 1.9400,
            2.8800
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, +DM1, 252 entries.
        /// </summary>
        private readonly List<double> taLibDmPlus1 = new List<double>
        {
            double.NaN,
            1.6900, 1.4350, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2800, 3.5000,
            3.3750, 0.0000, 0.0000, 0.0000, 1.9350, 0.0000, 0.0000, 1.3150, 0.2800, 0.0000,
            0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 4.9650, 0.0000, 1.0000, 0.0000,
            0.0950, 0.1250, 1.5950, 1.0300, 0.0000, 0.0000, 0.0000, 0.0000, 0.7200, 0.0000,
            4.0300, 0.9700, 0.5300, 2.4400, 0.0000, 1.5300, 0.0000, 0.0000, 0.5950, 0.0000,
            0.0000, 0.0000, 0.0000, 0.0000, 1.4350, 1.3750, 1.3150, 1.4350, 1.2500, 0.0000,
            0.0000, 3.1250, 1.4050, 0.0000, 0.2150, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
            0.0000, 0.0000, 0.0000, 1.0650,13.4350, 3.9050, 2.0950, 2.2500, 0.0000, 0.0000,
            1.0000, 0.6250, 1.8150, 0.0000, 0.7500, 1.7500, 2.1900, 0.0000, 3.2800, 8.7800,
            0.0000, 0.0000, 0.5000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 5.3150, 0.0000,
            0.0000, 0.0000, 0.0000, 0.6900, 0.6900, 5.6900, 0.0000, 1.0000, 0.0000, 0.0000,
            0.0000, 2.3100, 3.1900, 0.5000, 0.0000, 4.3100, 2.0000, 0.0000, 0.2500, 1.3100,
            0.0000, 0.6200, 6.6900, 0.0000, 0.9400, 1.6300, 0.0000, 2.0000, 1.9400, 1.2500,
            0.5000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
            1.3800, 2.1900, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 2.1300, 3.0000, 0.0000,
            0.0000, 1.2500, 0.0600, 0.6900, 3.3700, 0.6900, 0.0000, 0.0000, 0.0000, 0.5000,
            0.0000, 0.4400, 1.8100, 0.0000, 0.4300, 0.3800, 2.5000, 0.0000, 3.0000, 2.9400,
            1.2500, 2.5600, 1.1900, 0.0000, 0.0000, 1.4400, 0.0000, 0.0000, 0.0000, 0.0000,
            0.0000, 0.0000, 0.0000, 1.8100, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 3.2500,
            0.0000, 0.0000, 0.0000, 1.6300, 0.0000, 0.0000, 0.0000, 1.6200, 0.1300, 0.0000,
            4.5600, 0.0000, 1.6200, 0.5000, 0.8800, 0.0000, 0.0000, 3.6900, 0.0000, 0.0000,
            0.0000, 0.0000, 0.0000, 1.0000, 1.5600, 1.5600, 0.4400, 0.0000, 0.1200, 0.0000,
            0.0000, 3.3800, 6.8700, 3.3200, 1.4300, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000,
            1.8700, 6.5600, 3.6300, 2.6900, 1.8100, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
            1.7500, 1.3700, 0.0000, 0.0000, 0.1900, 0.1300, 0.0000, 0.7500, 0.0000, 0.0000,
            0.0000
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, -DM1, 252 entries.
        /// </summary>
        private readonly List<double> taLibDmMinus1 = new List<double>
        {
            double.NaN,
            0.0000, 0.0000, 0.7500, 0.6850, 0.0000, 1.5000, 2.2500, 0.3100, 0.0000, 0.0000,
            0.0000, 0.2850, 7.2150, 2.0650, 0.0000, 2.0350, 0.1250, 0.0000, 0.0000, 2.2500,
            0.9700, 1.9050, 2.3450, 0.7150, 0.6900, 0.0000, 0.0000, 0.0000, 0.0000, 1.5650,
            0.0000, 0.0000, 0.0000, 0.0000, 1.3100, 1.9100, 1.4050, 0.6850, 0.0000, 0.9100,
            0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.7500, 0.4350, 0.0000, 1.0950,
            2.5300, 2.4700, 0.6850, 1.3150, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1900,
            0.9050, 0.0000, 0.0000, 1.5650, 0.0000, 0.0000, 1.4700, 0.5600, 1.1550, 2.0650,
            1.6850, 3.0350, 0.5300, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 2.5000, 0.0300,
            0.0000, 0.0000, 0.0000, 2.0350, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
            0.0000, 2.0000, 0.0000, 1.9700, 0.2800, 1.6550, 3.7200, 0.3750, 0.0000, 0.0000,
            0.0000, 3.0000, 1.7500, 0.0000, 0.0000, 0.0000, 1.4400, 0.0000, 3.2500, 0.7500,
            0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.2500, 0.0000, 0.0000,
            0.9300, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1800, 0.0000, 0.0000, 0.0000,
            0.0000, 0.0000, 1.6900, 0.0000, 1.6900, 7.6300, 0.0000, 3.3700, 0.8800, 0.0000,
            0.0000, 0.0000, 1.1900, 0.2500, 2.5600, 3.6200, 0.1300, 0.0000, 0.0000, 0.0000,
            2.1800, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 3.0600, 2.2500, 0.1900, 0.0000,
            1.3100, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.2500, 0.0000, 0.0000,
            0.0000, 0.0000, 0.0000, 2.3800, 0.0600, 0.0000, 2.3800, 5.8100, 0.0000, 0.0000,
            1.8800, 2.9300, 1.0000, 0.0000, 0.0000, 1.6900, 0.3800, 4.1200, 0.0000, 0.0000,
            0.0000, 4.0000, 4.0000, 0.0000, 3.1200, 5.0000, 0.3100, 0.0000, 0.0000, 0.0000,
            0.0000,18.0000, 0.0000, 0.0000, 0.0000, 1.8100, 0.0000, 0.0000, 0.0000, 2.6800,
            0.1900, 3.5000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.8700, 0.0000, 0.8700,
            0.3800, 0.0000, 0.0000, 0.0000, 0.0000, 4.1900, 0.0000, 0.7500, 1.2500, 0.0000,
            0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 3.2500, 4.6900, 1.0000, 0.0000, 2.3700,
            0.0000, 0.0000, 0.8700, 0.0000, 0.0000, 0.0000, 0.0700, 0.0000, 0.3100, 0.1900,
            1.9400
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, trueRange14, 252 entries.
        /// </summary>
        private readonly List<double> taLibTrueRange14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            50.09500000000000, 48.82678571428570, 49.83915816326530, 48.15421829446060, 47.43463127342770, 46.54644332532580, 46.06669737351680, 44.74621898969410, 45.17506049043030, 45.16827045539960,
            44.81696542287100, 45.49075360695170, 45.43141406359800, 47.52631305905530, 47.78657641197990, 47.52824952540990, 46.88337455930920, 45.68956209078710, 44.30102194144520, 44.57666323134190,
            43.51761585767470, 43.68921472498360, 42.88355653034190, 43.38544534960320, 42.59648496748870, 41.58387889838240, 40.55360183421220, 42.78191598891130, 43.69606484684620, 42.04491735778580,
            42.20170897508680, 40.50230119115200, 39.82927967749830, 39.70433112910560, 39.45830747702660, 38.29485694295330, 37.05951001845660, 36.97240215999540, 39.33151629142430, 38.45712227060830,
            37.52518496556480, 37.40481461088160, 36.60804213867580, 36.65318198591320, 37.22009755834800, 36.74651916132320, 36.62176779265720, 35.50592723603890, 36.43978957632180, 36.11694746372740,
            37.82216550203260, 37.99558225188740, 37.31161209103830, 37.27149694167840, 36.63924716012990, 37.14715807726350, 37.49378964317330, 38.62566181151800, 39.99168596783820, 40.51013697013550,
            40.99155575798290, 51.49858748955560, 54.63011695458730, 56.22796574354540, 55.58668247614930, 55.86620515642430, 54.65576193096540, 54.53177893589650, 53.60665186904670, 52.02760530697200,
            50.90634778504540, 50.27018008611360, 50.80445293710550, 49.58556344159790, 48.23373748148380, 51.25847051852070, 57.84715119576920, 58.71521182464280, 58.33626812288260, 55.98439182839100,
            54.83050669779160, 52.85404193366370, 51.17375322411630, 51.98848513667940, 50.77502191263090, 54.86823463315720, 56.45407501650310, 54.98164108675290, 55.86438100912770, 57.05406807990430,
            56.72877750276830, 56.23672196685630, 57.90981325493800, 58.21339802244240, 58.36529816369650, 57.88634829486100, 57.69160913094240, 55.57077990730370, 55.16143848535340, 56.85133573639960,
            55.79052604094250, 53.49548846658940, 54.67438214754730, 55.51906913700820, 53.99342134150760, 53.01674838854280, 52.41983778936120, 51.17556366154970, 50.27016625715330, 54.30944009592800,
            53.74019437479030, 52.65160906230530, 51.96077984356920, 51.11929556902850, 50.83791731409790, 50.76663750594810, 50.45044911266610, 50.28684560461850, 49.00492806143150, 49.13457605704350,
            47.74496348154040, 49.52460894714460, 54.55713687949140, 53.54019853095630, 55.21589863588800, 54.09190587618170, 52.59819831359730, 52.34118414834040, 51.48252813774460, 51.56520469933430,
            50.20197579223900, 50.80612037850760, 52.10711178004280, 52.19517522432550, 54.90694842258790, 56.98502353526020, 56.23466471131300, 55.77790294621930, 56.23376702148930, 55.02706937709720,
            54.47656442159030, 55.08538124861950, 53.15071115943240, 55.48423179090150, 55.14107237726570, 54.51242435031820, 53.73867975386690, 53.34020262859070, 52.72018815511990, 52.76446042975420,
            51.43557039905750, 50.69160108483910, 50.20077243592200, 50.55500297621330, 49.94393133505520, 50.25650766826550, 50.97675712053230, 50.58556018335140, 52.72230588454060, 52.26642689278770,
            52.09311068616000, 49.99217420857710, 49.48130462225020, 48.76692572066090, 52.97357388347080, 54.69974717750860, 54.67262237911510, 53.64743506632120, 56.18547541872680, 56.73222717453210,
            58.11992523349410, 57.02850200253020, 56.45503757377800, 55.05253488993670, 56.68021096922700, 55.88162447142500, 56.08007986632330, 55.76435987587160, 55.91119131330930, 57.22753479093010,
            56.70985373443510, 57.52914989626120, 59.28992490367110, 57.61493026769460, 58.49957810571640, 58.63103681245090, 57.50310561156160, 59.45574092502150, 73.20890228751990, 71.59969498126850,
            69.48543105403510, 66.65218597874680, 64.64131555169350, 62.33407872657250, 61.94164453181740, 59.95724135097330, 58.79458125447520, 57.03496830772690, 57.40104200003220, 56.05096757145840,
            55.73732703064000, 55.13608938559430, 54.63779728662320, 53.36509748043590, 52.80330480326190, 51.53164017445750, 49.85080873342480, 48.54003668103730, 49.76289120382030, 53.32839897497600,
            54.01922761962060, 54.03071136107630, 54.42137483528510, 52.41413377562190, 50.30026707736320, 49.08739085755150, 47.77114865344070, 47.29892374962350, 51.52042919607900, 52.47039853921620,
            52.47251292927220, 54.22447629146700, 60.22129941350510, 61.72977802682620, 63.51050816776710, 62.29404329864090, 62.59446877730940, 62.06343529321590, 60.07033277227190, 58.46959471710960,
            56.35319509445890, 54.63796687342610, 53.17525495389570, 51.25702245718890, 49.28580656738970, 47.51539181257610, 46.06143525453500, 45.65133273635390
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, +DM14, 252 entries.
        /// </summary>
        private readonly List<double> taLibDmPlus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN,
           10.280000000000000,  9.545714285714290, 10.798877551020400, 10.027529154519000,  9.311277072053310,  9.961185852620930,  9.529672577433720,  8.848981679045600,  8.216911559113770,  7.629989304891360,
            7.084990068827690,  6.578919349625710,  6.108996538938160,  5.672639643299720, 10.232451097349700,  9.501561733253330,  9.822878752306670,  9.121244555713330,  8.564727087448090,  8.077960866916090,
            9.095963662136360,  9.476251971983770,  8.799376831127780,  8.170849914618660,  7.587217777860180,  7.045273650870170,  7.262039818665150,  6.743322688760500, 10.291656782420500, 10.526538440819000,
           10.304642837903400, 12.008596920910300, 11.150839997988100, 11.884351426703200, 11.035469181938700, 10.247221383228800, 10.110276998712500,  9.388114355947290,  8.717534759093910,  8.094853704872920,
            7.516649868810570,  6.979746306752670,  7.916192999127480,  8.725750642046950,  9.417482739043590, 10.179805400540500, 10.702676443359000,  9.938199554547660,  9.228328157794250, 11.694161860808900,
           12.263864585036900, 11.387874257534200, 10.789454667710400, 10.018779334302500,  9.303152238995170,  8.638641364781230,  8.021595553011140,  7.448624442081780,  6.916579839075940,  6.422538421999080,
            5.963785677570580,  6.602800986315530, 19.566172344435900, 22.073588605547600, 22.591903705151300, 23.228196297640500, 21.569039419237600, 20.028393746434900, 19.597794193118200, 18.822951750752600,
           19.293455197127400, 17.915351254475400, 17.385683307727200, 17.893848785746700, 18.805716729621900, 17.462451248934600, 19.495133302582200, 26.882623780969100, 24.962436368042800, 23.179405198896900,
           22.023733398975700, 20.450609584763100, 18.989851757280000, 17.633433774617200, 16.373902790716000, 15.204338305664800, 19.433314140974500, 18.045220273762000, 16.756275968493300, 15.559399113600900,
           14.448013462629400, 14.106012501013000, 13.788440179512100, 18.493551595261200, 17.172583624171100, 16.945970508158900, 15.735544043290400, 14.611576611626800, 13.567892567939200, 14.908757384515000,
           17.033846142763900, 16.317142846852200, 15.151632643505600, 18.379373168969500, 19.066560799757400, 17.704663599774700, 16.690044771219400, 16.807898716132300, 15.607334522122800, 15.112524913399800,
           20.723058848156900, 19.242840359002900, 18.808351761931200, 19.094898064650400, 17.730976774318300, 18.464478433295500, 19.085587116631600, 18.972330894015000, 18.117164401585400, 16.823081230043600,
           15.621432570754700, 14.505615958558000, 13.469500532946700, 12.507393352021900, 11.614008112591800, 10.784436104549500, 10.014119239938800,  9.298825008514630, 10.014623222192200, 11.489292992035600,
           10.668629206890200,  9.906584263540870,  9.198971101859380,  8.541901737440850,  7.931765899052220,  9.495211191977060, 11.816981821121600, 10.972911691041400, 10.189132284538500, 10.711337121357200,
           10.006241612688800,  9.981510068925310, 12.638545064002100, 12.425791845144800, 11.538235284777300, 10.714075621578900,  9.948784505751860,  9.738157041055300,  9.042574395265630,  8.836676224175230,
           10.015485065305600,  9.300093274926600,  9.065800898146130,  8.798243691135690, 10.669797713197400,  9.907669305111900, 12.199978640461000, 14.268551594713800, 14.499369337948600, 16.023700099523700,
           16.069150092414800, 14.921353657242300, 13.855542681725000, 14.305861061601800, 13.284013842916000, 12.335155711279100, 11.454073160473500, 10.635925077582500,  9.876216143469460,  9.170772133221640,
            8.515716980848670,  9.717451482216620,  9.023347804915440,  8.378822961707190,  7.780335607299540,  7.224597349635280,  6.708554681804190,  9.479372204532460,  8.802274189923000,  8.173540319214220,
            7.589716010698920,  8.677593438506130,  8.057765335755700,  7.482210668916000,  6.947767049707720,  8.071497974728600,  7.624962405105120,  7.080322233311900, 11.134584930932500, 10.339257435865900,
           11.220739047589700, 10.919257687047600, 11.019310709401400, 10.232217087301300,  9.501344438208310, 12.512676978336300, 11.618914337026600, 10.788991884381800, 10.018349606926000,  9.302753206431250,
            8.638270834543300,  9.021251489218780,  9.936876382846010, 10.787099498357000, 10.456592391331500,  9.709692934807830,  9.136143439464420,  8.483561765216960,  7.877593067701460, 10.694907848579900,
           16.800985859395600, 18.920915440867400, 18.999421480805400, 17.642319946462200, 17.382154236000600, 16.140571790572000, 14.987673805531100, 13.917125676564600, 14.793045271095700, 20.296399180303200,
           22.476656381710100, 23.561180925873600, 23.688239431168400, 21.996222328942100, 20.425063591160500, 18.966130477506200, 17.611406871970000, 16.353449238257900, 16.935345721239500, 17.095678169722400,
           15.874558300456500, 14.740661278995300, 13.877756901924200, 13.016488551786800, 12.086739369516300, 11.973400843122300, 11.118157925756400, 10.324003788202400,  9.586574946187900
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, -DM14, 252 entries.
        /// </summary>
        private readonly List<double> taLibDmMinus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN,
            12.995000000000000, 14.131785714285700, 13.122372448979600, 14.220060131195300, 13.329341550395700, 12.377245725367400, 11.493156744984000, 12.922216977485200, 12.969201479093400, 13.947829944872400,
            15.296556377381500, 14.918945207568600, 14.543306264170800, 13.504498673872900, 12.539891625739100, 11.644185081043500, 10.812457575254600, 11.605139177022200, 10.776200664377700, 10.006472045493600,
             9.291724042244060,  8.628029467798060,  9.321741648669630, 10.565902959478900, 11.216195605230400, 11.100038776285400, 10.307178863693600, 10.480951802001200,  9.732312387572540,  9.037147217031640,
             8.391636701529380,  7.792234079991570,  7.235645931420740,  6.718814079176400,  7.988898787806660,  7.853263160106190,  7.292315791527170,  7.866436092132370,  9.834547799837210, 11.602080099848800,
            11.458360092716800, 11.954905800379900, 11.100983957495600, 10.308056531960200,  9.571766779677320,  8.888069152557510,  8.253207070231970,  7.853692279501110,  8.197714259536750,  7.612163240998410,
             7.068437295212810,  8.128548916983320,  7.547938280055940,  7.008799831480520,  7.978171272089050,  7.968301895511260,  8.554137474403320, 10.008127654803100, 10.978261393745700, 13.229099865621000, 
            12.814164160933800, 11.898866720867100, 11.048947669376600, 10.259737121564000,  9.526898755737980,  8.846405987470980, 10.714519845508800,  9.979196999401000,  9.266397213729500,  8.604511698463110,
             7.989903720001460,  9.454196311429920,  8.778896574899210,  8.151832533834980,  7.569558781418200,  7.028876011316900,  6.526813439079980,  6.060612479145690,  5.627711587778140,  7.225732188651130,
             6.709608460890340,  8.200350713683890,  7.894611376992180,  8.985710564349880, 12.063874095467700, 11.577168802934300, 10.750228174153300,  9.982354733142360,  9.269329395060770, 11.607234438270700,
            12.528146264108500, 11.633278673815100, 10.802330197114000, 10.030735183034400, 10.754254098531900,  9.986093091493950, 12.522800727815800, 12.378314961543300, 11.494149607147300, 10.673138920922500,
             9.910771855142320,  9.202859579775010,  8.545512466933940,  7.935118719295800,  7.368324525060390,  8.092015630413220,  7.514014513955130,  6.977299191529760,  7.408920677849070,  6.879712058002710,
             6.388304053859660,  5.931996621441110,  5.508282577052460,  5.114833821548720,  4.929488548580960,  4.577382223682320,  4.250426350562150,  3.946824468379140,  3.664908434923490,  3.403129261000380,
             4.850048599500350,  4.503616556678900,  5.871929659773260, 13.082506112646600, 12.148041390314700, 14.650324148149400, 14.483872423281500, 13.449310107332900, 12.488645099666200, 11.596599021118600,
            11.958270519610200, 11.354108339638000, 13.103100601092400, 15.787164843871600, 14.789510212166400, 13.733116625583100, 12.752179723755800, 11.841309743487500, 13.175501904667000, 12.234394625762200,
            11.360509295350600, 10.549044345682700,  9.795541178133930,  9.095859665410080, 11.506155403595100, 12.934287160481100, 12.200409506161100, 11.328951684292400, 11.829740849700100, 10.984759360435800,
            10.200133691833200,  9.471552713845160,  8.795013234284790,  8.166798003264450,  7.583455288745560,  8.291779910978020,  7.699509917336730,  7.149544923241250,  6.638863143009730,  6.164658632794750,
             5.724325873309410,  7.695445453787310,  7.205770778516790,  6.691072865765590,  8.593139089639470, 13.789343440379500, 12.804390337495300, 11.889791027674200, 12.920520239983200, 14.927625937127200,
            14.861366941618100, 13.799840731502600, 12.814137822109500, 13.588842263387400, 12.998210673145400, 16.189767053635100, 15.033355121232600, 13.959544041144500, 12.962433752491300, 16.036545627313400,
            18.891078082505300, 17.541715362326300, 19.408735693588700, 23.022397429761000, 21.687940470492300, 20.138801865457200, 18.700316017924500, 17.364579159501300, 16.124252076679800, 32.972519785488400,
            30.617339800810700, 28.430386957895600, 26.399645032331600, 26.323956101450800, 24.443673522775800, 22.697696842577500, 21.076432782393400, 22.250973297936700, 20.851618062369800, 22.862216772200500,
            21.229201288471900, 19.712829767866800, 18.304770498733400, 16.997286891681000, 15.783194970846700, 16.525823901500500, 15.345407908536200, 15.119307343640700, 14.419356819095000, 13.389402760588200,
            12.433016849117600, 11.544944217037800, 10.720305344392200, 14.144569248364200, 13.134242873481000, 12.946082668232400, 13.271362477644400, 12.323408014955500, 11.443164585315800, 10.625795686364700,
             9.866810280195770,  9.162038117324650,  8.507606823230030, 11.149920621570700, 15.043497720030000, 14.968962168599300, 13.899750585127900, 15.276911257618800, 14.185703310646000, 13.172438788457000,
            13.101550303567200, 12.165725281883800, 11.296744904606400, 10.489834554277400,  9.810560657543280,  9.109806324861620,  8.769105873085790,  8.332741167865380,  9.677545370160700
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, +DI14, 252 entries.
        /// </summary>
        private readonly List<double> taLibDiPlus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            19.05522364650020, 22.11670785419090, 20.11978035758620, 19.33636844671700, 20.99981719094980, 20.47347100363450, 19.20906464662860, 18.36336509461560, 16.88982642648080, 15.68576790165920,
            14.67952880689320, 13.42909504582180, 12.48616130538830, 21.53007552812920, 19.88332801106740, 20.66745325231280, 19.45517924306970, 18.74547860719180, 18.23425400342490, 20.40521430446810,
            21.77566896811640, 20.14084456889050, 19.05357338735990, 17.48793337655480, 16.53956577930640, 17.46359409234340, 16.62817205812690, 24.05609132860710, 24.09035797093930, 24.50865285383940,
            28.45523845491510, 27.53137394678220, 29.83822836599620, 27.79411935200460, 25.96974385988290, 26.40113531112920, 25.33253772451870, 23.57849165810060, 20.58108730132500, 19.54553389595490,
            18.60016496429710, 21.16356699392530, 23.83561133641820, 25.69349297603400, 27.35029209577470, 29.12568778656980, 27.13741076295150, 25.99095102191110, 32.09173817075960, 33.95598312219940,
            30.10899589269230, 28.39660304764620, 26.85163886743150, 24.96050065698340, 23.57756240740020, 21.59410293602210, 19.86628855863870, 17.90669600129270, 16.05968407324500, 14.72171195562030,
            16.10771014717990, 37.99360972454650, 40.40553056823370, 40.17912333551700, 41.78734053360190, 38.60838472712570, 36.64461538699690, 35.93829978691120, 35.11308969031360, 37.08311209653530,
            35.19276482006510, 34.58448582826890, 35.22102444031580, 37.92579013803350, 36.20381119260810, 38.03299845932430, 46.47181965796660, 42.51442784979620, 39.73412414738380, 39.33905983382840,
            37.29786722103520, 35.92885437430480, 34.45796460812880, 31.49524889534370, 29.94452337573990, 35.41815090444110, 31.96442465577000, 30.47612919020430, 27.85209257229330, 25.32337123164460,
            24.86570859089050, 24.51857024603690, 31.93509105934530, 29.49936648183770, 29.03432526058680, 27.18351477819400, 25.32703946333510, 24.41551583506920, 27.02749927102350, 29.96208606556600,
            29.24715718736490, 28.32319711029190, 33.61606011270490, 34.34236397715080, 32.79040883109250, 31.48070237899800, 32.06400367675980, 30.49763091099920, 30.06261176080620, 38.15737892262070,
            35.80716553572750, 35.72227344405440, 36.74867490853040, 34.68548730366480, 36.32028888833950, 37.59474342651780, 37.60587116210990, 36.02764139161160, 34.32936624038000, 31.79315631546060,
            30.38145785610720, 27.19759089329120, 22.92531109110230, 21.69212746918880, 19.53139651980610, 18.51315659474360, 17.67898009181570, 19.13335241673110, 22.31687799265660, 20.68958955771950,
            19.73345492324700, 18.10602941796520, 16.39296718938940, 15.19635840853670, 17.29327792704440, 20.73699559641250, 19.51271826260920, 18.26732764471760, 19.04787405984010, 18.18421683356720,
            18.32257627643170, 22.94355558139810, 23.37841126503840, 20.79552138030930, 19.43029970160000, 18.25048991000120, 18.12131798856590, 16.95264350274280, 16.76146564229790, 18.98149812152310,
            18.08105403084440, 17.88422678339420, 17.52611217758870, 21.10532506192850, 19.83758394717680, 24.27542064998030, 27.99030852624950, 28.66305974549740, 30.39263899916450, 30.74468841227070,
            28.64362189299360, 27.71542326588360, 28.91164889611440, 27.23980166190380, 23.28548898440100, 20.93990146481540, 19.45384109039080, 18.40948431413370, 16.32231829467620, 15.01036959936500,
            16.71965585498820, 15.82252292812300, 14.84158601569850, 14.13256559912150, 12.74624287047500, 12.00493855584780, 16.90327871702080, 15.78476684663180, 14.61879120659790, 13.26235008798910,
            15.30173835246020, 14.00640431900310, 12.61970002672870, 12.05896981464090, 13.79753194141390, 13.00499329305030, 12.31293885436390, 18.72751858390610, 14.12295105212690, 15.67149001196900,
            15.71445628444950, 16.53255710610160, 15.82922160536570, 15.24261629001660, 20.20075035610160, 19.37866732228830, 18.35031673698770, 17.56527601255580, 16.20659291590220, 15.41145712343060,
            16.18529622753460, 18.02245406516310, 19.74292528992190, 19.59444072066950, 18.38841900328940, 17.72919202364710, 17.01790197744330, 16.22906286508620, 21.49173327726360, 31.50476328246680,
            35.02626060131780, 35.16411500458720, 32.41799752369260, 33.16310503272140, 32.08844153003670, 30.53263484511610, 29.13290986056760, 31.27564878516600, 39.39485655885770, 42.83683182797080,
            44.90194886917620, 43.68551077162930, 36.52565212501750, 33.08786171608180, 29.86298019755390, 28.27141398984170, 26.12602927654530, 27.28715489439020, 28.45943643184480, 27.15010832084870,
            26.15763179760630, 25.39947530272000, 24.47846947433050, 23.58065059204600, 24.29381129585600, 23.39906607444560, 22.41355209873950, 20.99955110084610
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, -DI14, 252 entries.
        /// </summary>
        private readonly List<double> taLibDiMinus14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            28.209972480857800, 26.875355928130000, 28.531902735220000, 27.680527319304400, 26.093268553140400, 24.691804408459800, 28.051103539525700, 28.983904722945200, 30.875066449168500, 33.865711976919200,
            33.288610834760200, 31.969807292769000, 29.725023867776600, 26.385155545639100, 24.367062793233100, 22.749538817906600, 24.753207903883400, 23.585694787279800, 22.587451952507200, 20.844368709300400,
            19.826521508016900, 21.336482487379200, 24.638588340971900, 25.852438565167400, 26.058579210837200, 24.786477684972700, 25.844687840178900, 22.748659480550300, 20.681833132357900, 19.958742290108100,
            18.464261920273400, 17.864777354925700, 16.869032364078200, 20.120975623111100, 19.902686309286100, 19.042546111062200, 21.226497836087600, 26.599699303493700, 29.498176510368900, 29.795157349758500,
            31.858352760553600, 29.677954757904700, 28.157901733482500, 26.114422435018000, 23.879757807254900, 22.459833634851400, 21.445420996514000, 23.088297920061100, 20.889701421175900, 19.570970947397200,
            21.491495288778500, 19.865304945237400, 18.784500156089300, 21.405556327863900, 21.747995696216700, 23.027703644546100, 26.692760988019600, 28.422196226219800, 33.079625290766800, 31.631994160820900,
            29.027604590367000, 21.454855769815900, 18.780368217210000, 16.943345948508900, 15.914614064738900, 19.178893242360600, 18.258270760190900, 16.992655282018900, 16.051201480522800, 15.357046846303300,
            18.571743452016500, 17.463427741577300, 16.045507947751600, 15.265650435400700, 14.572530304157300, 12.733141221452800, 10.476941999503300,  9.584759064798590, 12.386346300778900, 11.984784047413300,
            14.955817860450600, 14.936627527750100, 17.559217368710100, 23.204896360706500, 22.800913454759900, 19.592808564059200, 17.682257180237600, 16.858953664979100, 20.777522687263300, 21.958375074259100,
            20.506838303094700, 19.208676856166100, 17.321304661916000, 18.473847024676300, 17.109641183509500, 21.633426700242500, 21.456005731177000, 20.683801138512800, 19.348913324217300, 17.432786278048500,
            16.495380547266000, 15.974267572621600, 14.513412694599200, 13.271700407795100, 14.987039956648300, 14.172907132831500, 13.310417364446400, 14.477457887612300, 13.685477033853600, 11.762787542231800,
            11.038286501293000, 10.461755443284200,  9.843643295861240,  9.643107350578530,  9.003874402252430,  8.372479564091970,  7.823170135839790,  7.288006218840840,  6.944463333839190,  9.870948298952690,
             9.432652636586750, 11.856589652308200, 23.979458712329200, 22.689571058073000, 26.532800352953500, 26.776413566265600, 25.569906457910100, 23.860073674053900, 22.525309926682800, 23.190580914661900,
            22.616855532991400, 25.790397895910600, 30.297524281355600, 28.335014009635600, 25.011618784360500, 22.378124869712800, 21.056958024514200, 23.621364749712300, 21.756313463913800, 20.645310433484500,
            19.364371556261100, 17.782469606451900, 17.113335771041500, 20.737703365809000, 23.456720377121000, 22.380970304597800, 21.081559383634100, 22.177907594522900, 20.835963878040600, 19.331446979189300,
            18.414402018605200, 17.350040334226500, 16.268271596196700, 15.000405187027000, 16.602177060014700, 15.320423711412400, 14.025107376556900, 13.124028119777000, 11.692695395939400, 10.952204337693700,
            14.772482104494100, 14.413797544497500, 13.522426130124300, 17.620834126107000, 26.030608149476100, 23.408500035554400, 21.747248458702200, 24.084134169714300, 26.568478465079900, 26.195634618571100,
            23.743734487032400, 22.469707904200200, 24.070203204858200, 23.610557986352500, 28.563350024270100, 26.902144065120800, 24.892161484825900, 23.245014882884000, 28.682174803698000, 33.010469787874400,
            30.932393944219900, 33.737219702685200, 38.830201703182600, 37.642917156584700, 34.425550606644900, 31.894909308431800, 30.197637109899000, 27.119756352904300, 45.038948481965300, 42.761829933522200,
            40.915608533516700, 39.608070830189400, 40.723113192830400, 39.213980573929000, 36.643678116938700, 35.152439150790300, 37.845278974995800, 36.559357673115200, 39.828922917789100, 37.874816810980400,
            35.367375541762600, 33.199254250186300, 31.109026600240400, 29.575875836510800, 31.296949997871400, 29.778613404473800, 30.329111458332900, 29.706110264906400, 26.906400405369300, 23.314063591055300,
            21.371916493016400, 19.841133078464600, 25.990834099974500, 25.058589978243300, 25.737602244379700, 27.036194521230500, 25.796758843620300, 24.193287453833200, 20.624431613184900, 18.804527037890400,
            17.460642926848500, 15.689606253640900, 18.514912049656400, 24.369920321910900, 23.569268457209900, 22.313129553160900, 24.406168078475100, 22.856780717384200, 21.928359941660400, 22.407458726122100,
            21.588350512320900, 20.675631893068700, 19.726909750357300, 19.139934758671000, 18.483630398552100, 18.455295302363100, 18.090493971407400, 21.198823320341100
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, dx14, 252 entries.
        /// </summary>
        private readonly List<double> taLibDx14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN,
            19.3689005535696000,  9.7130998503806600, 17.2905063974605000, 17.7471496929783000, 10.8157095287173000,  9.3397712431434300, 18.7092835938902000, 22.4311553110723000, 29.2793287720686000, 36.6890032745911000,
            38.7946711439851000, 40.8395606322553000, 40.8395606322553000, 10.1326444821589000, 10.1326444821589000,  4.7955546119510500, 11.9842161244257000, 11.4341649237631000, 10.6639295128472000,  1.0646275010482200,
             4.6852039226580500,  2.8826301098588800, 12.7826473506586000, 19.2995694634555000, 22.3460750080392000, 17.3322394130484000, 21.6997767612528000,  2.7933742311496300,  7.6130400469284300, 10.2320150505838000,
            21.2938681246593000, 21.2938681246593000, 27.7669805490589000, 16.0140426161702000, 13.2259344626447000, 16.1927664523976000,  8.8189968692245400,  6.0209576859906500, 17.8059510670395000, 20.7731655050416000,
            26.2754206704072000, 16.7469176189106000,  8.3131339697192100,  0.8124809802600350,  6.7744112978396900, 12.9219478024900000, 11.7160518650264000,  5.9142166280538200, 21.1433227104852000, 26.8743335481008000,
            16.7004235940457000, 17.6770841792387000, 17.6770841792387000,  7.6671266877000600,  4.0365012318237000,  3.2127805178293200, 14.6619668911838000, 22.6974998091634000, 34.6361018048549000, 36.4809712576634000,
            28.6248019279665000, 27.8203210414220000, 36.5376935972833000, 40.6771235176730000, 44.8385616205920000, 33.6224376151175000, 33.4888489787486000, 35.7931280102919000, 37.2562343258967000, 41.4302048052794000,
            30.9144859726716000, 32.8948019476628000, 37.4035761720982000, 42.6011017155081000, 42.6011017155082000, 49.8360864090902000, 63.2057249549376000, 63.2057249549376000, 52.4703204162443000, 53.2974027621747000,
            42.7568875300255000, 41.2700834860402000, 32.4868564524372000, 15.1559972936640000, 13.5435600693504000, 28.7676173862113000, 28.7676173862113000, 28.7676173862113000, 14.5478631637740000,  7.1169032878241300,
             9.6068450774441100, 12.1432144526731000, 29.6688098742095000, 22.9826577193214000, 25.8423473229681000, 11.3691843648238000,  8.2744372797095400,  8.2744372797095400, 16.5570933953484000, 26.4359817169243000,
            27.8772828785245000, 27.8772828785245000, 39.6901239591527000, 44.2530244824417000, 37.2631216738646000, 37.9111212262017000, 41.3307451246211000, 35.6201031533738000, 37.4350861447272000, 52.8736044960360000,
            52.8736044960360000, 54.6953538037807000, 57.7456384433200000, 56.4926096764700000, 60.2689878927279000, 63.5719583678035000, 65.5587266984969000, 66.3493142968400000, 66.3493142968400000, 52.6165345910834000,
            52.6165345910834000, 39.2813292371374000,  2.2474209459819200,  2.2474209459819200, 15.1992313086169000, 18.2453861720155000, 18.2453861720155000, 10.9940558059780000,  0.4648121416401460,  5.6995935294201300,
             6.8084521191972100, 17.5056808678286000, 29.7802757134790000, 30.1820385419646000, 18.2445566761904000,  3.8063891636106400,  3.8063891636106500, 12.7815808967734000,  6.6376506148958300,  6.3382012945742100,
             2.7643397508718600, 12.6726974978298000, 15.4724751402168000,  0.1392090666055750,  9.3884365668920600, 10.1657197963870000,  7.5510819447335400, 13.3534129861646000, 10.8371723485473000,  0.9133958685408690,
             0.9133958685408750,  1.5160992206377700,  3.7220402946588300, 16.9084514640943000,  8.8787818518446900, 22.6160019643358000, 33.2382789735989000, 37.1862037283378000, 44.4333967449730000, 47.4675276003482000,
            31.9492964852446000, 31.5733960076196000, 36.2661911599917000, 21.4418885662951000,  5.5663755337796600,  5.5663755337796600,  5.5663755337796500, 13.3541224730898000, 23.8889480831878000, 27.1447456056352000,
            17.3590956483689000, 17.3590956483689000, 23.7167639268673000, 25.1118388910418000, 38.2891867128692000, 38.2891867128693000, 19.1142448296361000, 19.1142448296361000, 32.4782213721424000, 42.6775799548498000,
            33.8076109906405000, 41.3265976095972000, 50.9437351582267000, 51.4748008596843000, 42.7762340673126000, 42.0711737017397000, 42.0711737017397000, 18.3047689978627000, 52.2566004021269000, 46.3611171619619000,
            44.5013657146160000, 41.1030559727158000, 44.0192110127676000, 44.0192110127676000, 28.9261906620021000, 28.9261906620021000, 34.6912635963940000, 35.0932290292580000, 42.1559963363164000, 42.1559963363164000,
            37.2087006471159000, 29.6296251807658000, 22.3513570036971000, 20.2997170136863000, 25.9805477026455000, 25.3630351312637000, 28.1141481055518000, 29.3392763790860000, 11.1877601802003000, 14.9413990750095000,
            24.2106124910075000, 27.8573090025640000, 11.0037527631590000, 13.9200946536369000, 10.9826626051613000,  6.0734956092915200,  6.0734956092915200, 12.7681578403036000, 31.2739879417899000, 38.9873053291662000,
            44.0028311076014000, 47.1509041507628000, 32.7226661743566000, 15.1727774462412000, 11.7788636989788000, 11.7788636989787000,  3.4034957672375100,  8.8353140274169300, 12.9616235680799000,  9.5699806857578000,
             9.5699806857578000, 10.2524849037856000, 10.7488269692743000, 10.3947916371434000, 13.5823477682711000, 11.8118413695872000, 10.6731513188712000,  0.4722272415190610
        };

        /// <summary>
        /// Taken from TA-Lib Excel simulation (TALib data), test_ADX.xsl, adx14, 252 entries.
        /// </summary>
        private readonly List<double> taLibAdx14 = new List<double>
        {
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            22.99931036489480, 22.08026280184220, 20.84564078827850, 20.21268188371760, 19.58564495800660, 18.94837956906660, 17.67096870706530, 16.74341407960770, 15.75335808176850, 15.54116445811780,
            15.80962195849900, 16.27651146203760, 16.35192060139550, 16.73391032709960, 15.73815774881750, 15.15779219868250, 14.80595097381830, 15.26937362744980, 15.69969466296480, 16.56164365482870,
            16.52252929492450, 16.28705823547590, 16.28032310811320, 15.74737123390690, 15.05262740905570, 15.24929338462600, 15.64385567894140, 16.40325317833180, 16.42780063837310, 15.84818159061210,
            14.77420297558700, 14.20278928431930, 14.11130060704580, 13.94021141118730, 13.36692606953490, 13.92238297245990, 14.84752229929140, 14.97987239177380, 15.17253037659280, 15.35142707678180,
            14.80254847756160, 14.03354510286610, 13.26063334679200, 13.36072859996290, 14.02764082919150, 15.49967375602460, 16.99833786328450, 17.82879958219030, 18.54247968642120, 19.82785210862560,
            21.31708578070040, 22.99719119783550, 23.75613737049850, 24.45133105680210, 25.26145941062280, 26.11822904742810, 27.21194160156030, 27.47640905663970, 27.86343712028420, 28.54487562398520,
            29.54889177337970, 30.48119248353170, 31.86368490678590, 34.10240205308250, 36.18121083178640, 37.34471865924770, 38.48419609517100, 38.78938834051780, 38.96658085091220, 38.50374339387830,
            36.83604724386300, 35.17229815996930, 34.71482096184370, 34.29002070644140, 33.89556332642490, 32.51358474337840, 30.69953606798170, 29.19291528294330, 27.97507950935260, 28.09606024969950,
            27.73081721181540, 27.59592650546910, 26.43687349542300, 25.13955662287210, 23.93490524121760, 23.40791868079840, 23.62420889766450, 23.92799989629740, 24.21009153788500, 25.31580813940410,
            26.66846644962110, 27.42522753706710, 28.17421994343380, 29.11397174209010, 29.57869541432460, 30.13986618078190, 31.76370463187150, 33.27155462216900, 34.80182599228410, 36.44066973878670,
            37.87295116290690, 39.47266807217980, 41.19404595043870, 42.93438028958570, 44.60687557581810, 46.15990691303400, 46.62109460432320, 47.04934031766320, 46.49448238334000, 43.33397799495730,
            40.39922392003040, 38.59922444778660, 37.14537885666010, 35.79537937918550, 34.02385626681350, 31.62678168644400, 29.77483967522800, 28.13438342122580, 27.37519038169740, 27.54698219111040,
            27.73520050188570, 27.05729737147890, 25.39651821377400, 23.85436613876240, 23.06345290719170, 21.89018131488490, 20.77932559914840, 19.49254089570010, 19.00540922442360, 18.75305678983740,
            17.42349623817800, 16.84956340451470, 16.37214600393420, 15.74206999970560, 15.57145164159550, 15.23328883494920, 14.21043933734860, 13.26065051814800, 12.42175399689730, 11.80034587530880,
            12.16521056022210, 11.93046565248080, 12.69371824618480, 14.16118686957150, 15.80583093091190, 17.85065706048770, 19.96614781333490, 20.82208700418560, 21.59003764728800, 22.63833432676690,
            22.55287391530460, 21.33955260233850, 20.21289709744150, 19.16671698575130, 18.75153166341840, 19.11848997911620, 19.69179395243900, 19.52517264500540, 19.37045285953140, 19.68090365005540,
            20.06882759584010, 21.37028181848510, 22.57877502522680, 22.33130858268460, 22.10151831460970, 22.84271139014770, 24.25948771619790, 24.94149652151520, 26.11186088494960, 27.88556619018370,
            29.57051152371950, 30.51377741969040, 31.33930572555110, 32.10586772385030, 31.12007495770830, 32.62982677516680, 33.61063323136640, 34.38854269445570, 34.86815078576000, 35.52179794483190,
            36.12875602111310, 35.61428706689080, 35.13656589511310, 35.10475858806170, 35.10393504814720, 35.60765371158780, 36.07539247049700, 36.15634305454120, 35.69014892070010, 34.73737806948560,
            33.70611656549990, 33.15429021815320, 32.59777199766110, 32.27751314822470, 32.06763909328620, 30.57621917092300, 29.45944630692910, 29.08452960579190, 28.99687099127560, 27.71164826069580,
            26.72653728876310, 25.60197481136290, 24.20708343978640, 22.91182716617960, 22.18727935718850, 22.83632997037430, 23.98997106743090, 25.41946107030020, 26.97170700461890, 27.38248980245730,
            26.51036749129900, 25.45811722041900, 24.48102768317330, 22.97548968917790, 21.96547714190920, 21.32234474377860, 20.48289016820570, 19.70339663374510, 19.02833151017660, 18.43693832868350,
            17.86249927928780, 17.55677417135810, 17.14642182837440, 16.68404536340990, 15.52605835470340
        };
        #endregion

        [TestMethod]
        public void AverageDirectionalMovementIndex_Name_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            Assert.AreEqual("adx", target.Name);
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Moniker_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            Assert.AreEqual("adx(14)", target.Moniker);

            target = new AverageDirectionalMovementIndex(2);
            Assert.AreEqual("adx(2)", target.Moniker);

            target = new AverageDirectionalMovementIndex(1);
            Assert.AreEqual("adx(1)", target.Moniker);
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Description_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            Assert.AreEqual("Average Directional Movement Index", target.Description);
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Length_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            Assert.AreEqual(14, target.Length);

            target = new AverageDirectionalMovementIndex(2);
            Assert.AreEqual(2, target.Length);

            target = new AverageDirectionalMovementIndex(1);
            Assert.AreEqual(1, target.Length);
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_ValueFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.ValueFacade;
            
            Assert.AreEqual("adx", facade.Name);
            Assert.AreEqual("adx(14)", facade.Moniker);
            Assert.AreEqual("Average Directional Movement Index", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.Value, facade.Update(wealthLabHigh[i]));
                Assert.AreEqual(target.IsPrimed, facade.IsPrimed);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementIndexFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.DirectionalMovementIndexFacade;

            Assert.AreEqual("dx", facade.Name);
            Assert.AreEqual("dx(14)", facade.Moniker);
            Assert.AreEqual("Directional Movement Index", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.DirectionalMovementIndex, facade.Update(wealthLabHigh[i]));
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_AverageTrueRangeFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.AverageTrueRangeFacade;

            Assert.AreEqual("atr", facade.Name);
            Assert.AreEqual("atr(14)", facade.Moniker);
            Assert.AreEqual("Average True Range", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.AverageTrueRange, facade.Update(wealthLabHigh[i]));
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_TrueRangeFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.TrueRangeFacade;

            Assert.AreEqual("tr", facade.Name);
            Assert.AreEqual("tr", facade.Moniker);
            Assert.AreEqual("True Range", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.TrueRange, facade.Update(wealthLabHigh[i]));
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementPlusFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.DirectionalMovementPlusFacade;

            Assert.AreEqual("+dm", facade.Name);
            Assert.AreEqual("+dm(14)", facade.Moniker);
            Assert.AreEqual("Directional Movement Plus", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.DirectionalMovementPlus, facade.Update(wealthLabHigh[i]));
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementMinusFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.DirectionalMovementMinusFacade;

            Assert.AreEqual("-dm", facade.Name);
            Assert.AreEqual("-dm(14)", facade.Moniker);
            Assert.AreEqual("Directional Movement Minus", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.DirectionalMovementMinus, facade.Update(wealthLabHigh[i]));
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorPlusFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.DirectionalIndicatorPlusFacade;

            Assert.AreEqual("+di", facade.Name);
            Assert.AreEqual("+di(14)", facade.Moniker);
            Assert.AreEqual("Directional Indicator Plus", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.DirectionalIndicatorPlus, facade.Update(wealthLabHigh[i]));
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorMinusFacade_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex();
            var facade = target.DirectionalIndicatorMinusFacade;

            Assert.AreEqual("-di", facade.Name);
            Assert.AreEqual("-di(14)", facade.Moniker);
            Assert.AreEqual("Directional Indicator Minus", facade.Description);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.AreEqual(target.DirectionalIndicatorMinus, facade.Update(wealthLabHigh[i]));
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementIndex_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(10);
            
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                if (double.IsNaN(wealthLabDx10[i]))
                    Assert.IsTrue(double.IsNaN(target.DirectionalMovementIndex));
                else
                {
                    Assert.IsFalse(double.IsNaN(target.DirectionalMovementIndex));
                    double d = Math.Round(target.DirectionalMovementIndex, digits);
                    double u = Math.Round(wealthLabDx10[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementIndex_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();

            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                if (double.IsNaN(bookDx14[i]))
                    Assert.IsTrue(double.IsNaN(target.DirectionalMovementIndex));
                else
                {
                    Assert.IsFalse(double.IsNaN(target.DirectionalMovementIndex));
                    double d = Math.Round(target.DirectionalMovementIndex, digits);
                    double u = Math.Round(bookDx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementIndex_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();

            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                if (double.IsNaN(tascDx14[i]))
                    Assert.IsTrue(double.IsNaN(target.DirectionalMovementIndex));
                else
                {
                    Assert.IsFalse(double.IsNaN(target.DirectionalMovementIndex));
                    double d = Math.Round(target.DirectionalMovementIndex, digits);
                    double u = Math.Round(tascDx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementIndex_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();

            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                if (double.IsNaN(taLibDx14[i]))
                    Assert.IsTrue(double.IsNaN(target.DirectionalMovementIndex));
                else
                {
                    Assert.IsFalse(double.IsNaN(target.DirectionalMovementIndex));
                    double d = Math.Round(target.DirectionalMovementIndex, digits);
                    double u = Math.Round(taLibDx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_AverageTrueRange_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.AverageTrueRange));
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(wealthLabTrueRange1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex(10);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 10; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 10; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(wealthLabTrueRange10[i] / 10, digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_AverageTrueRange_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.AverageTrueRange));
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(bookTr1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 14; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(bookTr14[i] / 14, digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_AverageTrueRange_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.AverageTrueRange));
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(tascTr1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 14; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(tascTr14[i] / 14, digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_AverageTrueRange_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.AverageTrueRange));
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(taLibTrueRange1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(target.AverageTrueRangeFacade.IsPrimed);
            }

            for (int i = 14; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.AverageTrueRange));
                Assert.IsTrue(target.AverageTrueRangeFacade.IsPrimed);
                double d = Math.Round(target.AverageTrueRange, digits);
                double u = Math.Round(taLibTrueRange14[i] / 14, digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_TrueRange_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.TrueRange));
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                Assert.IsTrue(target.IsPrimed);
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(wealthLabTrueRange1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex(10);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(target.IsPrimed);
            }

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(wealthLabTrueRange1[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_TrueRange_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.TrueRange));
                Assert.IsFalse(target.TrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                Assert.IsTrue(target.TrueRangeFacade.IsPrimed);
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(bookTr1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(target.TrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                Assert.IsTrue(target.TrueRangeFacade.IsPrimed);
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(bookTr1[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_TrueRange_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.TrueRange));
                Assert.IsFalse(target.TrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                Assert.IsTrue(target.TrueRangeFacade.IsPrimed);
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(tascTr1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(target.TrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                Assert.IsTrue(target.TrueRangeFacade.IsPrimed);
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(tascTr1[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_TrueRange_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.TrueRange));
                Assert.IsFalse(target.TrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                Assert.IsTrue(target.TrueRangeFacade.IsPrimed);
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(taLibTrueRange1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(target.TrueRangeFacade.IsPrimed);
            }

            for (int i = 1; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.TrueRange));
                Assert.IsTrue(target.TrueRangeFacade.IsPrimed);
                double d = Math.Round(target.TrueRange, digits);
                double u = Math.Round(taLibTrueRange1[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementPlus_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(wealthLabDmPlus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex(10);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 10; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 10; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(wealthLabDmPlus10[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementPlus_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 1; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(bookDmPlus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 14; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(bookDmPlus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementPlus_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 1; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(tascDmPlus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 14; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(tascDmPlus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementPlus_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 1; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(taLibDmPlus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsFalse(target.DirectionalMovementPlusFacade.IsPrimed);
            }

            for (int i = 14; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementPlus));
                Assert.IsTrue(target.DirectionalMovementPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementPlus, digits);
                double u = Math.Round(taLibDmPlus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementMinus_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(wealthLabDmMinus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex(10);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 10; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 10; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(wealthLabDmMinus10[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementMinus_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 1; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(bookDmMinus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 14; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(bookDmMinus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementMinus_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 1; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(tascDmMinus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 14; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(tascDmMinus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalMovementMinus_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 1; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(taLibDmMinus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsFalse(target.DirectionalMovementMinusFacade.IsPrimed);
            }

            for (int i = 14; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalMovementMinus));
                Assert.IsTrue(target.DirectionalMovementMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalMovementMinus, digits);
                double u = Math.Round(taLibDmMinus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorPlus_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsFalse(target.DirectionalIndicatorPlusFacade.IsPrimed);
            }

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsTrue(target.DirectionalIndicatorPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorPlus, digits);
                double u = Math.Round(wealthLabDiPlus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex(10);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 10; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsFalse(target.DirectionalIndicatorPlusFacade.IsPrimed);
            }

            for (int i = 10; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsTrue(target.DirectionalIndicatorPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorPlus, digits);
                double u = Math.Round(wealthLabDiPlus10[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorPlus_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsFalse(target.DirectionalIndicatorPlusFacade.IsPrimed);
            }

            for (int i = 14; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsTrue(target.DirectionalIndicatorPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorPlus, digits);
                double u = Math.Round(bookDiPlus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorPlus_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsFalse(target.DirectionalIndicatorPlusFacade.IsPrimed);
            }

            for (int i = 14; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsTrue(target.DirectionalIndicatorPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorPlus, digits);
                double u = Math.Round(tascDiPlus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorPlus_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsFalse(target.DirectionalIndicatorPlusFacade.IsPrimed);
            }

            for (int i = 14; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorPlus));
                Assert.IsTrue(target.DirectionalIndicatorPlusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorPlus, digits);
                double u = Math.Round(taLibDiPlus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorMinus_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 1; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsFalse(target.DirectionalIndicatorMinusFacade.IsPrimed);
            }

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsTrue(target.DirectionalIndicatorMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorMinus, digits);
                double u = Math.Round(wealthLabDiMinus1[i], digits);
                Assert.AreEqual(u, d);
            }

            target = new AverageDirectionalMovementIndex(10);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 10; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsFalse(target.DirectionalIndicatorMinusFacade.IsPrimed);
            }

            for (int i = 10; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsTrue(target.DirectionalIndicatorMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorMinus, digits);
                double u = Math.Round(wealthLabDiMinus10[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorMinus_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsFalse(target.DirectionalIndicatorMinusFacade.IsPrimed);
            }

            for (int i = 14; i < bookHigh.Count; ++i)
            {
                target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsTrue(target.DirectionalIndicatorMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorMinus, digits);
                double u = Math.Round(bookDiMinus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorMinus_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsFalse(target.DirectionalIndicatorMinusFacade.IsPrimed);
            }

            for (int i = 14; i < tascHigh.Count; ++i)
            {
                target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsTrue(target.DirectionalIndicatorMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorMinus, digits);
                double u = Math.Round(tascDiMinus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_DirectionalIndicatorMinus_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 14; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsTrue(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsFalse(target.DirectionalIndicatorMinusFacade.IsPrimed);
            }

            for (int i = 14; i < taLibHigh.Count; ++i)
            {
                target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                Assert.IsFalse(double.IsNaN(target.DirectionalIndicatorMinus));
                Assert.IsTrue(target.DirectionalIndicatorMinusFacade.IsPrimed);
                double d = Math.Round(target.DirectionalIndicatorMinus, digits);
                double u = Math.Round(taLibDiMinus14[i], digits);
                Assert.AreEqual(u, d);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_IsPrimed_HasCorrectValue()
        {
            var target = new AverageDirectionalMovementIndex(1);
            Assert.IsFalse(target.IsPrimed);

            target.Update(wealthLabClose[0], wealthLabHigh[0], wealthLabLow[0]);
            Assert.IsTrue(double.IsNaN(target.Value));
            Assert.IsFalse(target.IsPrimed);

            for (int i = 1; i < wealthLabHigh.Count; ++i)
            {
                target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                Assert.IsFalse(double.IsNaN(target.Value));
                Assert.IsTrue(target.IsPrimed);
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Update_WealthLabData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex(10);
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < 30; ++i)
            {
                double d = target.Update(wealthLabClose[i], wealthLabHigh[i], wealthLabLow[i]);
                if (double.IsNaN(wealthLabAdx10[i]))
                {
                    Assert.IsTrue(double.IsNaN(d));
                    Assert.IsTrue(double.IsNaN(target.Value));
                    Assert.IsFalse(target.IsPrimed);
                }
                else
                {
                    Assert.IsFalse(double.IsNaN(d));
                    Assert.IsFalse(double.IsNaN(target.Value));
                    Assert.IsTrue(target.IsPrimed);
                    Assert.AreEqual(d, target.Value);
                    d = Math.Round(d, digits);
                    double u = Math.Round(wealthLabAdx10[i], digits);
                    Assert.AreEqual(u, d);
                }
            }

            for (int i = 30; i < wealthLabHigh.Count; ++i)
            {
                DateTime dateTime = DateTime.Now;
                var ohlcv = new Ohlcv(dateTime, double.NaN, wealthLabHigh[i], wealthLabLow[i], wealthLabClose[i]);
                Scalar scalar = target.Update(ohlcv);
                Assert.IsTrue(target.IsPrimed);
                Assert.IsFalse(double.IsNaN(scalar.Value));
                Assert.IsFalse(double.IsNaN(target.Value));
                Assert.AreEqual(scalar.Value, target.Value);
                double d = Math.Round(scalar.Value, digits);
                double u = Math.Round(wealthLabAdx10[i], digits);
                Assert.AreEqual(u, d);
                Assert.AreEqual(dateTime, scalar.Time);
            }

            target = new AverageDirectionalMovementIndex(10);
            var target2 = new AverageDirectionalMovementIndex(10);

            for (int i = 0; i < 30; ++i)
            {
                DateTime dateTime = DateTime.Now;
                Scalar scalar = target.Update(new Scalar(dateTime, wealthLabHigh[i]));
                if (double.IsNaN(wealthLabAdx10[i]))
                {
                    Assert.IsFalse(target.IsPrimed);
                    Assert.IsTrue(double.IsNaN(scalar.Value));
                    Assert.IsTrue(double.IsNaN(target.Value));
                    Assert.AreEqual(dateTime, scalar.Time);
                    double d = target2.Update(wealthLabHigh[i]);
                    Assert.IsFalse(target2.IsPrimed);
                    Assert.IsTrue(double.IsNaN(d));
                    Assert.IsTrue(double.IsNaN(target.Value));
                }
                else
                {
                    Assert.IsTrue(target.IsPrimed);
                    Assert.IsFalse(double.IsNaN(scalar.Value));
                    Assert.IsFalse(double.IsNaN(target.Value));
                    Assert.AreEqual(scalar.Value, target.Value);
                    Assert.AreEqual(dateTime, scalar.Time);
                    double d = target2.Update(wealthLabHigh[i]);
                    Assert.IsTrue(target2.IsPrimed);
                    Assert.IsFalse(double.IsNaN(d));
                    Assert.IsFalse(double.IsNaN(target2.Value));
                    Assert.AreEqual(d, target2.Value);
                    Assert.AreEqual(d, scalar.Value);
                }
            }

            double z = target.Update(double.NaN);
            Assert.IsTrue(double.IsNaN(z));
            z = target.Update(double.NaN, 1.1, 1.2);
            Assert.IsTrue(double.IsNaN(z));
            z = target.Update(double.NaN, 1.2, 1.1);
            Assert.IsTrue(double.IsNaN(z));
            z = target.Update(1.1, double.NaN, double.NaN);
            Assert.IsTrue(double.IsNaN(z));
            z = target.Update(2.2, 3.3, double.NaN);
            Assert.IsTrue(double.IsNaN(z));

            target = new AverageDirectionalMovementIndex(10);
            for (int i = 0; i < 20; ++i)
                z = target.Update(0d);
            Assert.AreEqual(0d, z);
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Update_WilderBookData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < bookHigh.Count; ++i)
            {
                double d = target.Update(bookClose[i], bookHigh[i], bookLow[i]);
                if (double.IsNaN(bookAdx14[i]))
                {
                    Assert.IsTrue(double.IsNaN(d));
                    Assert.IsTrue(double.IsNaN(target.Value));
                    Assert.IsFalse(target.IsPrimed);
                }
                else
                {
                    Assert.IsFalse(double.IsNaN(d));
                    Assert.IsFalse(double.IsNaN(target.Value));
                    Assert.IsTrue(target.IsPrimed);
                    Assert.AreEqual(d, target.Value);
                    d = Math.Round(d, digits);
                    double u = Math.Round(bookAdx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Update_TascMagazineArticleData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < tascHigh.Count; ++i)
            {
                double d = target.Update(tascClose[i], tascHigh[i], tascLow[i]);
                if (double.IsNaN(tascAdx14[i]))
                {
                    Assert.IsTrue(double.IsNaN(d));
                    Assert.IsTrue(double.IsNaN(target.Value));
                    Assert.IsFalse(target.IsPrimed);
                }
                else
                {
                    Assert.IsFalse(double.IsNaN(d));
                    Assert.IsFalse(double.IsNaN(target.Value));
                    Assert.IsTrue(target.IsPrimed);
                    Assert.AreEqual(d, target.Value);
                    d = Math.Round(d, digits);
                    double u = Math.Round(tascAdx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Update_TaLibData_ReturnsCorrectValues()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < taLibHigh.Count; ++i)
            {
                double d = target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                if (double.IsNaN(taLibAdx14[i]))
                {
                    Assert.IsTrue(double.IsNaN(d));
                    Assert.IsTrue(double.IsNaN(target.Value));
                    Assert.IsFalse(target.IsPrimed);
                }
                else
                {
                    Assert.IsFalse(double.IsNaN(d));
                    Assert.IsFalse(double.IsNaN(target.Value));
                    Assert.IsTrue(target.IsPrimed);
                    Assert.AreEqual(d, target.Value);
                    d = Math.Round(d, digits);
                    double u = Math.Round(taLibAdx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Reset_FunctionsCorrectly()
        {
            const int digits = 8;
            var target = new AverageDirectionalMovementIndex();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < taLibHigh.Count; ++i)
            {
                double d = target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                if (double.IsNaN(taLibAdx14[i]))
                {
                    Assert.IsTrue(double.IsNaN(d));
                    Assert.IsTrue(double.IsNaN(target.Value));
                    Assert.IsFalse(target.IsPrimed);
                }
                else
                {
                    Assert.IsFalse(double.IsNaN(d));
                    Assert.IsFalse(double.IsNaN(target.Value));
                    Assert.IsTrue(target.IsPrimed);
                    Assert.AreEqual(d, target.Value);
                    d = Math.Round(d, digits);
                    double u = Math.Round(taLibAdx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }

            target.Reset();
            Assert.IsFalse(target.IsPrimed);

            for (int i = 0; i < taLibHigh.Count; ++i)
            {
                double d = target.Update(taLibClose[i], taLibHigh[i], taLibLow[i]);
                if (double.IsNaN(taLibAdx14[i]))
                {
                    Assert.IsTrue(double.IsNaN(d));
                    Assert.IsTrue(double.IsNaN(target.Value));
                    Assert.IsFalse(target.IsPrimed);
                }
                else
                {
                    Assert.IsFalse(double.IsNaN(d));
                    Assert.IsFalse(double.IsNaN(target.Value));
                    Assert.IsTrue(target.IsPrimed);
                    Assert.AreEqual(d, target.Value);
                    d = Math.Round(d, digits);
                    double u = Math.Round(taLibAdx14[i], digits);
                    Assert.AreEqual(u, d);
                }
            }
        }

        [TestMethod]
        public void AverageDirectionalMovementIndex_Constructor_CreatesAnInstance()
        {
            var target = new AverageDirectionalMovementIndex();
            Assert.AreEqual(14, target.Length);
            Assert.IsTrue(double.IsNaN(target.Value));
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.MedianPrice);

            target = new AverageDirectionalMovementIndex(2);
            Assert.AreEqual(2, target.Length);
            Assert.IsTrue(double.IsNaN(target.Value));
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.MedianPrice);

            target = new AverageDirectionalMovementIndex(1);
            Assert.AreEqual(1, target.Length);
            Assert.IsTrue(double.IsNaN(target.Value));
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.MedianPrice);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AverageDirectionalMovementIndex_Constructor_LengthIsZero_ThrowsException()
        {
            var target = new AverageDirectionalMovementIndex(0);
            Assert.IsFalse(target.IsPrimed);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void AverageDirectionalMovementIndex_Constructor_LengthIsNegative_ThrowsException()
        {
            var target = new AverageDirectionalMovementIndex(-8);
            Assert.IsFalse(target.IsPrimed);
        }
    }
}
