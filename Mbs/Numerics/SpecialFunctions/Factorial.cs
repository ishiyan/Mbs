using System;
using System.Runtime.CompilerServices;

// ReSharper disable once CheckNamespace
namespace Mbs.Numerics
{
    /// <summary>
    /// Contains assorted special functions.
    /// </summary>
    public static partial class SpecialFunctions
    {
        /// <summary>
        /// The maximum <c>n</c> such that <c>Factorial(n)</c> does not give an overflow.
        /// </summary>
        public const int FactorialMaxN = 170;

        /// <summary>
        /// The maximum <c>n</c> such that <c>DoubleFactorial(n)</c> does not give an overflow.
        /// </summary>
        public const int DoubleFactorialMaxN = 297;

        private static readonly double[] LogFactorials =
        {
            0.0, 0.0, 0.69314718055994529, 1.791759469228055, 3.1780538303479458, 4.7874917427820458, 6.5792512120101012, 8.5251613610654147, 10.604602902745251, 12.801827480081469, 15.104412573075516, 17.502307845873887, 19.987214495661885, 22.552163853123425, 25.19122118273868, 27.89927138384089,
            30.671860106080672, 33.505073450136891, 36.395445208033053, 39.339884187199495, 42.335616460753485, 45.380138898476908, 48.471181351835227, 51.606675567764377, 54.784729398112319, 58.003605222980518, 61.261701761002, 64.557538627006338, 67.88974313718154, 71.257038967168015, 74.658236348830158, 78.0922235533153,
            81.557959456115043, 85.054467017581516, 88.580827542197682, 92.1361756036871, 95.7196945421432, 99.330612454787428, 102.96819861451381, 106.63176026064346, 110.32063971475739, 114.03421178146171, 117.77188139974507, 121.53308151543864, 125.3172711493569, 129.12393363912722, 132.95257503561632, 136.80272263732636,
            140.67392364823425, 144.5657439463449, 148.47776695177302, 152.40959258449735, 156.3608363030788, 160.3311282166309, 164.32011226319517, 168.32744544842765, 172.35279713916279, 176.39584840699735, 180.45629141754378, 184.53382886144948, 188.6281734236716, 192.7390472878449, 196.86618167289, 201.00931639928152,
            205.1681994826412, 209.34258675253685, 213.53224149456327, 217.73693411395422, 221.95644181913033, 226.1905483237276, 230.43904356577696, 234.70172344281826, 238.97838956183432, 243.26884900298271, 247.57291409618688, 251.89040220972319, 256.22113555000954, 260.56494097186322, 264.92164979855278, 269.29109765101981,
            273.67312428569369, 278.06757344036612, 282.4742926876304, 286.893133295427, 291.32395009427029, 295.76660135076065, 300.22094864701415, 304.68685676566872, 309.1641935801469, 313.65282994987905, 318.1526396202093, 322.66349912672615, 327.1852877037752, 331.71788719692847, 336.26118197919845, 340.815058870799,
            345.37940706226686, 349.95411804077025, 354.53908551944079, 359.1342053695754, 363.73937555556347,
        };

        /// <summary>
        /// The factorial values of integers.
        /// </summary>
        private static readonly double[] Factorials =
        {
            1.0,                                     // 0
            1.0,                                     // 1
            2.0,                                     // 2
            6.0,                                     // 3
            24.0,                                    // 4
            120.0,                                   // 5
            720.0,                                   // 6
            5040.0,                                  // 7
            40320.0,                                 // 8
            362880.0,                                // 9
            3628800.0,                               // 10
            39916800.0,                              // 11
            479001600.0,                             // 12
            6227020800.0,                            // 13
            87178291200.0,                           // 14
            1307674368000.0,                         // 15
            20922789888000.0,                        // 16
            355687428096000.0,                       // 17
            6402373705728000.0,                      // 18
            121645100408832000.0,                    // 19
            2432902008176640000.0,                   // 20
            51090942171709440000.0,                  // 20
            1124000727777607680000.0,                // 22
            25852016738884976640000.0,               // 23
            620448401733239439360000.0,              // 24
            15511210043330985984000000.0,            // 25
            403291461126605635584000000.0,           // 26
            10888869450418352160768000000.0,         // 27
            304888344611713860501504000000.0,        // 28
            8841761993739701954543616000000.0,       // 29
            265252859812191058636308480000000.0,     // 30
            8222838654177922817725562880000000.0,    // 31
            263130836933693530167218012160000000.0,  // 32
            8683317618811886495518194401280000000.0, // 33
            2.95232799039604140847618609644e38,      // 34
            1.03331479663861449296666513375e40,      // 35
            3.71993326789901217467999448151e41,      // 36
            1.37637530912263450463159795816e43,      // 37
            5.23022617466601111760007224100e44,      // 38
            2.03978820811974433586402817399e46,      // 39
            8.15915283247897734345611269600e47,      // 40
            3.34525266131638071081700620534e49,      // 41
            1.40500611775287989854314260624e51,      // 42
            6.04152630633738356373551320685e52,      // 43
            2.65827157478844876804362581101e54,      // 44
            1.19622220865480194561963161496e56,      // 45
            5.50262215981208894985030542880e57,      // 46
            2.58623241511168180642964355154e59,      // 47
            1.24139155925360726708622890474e61,      // 48
            6.08281864034267560872252163321e62,      // 49
            3.04140932017133780436126081661e64,      // 50
            1.55111875328738228022424301647e66,      // 51
            8.06581751709438785716606368564e67,      // 52
            4.27488328406002556429801375339e69,      // 53
            2.30843697339241380472092742683e71,      // 54
            1.26964033536582759259651008476e73,      // 55
            7.10998587804863451854045647464e74,      // 56
            4.05269195048772167556806019054e76,      // 57
            2.35056133128287857182947491052e78,      // 58
            1.38683118545689835737939019720e80,      // 59
            8.32098711274139014427634118320e81,      // 60
            5.07580213877224798800856812177e83,      // 61
            3.14699732603879375256531223550e85,      // 62
            1.982608315404440064116146708360e87,     // 63
            1.268869321858841641034333893350e89,     // 64
            8.247650592082470666723170306800e90,     // 65
            5.443449390774430640037292402480e92,     // 66
            3.647111091818868528824985909660e94,     // 67
            2.480035542436830599600990418570e96,     // 68
            1.711224524281413113724683388810e98,     // 69
            1.197857166996989179607278372170e100,    // 70
            8.504785885678623175211676442400e101,    // 71
            6.123445837688608686152407038530e103,    // 72
            4.470115461512684340891257138130e105,    // 73
            3.307885441519386412259530282210e107,    // 74
            2.480914081139539809194647711660e109,    // 75
            1.885494701666050254987932260860e111,    // 76
            1.451830920282858696340707840860e113,    // 77
            1.132428117820629783145752115870e115,    // 78
            8.946182130782975286851441715400e116,    // 79
            7.156945704626380229481153372320e118,    // 80
            5.797126020747367985879734231580e120,    // 81
            4.753643337012841748421382069890e122,    // 82
            3.945523969720658651189747118010e124,    // 83
            3.314240134565353266999387579130e126,    // 84
            2.817104114380550276949479442260e128,    // 85
            2.422709538367273238176552320340e130,    // 86
            2.107757298379527717213600518700e132,    // 87
            1.854826422573984391147968456460e134,    // 88
            1.650795516090846108121691926250e136,    // 89
            1.485715964481761497309522733620e138,    // 90
            1.352001527678402962551665687590e140,    // 91
            1.243841405464130725547532432590e142,    // 92
            1.156772507081641574759205162310e144,    // 93
            1.087366156656743080273652852570e146,    // 94
            1.032997848823905926259970209940e148,    // 95
            9.916779348709496892095714015400e149,    // 96
            9.619275968248211985332842594960e151,    // 97
            9.426890448883247745626185743100e153,    // 98
            9.332621544394415268169923885600e155,    // 99
            9.33262154439441526816992388563e157,     // 100
            9.42594775983835942085162312450e159,     // 101
            9.61446671503512660926865558700e161,     // 102
            9.90290071648618040754671525458e163,     // 103
            1.02990167451456276238485838648e166,     // 104
            1.08139675824029090050410130580e168,     // 105
            1.146280563734708354534347384148e170,    // 106
            1.226520203196137939351751701040e172,    // 107
            1.324641819451828974499891837120e174,    // 108
            1.443859583202493582204882102460e176,    // 109
            1.588245541522742940425370312710e178,    // 110
            1.762952551090244663872161047110e180,    // 111
            1.974506857221074023536820372760e182,    // 112
            2.231192748659813646596607021220e184,    // 113
            2.543559733472187557120132004190e186,    // 114
            2.925093693493015690688151804820e188,    // 115
            3.393108684451898201198256093590e190,    // 116
            3.96993716080872089540195962950e192,     // 117
            4.68452584975429065657431236281e194,     // 118
            5.57458576120760588132343171174e196,     // 119
            6.68950291344912705758811805409e198,     // 120
            8.09429852527344373968162284545e200,     // 121
            9.87504420083360136241157987140e202,     // 122
            1.21463043670253296757662432419e205,     // 123
            1.50614174151114087979501416199e207,     // 124
            1.88267717688892609974376770249e209,     // 125
            2.37217324288004688567714730514e211,     // 126
            3.01266001845765954480997707753e213,     // 127
            3.85620482362580421735677065923e215,     // 128
            4.97450422247728744039023415041e217,     // 129
            6.46685548922047367250730439554e219,     // 130
            8.47158069087882051098456875820e221,     // 131
            1.11824865119600430744996307608e224,     // 132
            1.48727070609068572890845089118e226,     // 133
            1.99294274616151887673732419418e228,     // 134
            2.69047270731805048359538766215e230,     // 135
            3.65904288195254865768972722052e232,     // 136
            5.01288874827499166103492629211e234,     // 137
            6.91778647261948849222819828311e236,     // 138
            9.61572319694108900419719561353e238,     // 139
            1.34620124757175246058760738589e241,     // 140
            1.89814375907617096942852641411e243,     // 141
            2.69536413788816277658850750804e245,     // 142
            3.85437071718007277052156573649e247,     // 143
            5.55029383273930478955105466055e249,     // 144
            8.04792605747199194484902925780e251,     // 145
            1.17499720439091082394795827164e254,     // 146
            1.72724589045463891120349865931e256,     // 147
            2.55632391787286558858117801578e258,     // 148
            3.80892263763056972698595524351e260,     // 149
            5.71338395644585459047893286526e262,     // 150
            8.62720977423324043162318862650e264,     // 151
            1.31133588568345254560672467123e267,     // 152
            2.00634390509568239477828874699e269,     // 153
            3.08976961384735088795856467036e271,     // 154
            4.78914290146339387633577523906e273,     // 155
            7.47106292628289444708380937294e275,     // 156
            1.17295687942641442819215807155e278,     // 157
            1.85327186949373479654360975305e280,     // 158
            2.94670227249503832650433950735e282,     // 159
            4.71472363599206132240694321176e284,     // 160
            7.59070505394721872907517857094e286,     // 161
            1.22969421873944943411017892849e289,     // 162
            2.00440157654530257759959165344e291,     // 163
            3.28721858553429622726333031164e293,     // 164
            5.42391066613158877498449501421e295,     // 164
            9.00369170577843736647426172359e297,     // 166
            1.50361651486499904020120170784e300,     // 167
            2.52607574497319838753801886917e302,     // 168
            4.26906800900470527493925188890e304,     // 169
            7.25741561530799896739672821113e306,     // 170/
            /*
            1.24101807021766782342484052410e309,     // 171
            2.13455108077438865629072570146e311,     // 172
            3.69277336973969237538295546352e313,     // 173
            6.42542566334706473316634250653e315,     // 174
            1.12444949108573632830410993864e318,     // 175
            1.97903110431089593781523349201e320,     // 176
            3.50288505463028580993296328086e322,     // 177
            6.23513539724190874168067463993e324,     // 178
            1.11608923610630166476084076055e327,     // 179
            2.00896062499134299656951336898e329,     // 180
            3.63621873123433082379081919786e331,     // 181
            6.61791809084648209929929094011e333,     // 182
            1.21107901062490622417177024204e336,     // 183
            2.22838537954982745247605724535e338,     // 184
            4.12251295216718078708070590390e340,     // 185
            7.66787409103095626397011298130e342,     // 186
            1.43389245502278882136241112750e345,     // 187
            2.69571781544284298416133291969e347,     // 188
            5.09490667118697324006491921822e349,     // 189
            9.68032267525524915612334651460e351,     // 190
            1.84894163097375258881955918429e354,     // 191
            3.54996793146960497053355363384e356,     // 192
            6.85143810773633759312975851330e358,     // 193
            1.32917899290084949306717315158e361,     // 194
            2.59189903615665651148098764559e363,     // 195
            5.08012211086704676250273578535e365,     // 196
            1.00078405584080821221303894971e368,     // 197
            1.98155243056480026018181712043e370,     // 198
            3.94328933682395251776181606966e372,     // 199
            7.88657867364790503552363213932e374,     // 200
            */
        };

        private static readonly double[] DoubleFactorials =
        {
            1.000000000000000000000000000,       // 0
            1.000000000000000000000000000,       // 1
            2.000000000000000000000000000,       // 2
            3.000000000000000000000000000,       // 3
            8.000000000000000000000000000,       // 4
            15.00000000000000000000000000,       // 5
            48.00000000000000000000000000,       // 6
            105.0000000000000000000000000,       // 7
            384.0000000000000000000000000,       // 8
            945.0000000000000000000000000,       // 9
            3840.000000000000000000000000,       // 10
            10395.00000000000000000000000,       // 11
            46080.00000000000000000000000,       // 12
            135135.0000000000000000000000,       // 13
            645120.00000000000000000000000,      // 14
            2.02702500000000000000000000000e6,   // 15
            1.03219200000000000000000000000e7,   // 16
            3.4459425000000000000000000000e7,    // 17
            1.85794560000000000000000000000e8,   // 18
            6.5472907500000000000000000000e8,    // 19
            3.7158912000000000000000000000e9,    // 20
            1.37493105750000000000000000000e10,  // 20
            8.1749606400000000000000000000e10,   // 22
            3.1623414322500000000000000000e11,   // 23
            1.96199055360000000000000000000e12,  // 24
            7.9058535806250000000000000000e12,   // 25
            5.1011754393600000000000000000e13,   // 26
            2.13458046676875000000000000000e14,  // 27
            1.42832912302080000000000000000e15,  // 28
            6.1902833536293750000000000000e15,   // 29
            4.2849873690624000000000000000e16,   // 30
            1.91898783962510625000000000000e17,  // 31
            1.37119595809996800000000000000e18,  // 32
            6.3326598707628506250000000000e18,   // 33
            4.6620662575398912000000000000e19,   // 34
            2.21643095476699771875000000000e20,  // 35
            1.67834385271436083200000000000e21,  // 36
            8.2007945326378915593750000000e21,   // 37
            6.3777066403145711616000000000e22,   // 38
            3.1983098677287777081562500000e23,   // 39
            2.55108265612582846464000000000e24,  // 40
            1.31130704576879886034406250000e25,  // 41
            1.07145471557284795514880000000e26,  // 42
            5.6386202968058350994794687500e26,   // 43
            4.7144007485205310026547200000e27,   // 44
            2.53737913356262579476576093750e28,  // 45
            2.16862434431944426122117120000e29,  // 46
            1.19256819277443412353990764062e30,  // 47
            1.04093968527333324538616217600e31,  // 48
            5.8435841445947272053455474391e31,   // 49
            5.2046984263666662269308108800e32,   // 50
            2.98022791374331087472622919392e33,  // 51
            2.70644318171066643800402165760e34,  // 52
            1.57952079428395476360490147278e35,  // 53
            1.46147931812375987652217169510e36,  // 54
            8.6873643685617511998269581003e36,   // 55
            8.1842841814930553085241614926e37,   // 56
            4.9517976900801981839013661172e38,   // 57
            4.7468848252659720789440136657e39,   // 58
            2.92156063714731692850180600912e40,  // 59
            2.84813089515958324736640819942e41,  // 60
            1.78215198865986332638610166557e42,  // 61
            1.76584115499894161336717308364e43,  // 62
            1.12275575285571389562324404931e44,  // 63
            1.13013833919932263255499077353e45,  // 64
            7.2979123935621403215510863205e45,   // 65
            7.4589130387155293748629391053e46,   // 66
            4.8896013036866340154392278347e47,   // 67
            5.0720608663265599749067985916e48,   // 68
            3.3738248995437774706530672060e49,   // 69
            3.5504426064285919824347590141e50,   // 70
            2.39541567867608200416367771623e51,  // 71
            2.55631867662858622735302649017e52,  // 72
            1.74865344543353986303948473285e53,  // 73
            1.89167582070515380824123960272e54,  // 74
            1.31149008407515489727961354964e55,  // 75
            1.43767362373591689426334209807e56,  // 76
            1.00984736473786927090530243322e57,  // 77
            1.12138542651401517752540683649e58,  // 78
            7.9777941814291672401518892225e58,   // 79
            8.9710834121121214202032546920e59,   // 80
            6.4620132869576254645230302702e60,   // 81
            7.3562883979319395645666688474e61,   // 82
            5.3634710281748291355541151243e62,   // 83
            6.1792822542628292342360018318e63,   // 84
            4.5589503739486047652209978556e64,   // 85
            5.3141827386660331414429615754e65,   // 86
            3.9662868253352861457422681344e66,   // 87
            4.6764808100261091644698061863e67,   // 88
            3.5299952745484046697106186396e68,   // 89
            4.2088327290234982480228255677e69,   // 90
            3.2122956998390482494366629620e70,   // 91
            3.8721261107016183881809995223e71,   // 92
            2.98743500085031487197609655470e72,  // 93
            3.6397985440595212848901395509e73,   // 94
            2.83806325080779912837729172696e74,  // 95
            3.4942066022971404334945339689e75,   // 96
            2.75292135328356515452597297515e76,  // 97
            3.4243224702511976248246432895e77,   // 98
            2.72539213975072950298071324540e78,  // 99
            3.4243224702511976248246432895e79,   // 100
            2.75264606114823679801052037785e80,  // 101
            3.4928089196562215773211361553e81,   // 102
            2.83522544298268390195083598919e82,  // 103
            3.6325212764424704404139816015e83,   // 104
            2.97698671513181809704837778865e84,  // 105
            3.8504725530290186668388204976e85,   // 106
            3.1853757851910453638417642339e86,   // 107
            4.1585103572713401601859261374e87,   // 108
            3.4720596058582394465875230149e88,   // 109
            4.5743613929984741762045187512e89,   // 110
            3.8539861625026457857121505465e90,   // 111
            5.1232847601582910773490610013e91,   // 112
            4.3550043636279897378547301176e92,   // 113
            5.8405446265804518281779295415e93,   // 114
            5.0082550181721881985329396352e94,   // 115
            6.7750317668333241206863982681e95,   // 116
            5.8596583712614601922835393732e96,   // 117
            7.9945374848633224624099499564e97,   // 118
            6.9729934618011376288174118541e98,   // 119
            9.5934449818359869548919399477e99,   // 120
            8.4373220887793765308690683435e100,  // 121
            1.17040028778399040849681667362e102, // 122
            1.03779061691986331329689540625e103, // 123
            1.45129635685214810653605267528e104, // 124
            1.29723827114982914162111925781e105, // 125
            1.82863340963370661423542637086e106, // 126
            1.64749260436028300985882145742e107, // 127
            2.34065076433114446622134575470e108, // 128
            2.12526545962476508271787968008e109, // 129
            3.04284599363048780608774948111e110, // 130
            2.78409775210844225836042238090e111, // 131
            4.0165567115922439040358293151e112,  // 132
            3.7028500103042282036193617666e113,  // 133
            5.3821859935336068314080112822e114,  // 134
            4.9988475139107080748861383849e115,  // 135
            7.3197729512057052907148953438e116,  // 136
            6.8484210940576700625940095873e117,  // 137
            1.01012866726638733011865555744e119, // 138
            9.5193053207401613870056733264e119,  // 139
            1.41418013417294226216611778042e121, // 140
            1.34222205022436275556779993902e122, // 141
            2.00813579052557801227588724819e123, // 142
            1.91937753182083874046195391280e124, // 143
            2.89171553835683233767727763739e125, // 144
            2.78309742114021617366983317355e126, // 145
            4.2219046860009752130088253506e127,  // 146
            4.0911532090761177752946547651e128,  // 147
            6.2484189352814433152530615189e129,  // 148
            6.0958182815234154851890356000e130,  // 149
            9.3726284029221649728795922783e131,  // 150
            9.2046856051003573826354437561e132,  // 151
            1.42463951724416907587769802630e134, // 152
            1.40831689758035467954322289468e135, // 153
            2.19394485655602037685165496051e136, // 154
            2.18289119124954975329199548675e137, // 155
            3.4225539762273917878885817384e138,  // 156
            3.4271391702617931126684329142e139,  // 157
            5.4076352824392790248639591467e140,  // 158
            5.4491512807162510491428083336e141,  // 159
            8.6522164519028464397823346347e142,  // 160
            8.7731335619531641891199214170e143,  // 161
            1.40165906520826112324473821082e145, // 162
            1.43002077059836576282654719098e146, // 163
            2.29872086694154824212137066574e147, // 164
            2.35953427148730350866380286512e148, // 164
            3.8158766391229700819214753051e149,  // 166
            3.9404222333837968594685507847e150,  // 167
            6.4106727537265897376280785126e151,  // 168
            6.6593135744186166925018508262e152,  // 169
            1.08981436813352025539677334714e154, // 170
            1.13874262122558345441781649128e155, // 171
            1.87448071318965483928245015709e156, // 172
            1.97002473472025937614282252992e157, // 173
            3.2615964409499994203514632733e158,  // 174
            3.4475432857604539082499394274e159,  // 175
            5.7404097360719989798185753611e160,  // 176
            6.1021516157960034176023927864e161,  // 177
            1.02179293302081581840770641427e163, // 178
            1.09228513922748461175082830877e164, // 179
            1.83922727943746847313387154568e165, // 180
            1.97703610200174714726899923887e166, // 181
            3.3473936485761926211036462131e167,  // 182
            3.6179760666631972795022686071e168,  // 183
            6.1592043133801944228307090322e169,  // 184
            6.6932557233269149670791969232e170,  // 185
            1.14561200228871616264651187999e172, // 186
            1.25163882026213309884380982464e173, // 187
            2.15375056430278638577544233437e174, // 188
            2.36559737029543155681480056857e175, // 189
            4.0921260721752941329733404353e176,  // 190
            4.5182909772642742735162690860e177,  // 191
            7.8568820585765647353088136358e178,  // 192
            8.7203015861200493478863993359e179,  // 193
            1.52423511936385355864990984535e181, // 194
            1.70045880929340962283784787050e182, // 195
            2.98750083395315297495382329688e183, // 196
            3.3499038543080169569905603049e184,  // 197
            5.9152516512272428904085701278e185,  // 198
            6.6663086700729537444112150067e186,  // 199
            1.18305033024544857808171402556e188, // 200
            1.33992804268466370262665421635e189, // 201
            2.38976166709580612772506233164e190, // 202
            2.72005392664986731633210805920e191, // 203
            4.8751138008754445005591271565e192,  // 204
            5.5761105496322279984808215214e193,  // 205
            1.00427344298034156711518019425e195, // 206
            1.15425488377387119568553005492e196, // 207
            2.08888876139911045959957480403e197, // 208
            2.41239270708739079898275781478e198, // 209
            4.3866663989381319651591070885e199,  // 210
            5.0901486119543945858536189892e200,  // 211
            9.2997327657488397661373070276e201,  // 212
            1.08420165434628604678682084470e203, // 213
            1.99014281187025170995338370390e204, // 214
            2.33103355684451500059166481610e205, // 215
            4.2987084736397436934993088004e206,  // 216
            5.0583428183525975512839126509e207,  // 217
            9.3711844725346412518284931849e208,  // 218
            1.10777707721921886373117687056e210, // 219
            2.06166058395762107540226850068e211, // 220
            2.44818734065447368884590088393e212, // 221
            4.5768864963859187873930360715e213,  // 222
            5.4594577696594763261263589712e214,  // 223
            1.02522257519044580837604008002e216, // 224
            1.22837799817338217337843076851e217, // 225
            2.31700301993040752692985058084e218, // 226
            2.78841805585357753356903784452e219, // 227
            5.2827668854413291614000593243e220,  // 228
            6.3854773479046925518730966640e221,  // 229
            1.21503638365150570712201364459e223, // 230
            1.47504526736598397948268532937e224, // 231
            2.81888441007149324052307165546e225, // 232
            3.4368554729627426721946568174e226,  // 233
            6.5961895195672941828239876738e227,  // 234
            8.0766103614624452796574435210e228,  // 235
            1.55670072661788142714646109101e230, // 236
            1.91415665566659953127881411447e231, // 237
            3.7049477293505577966085773966e232,  // 238
            4.5748344070431728797563657336e233,  // 239
            8.8918745504413387118605857518e234,  // 240
            1.10253509209740466402128414180e236, // 241
            2.15183364120680396827026175195e237, // 242
            2.67916027379669333357172046456e238, // 243
            5.2504740845446016825794386748e239,  // 244
            6.5639426708018986672507151382e240,  // 245
            1.29161662479797201391454191399e242, // 246
            1.62129383968806897081092663913e243, // 247
            3.2032092294989705945080639467e244,  // 248
            4.0370216608232917373192073314e245,  // 249
            8.0080230737474264862701598667e246,  // 250
            1.01329243686664622606712104019e248, // 251
            2.01802181458435147454008028642e249, // 252
            2.56362986527261495194981623168e250, // 253
            5.1257754090442527453318039275e251,  // 254
            6.5372561564451681274720313908e252,  // 255
            1.31219850471532870280494180544e254, // 256
            1.68007483220640820876031206743e255, // 257
            3.3854721421655480532367498580e256,  // 258
            4.3513938154145972606892082546e257,  // 259
            8.8022275696304249384155496309e258,  // 260
            1.13571378582320988503988335446e260, // 261
            2.30618362324317133386487400329e261, // 262
            2.98692725671504199765489322224e262, // 263
            6.0883247653619723214032673687e263,  // 264
            7.9153572302948612937854670389e264,  // 265
            1.61949438758628463749326912007e266, // 266
            2.11340038048872796544071969939e267, // 267
            4.3402449587312428284819612418e268,  // 268
            5.6850470235146782270355359914e269,  // 269
            1.17186613885743556369012953528e271, // 270
            1.54064774337247779952663025366e272, // 271
            3.1874758976922247332371523360e273,  // 272
            4.2059683394068643927077005925e274,  // 273
            8.7336839596766957690697974006e275,  // 274
            1.15664129333688770799461766294e277, // 275
            2.41049677287076803226326408256e278, // 276
            3.2038963825431789511450909263e279,  // 277
            6.7011810285807351296918741495e280,  // 278
            8.9388709072954692736948036845e281,  // 279
            1.87633068800260583631372476186e283, // 280
            2.51182272495002686590823983534e284, // 281
            5.2912525401673484584047038284e285,  // 282
            7.1084583116085760305203187340e286,  // 283
            1.50271572140752696218693588728e288, // 284
            2.02591061880844416869829083919e289, // 285
            4.2977669632255271118546366376e290,  // 286
            5.8143634759802347641640947085e291,  // 287
            1.23775688540895180821413535163e293, // 288
            1.68035104455828784684342337075e294, // 289
            3.5894949676859602438209925197e295,  // 290
            4.8898215396646176343143620089e296,  // 291
            1.04813253056430039119572981576e298, // 292
            1.43271771112173296685410806860e299, // 293
            3.08150963985904315011544565835e300, // 294
            4.2265172478091122522196188024e301,  // 295
            9.1212685339827677243417191487e302,  // 296
            1.25527562259930633890922678431e304, // 297
            /*
            2.71813802312686478185383230631e305, // 298
            3.7532741115719259533385880851e306,  // 299
            8.1544140693805943455614969189e307,  // 300
            */
        };

        /// <summary>
        /// The factorial of an integer n is the product of all integers from 1 to n.
        /// <para>n! also has a combinatorial interpretation as the number of permutations of n objects. For example, a set of 3
        /// objects (abc) has 3! = 6 permutations: (abc), (bac), (cba), (acb), (cab), (bca).</para>
        /// <para>Because n! grows extremely quickly with increasing n, we return the result as a double, even though
        /// the value is always an integer (13! would overflow an int, 21! would overflow a long, 171! overflows even a double).</para>
        /// <para>In order to deal with factorials of larger numbers, you can use the <see cref="LogFactorial"/> method, which
        /// returns accurate values of ln(n!) even for values of n for which n! would overflow a double.</para>
        /// <para>The factorial is generalized to non-integer arguments by the gamma function.</para>
        /// </summary>
        /// <param name="n">The argument, which must be non-negative.</param>
        /// <returns>The value of the factorial.</returns>
        /// <seealso href="http://en.wikipedia.org/wiki/Factorial"/>
        public static double Factorial(int n)
        {
            if (n < 0)
            {
                return double.NaN;
            }

            return n <= FactorialMaxN
                ? Factorials[n]
                : Math.Exp(LnGamma(++n)); // Or double.PositiveInfinity.
        }

        /// <summary>
        /// The natural logarithm of the factorial of a positive integer, <c>ln(n!)</c>.
        /// <para>This function provides accurate values of <c>ln(n!)</c> even for values of n which would cause <c>n!</c> to overflow.</para>
        /// </summary>
        /// <param name="n">The argument, which must be non-negative.</param>
        /// <returns>The natural logarithm of the factorial <c>ln(n!)</c>.</returns>
        public static double LogFactorial(int n)
        {
            if (n < 0)
            {
                return double.NaN;
            }

            return n < LogFactorials.Length
                ? LogFactorials[n]
                : LnGamma(++n);
        }

        /// <summary>
        /// The double factorial, <c>n!!</c>, of the given integer.
        /// <para />
        /// The double factorial of an integer is the product all integers of the same parity, up to and including the integer.
        /// <code>n!! = n(n-2)(n-4) ...</code>
        /// <para />
        /// Thus 5!! = 5 * 3 * 1 = 15 and 6!! = 6 * 4 * 2 = 48.
        /// </summary>
        /// <param name="n">The argument, which must be positive.</param>
        /// <returns>The value of the double factorial.</returns>
        /// <seealso href="http://mathworld.wolfram.com/DoubleFactorial.html"/>
        public static double DoubleFactorial(int n)
        {
            if (n < 0)
            {
                return double.NaN;
            }

            return n < 32
                ? DoubleFactorialMultiply(n)
                : Math.Round(Math.Exp(LogDoubleFactorialGamma(n)));
        }

        /// <summary>
        /// The double factorial, <c>n!!</c>, of the given integer.
        /// <para />
        /// The double factorial of an integer is the product all integers of the same parity, up to and including the integer.
        /// <code>n!! = n(n-2)(n-4) ...</code>
        /// <para />
        /// Thus 5!! = 5 * 3 * 1 = 15 and 6!! = 6 * 4 * 2 = 48.
        /// </summary>
        /// <param name="n">The argument, which must be positive.</param>
        /// <returns>The value of the double factorial.</returns>
        /// <seealso href="http://mathworld.wolfram.com/DoubleFactorial.html"/>
        public static double DoubleFactorialGsl(int n)
        {
            if (n < 0)
            {
                return double.NaN;
            }

            return n < DoubleFactorialMaxN
                ? DoubleFactorials[n]
                : double.PositiveInfinity;
        }

        /// <summary>
        /// The natural logarithm of the double factorial, n!!, of the given integer number.
        /// </summary>
        /// <param name="n">The argument, which must be positive.</param>
        /// <returns>The value of ln(n!!).</returns>
        /// <seealso href="http://mathworld.wolfram.com/DoubleFactorial.html"/>
        public static double LogDoubleFactorial(int n)
        {
            if (n < 0)
            {
                return double.NaN;
            }

            return n < 32
                ? Math.Log(DoubleFactorialMultiply(n))
                : LogDoubleFactorialGamma(n);
        }

        /// <summary>
        /// The natural logarithm of the double factorial, n!!, of the given integer number.
        /// </summary>
        /// <param name="n">The argument, which must be positive.</param>
        /// <returns>The value of ln(n!!).</returns>
        /// <seealso href="http://mathworld.wolfram.com/DoubleFactorial.html"/>
        public static double LogDoubleFactorialGsl(int n)
        {
            if (n < 0)
            {
                return double.NaN;
            }

            double value;
            if (n <= DoubleFactorialMaxN)
            {
                return Math.Log(DoubleFactorials[n]);
            }

            if (ElementaryFunctions.IsOdd(n))
            {
                value = LnGamma(0.5 * (n + 2d));
                value += 0.5 * (n + 1d) * Constants.Ln2 - 0.5 * Constants.LnPi;
                return value;
            }

            value = LnGamma(0.5 * n + 1d);
            value += 0.5 * n * Constants.Ln2;
            return value;
        }

        /// <summary>
        /// The binomial coefficient Cⁿᵏ, the number of ways of picking <paramref name="k" />
        /// unordered outcomes from <paramref name="n" /> possibilities.
        /// </summary>
        /// <param name="n">The number of possibilities.</param>
        /// <param name="k">The number of outcomes to pick.</param>
        /// <returns>The number of ways of picking <paramref name="k" />
        /// unordered outcomes from <paramref name="n" /> possibilities.</returns>
        public static double BinomialCoefficient(int n, int k)
        {
            if (n < 0)
            {
                int n1 = -n + k - 1;
                if (n1 == n)
                {
                    return 0d;
                }

                return (k & 1) != 0 ? -BinomialCoefficient(n1, k) : BinomialCoefficient(n1, k);
            }

            if (k < 0 || k > n)
            {
                return 0d;
            }

            return n < FactorialMaxN
                ? Factorials[n] / Factorials[k] / Factorials[n - k]
                : Math.Exp(LogFactorial(n) - LogFactorial(k) - LogFactorial(n - k));
        }

        /// <summary>
        /// The binomial coefficient Cⁿᵏ, the number of ways of picking <paramref name="k" />
        /// unordered outcomes from <paramref name="n" /> possibilities.
        /// </summary>
        /// <param name="n">The number of possibilities.</param>
        /// <param name="k">The number of outcomes to pick.</param>
        /// <returns>The number of ways of picking <paramref name="k" />
        /// unordered outcomes from <paramref name="n" /> possibilities.</returns>
        public static double BinomialCoefficientGsl(int n, int k)
        {
            if (k > n)
            {
                return double.NaN;
            }

            if (k == n || k == 0)
            {
                return 1d;
            }

            if (n <= FactorialMaxN)
            {
                return (Factorials[n] / Factorials[k]) / Factorials[n - k];
            }

            if (k * 2 < n)
            {
                k = n - k;
            }

            if (n - k < 64)
            {
                // Compute product for a manageable number of terms.
                double product = 1d;
                for (int i = n; i >= k + 1; --i)
                {
                    var tk = (double)i / (i - k);
                    if (tk > Constants.DoubleMax / product)
                    {
                        return double.PositiveInfinity;
                    }

                    product *= tk;
                }

                return product;
            }

            return Math.Exp(LogBinomialCoefficient(n, k));
        }

        /// <summary>
        /// The natural logarithm of the binomial coefficient Cⁿᵏ, the number of ways of picking <paramref name="k" />
        /// unordered outcomes from <paramref name="n" /> possibilities.
        /// </summary>
        /// <param name="n">The number of possibilities.</param>
        /// <param name="k">The number of outcomes to pick.</param>
        /// <returns>The natural logarithm of the binomial coefficient.</returns>
        public static double LogBinomialCoefficient(int n, int k)
        {
            if (k > n)
            {
                return double.NaN;
            }

            if (k == n || k == 0)
            {
                return 0d;
            }

            if (k * 2 > n)
            {
                k = n - k;
            }

            return LogFactorial(n) - LogFactorial(k) - LogFactorial(n - k);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static long DoubleFactorialMultiply(int n)
        {
            long f = 1L;
            for (int k = n; k > 1; k -= 2)
            {
                f *= k;
            }

            return f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static double LogDoubleFactorialGamma(int n)
        {
            if (n % 2 == 0)
            {
                // m = n/2, n!! = 2ᵐ Γ(m+1)
                int m = n / 2;
                return m * Constants.Ln2 + LnGamma(m + 1d);
            }
            else
            {
                // m = (n+1)/2, n!! = 2ᵐ Γ(m+1/2) / √̅π
                int m = (n + 1) / 2;
                return m * Constants.Ln2 + LnGamma(m + 0.5) - Math.Log(Constants.Pi) / 2d;
            }
        }
    }
}
