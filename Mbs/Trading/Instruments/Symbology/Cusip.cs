namespace Mbs.Trading.Instruments.Symbology
{
    /// <summary>
    /// CUSIP (Committee on Uniform Security Identification Procedures) utilities.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The acronym CUSIP typically refers to both the Committee on Uniform Security Identification Procedures
    /// and the 9-character alphanumeric security identifiers that they distribute for all North American
    /// securities for the purposes of facilitating clearing and settlement of trades. The CUSIP distribution
    /// system is owned by the American Bankers Association and is operated by Standard &amp; Poor's. The CUSIP
    /// Services Bureau acts as the National Numbering Association (NNA) for North America, and the CUSIP serves
    /// as the National Securities Identification Number for products issued from both the United States and Canada.
    /// </para>
    /// <para>
    /// The first six characters are known as the "base" (or "CUSIP-6"), and uniquely identify the issuer. Issuer
    /// codes are assigned alphabetically from a series that includes deliberate built-in "gaps" for future
    /// expansion. The last two characters of the issuer code can be letters, in order to provide more room for
    /// expansion. The numbers from 990000 up are reserved, as are xxx990 and up within each group of 1000 (i.e.,
    /// 100990 to 1009ZZ).
    /// </para>
    /// <para>
    /// The 7th and 8th digit identify the exact issue, the format is dependent on the type of security. In general,
    /// numbers are used for equity and letters are used for fixed income. For commercial papers the first issue
    /// character is generated by taking the letter code of the maturity month, the second issue character is the
    /// day of the maturity date, with letters used for numbers over 9. The first security issued by any particular
    /// issuer is numbered "10". Newer issues are numbered by adding ten to the last used number up to 80, at which
    /// point the next issue is "88" and then goes down by tens. The issue number "01" is used to label all options
    /// on equities from that issuer.
    /// </para>
    /// <para>
    /// Fixed income issues are labeled using a similar fashion, but due to there being so many of them they use
    /// letters instead of digits. The first issue is labeled "AA", the next "A2", then "2A" and onto "A3". To
    /// avoid confusion, the letters I and O are not used to avoid confusion with the digits 1 and 0.
    /// </para>
    /// <para>
    /// The 9th digit is an automatically generated check digit using the "Modulus 10 Double Add Double" technique.
    /// To calculate the check digit every second digit is multiplied by two. Letters are converted to numbers by
    /// adding their ordinal position in the alphabet to 9, such that A = 10 and M = 22. The resulting string of
    /// digits (numbers greater than 10 becoming two separate digits) are added up. The ten's-complement of the
    /// last number is the check digit. In other words, the sum of the digits, including the check-digit, is a
    /// multiple of 10. Some clearing bodies ignore or truncate the last digit.
    /// </para>
    /// <para>
    /// CINS adds a single country code letter to be the beginning of an otherwise similar CUSIP. These are not
    /// standard country codes, for instance Norway is "R". A table of the country codes appears on the CUSIP
    /// web site.
    /// </para>
    /// <para>
    /// The CUSIP number consists of nine characters: a base number of six characters known as the issuer number,
    /// the 4th, 5th and/or 6th position of which may be alpha or numeric and a two character suffix (either
    /// numeric or alphabetic or both) known as the issue number. The ninth character is a check digit which is
    /// described later.
    /// </para>
    /// <para>
    /// Issuer Number.
    /// </para>
    /// <para>
    /// A single alphabetical file of corporate, municipal, and government issuers has been developed, and an
    /// issuer number of six characters has been assigned to each in alphabetical sequence. One number will be
    /// assigned to an issuer, except in those few cases where the issue numbers are not sufficient to accommodate
    /// all outstanding issues with their various rates and maturities, such as U. S. Governments and certain
    /// municipalities or states. In such instances, one or more additional issuer numbers will be assigned.
    /// </para>
    /// <para>
    /// The Issue Number.
    /// </para>
    /// <para>
    /// The issue number uniquely identifies each individual issue of an issuer. (Each individual rate and
    /// maturity is considered a separate issue for numbering purposes.) The issue number consists of two
    /// numeric characters when assigned to equity securities and two alphabetic characters or one numeric
    /// and one alphabetic character when assigned to fixed income securities (this permits the user to
    /// differentiate between issues in the two groups).
    /// </para>
    /// <para>
    /// Issue numbers are assigned in sequence as each issue is originated. However, in the setting up of the
    /// CUSIP numbering system and in the assignment of numbers to issues then in existence, numbers were assigned
    /// on the basis of rate and maturity and no consideration was given to the original date of issue.
    /// </para>
    /// <para>
    /// Issue Numbers for Equity Securities: The first issue number for an issuer's equity securities is 10
    /// (blanks in the issue number position indicate this is an issuer; in some cases only an issuer number
    /// has been assigned as additional information is gathered, it will be added to the CUSIP file). The
    /// unit position of the equity number is used to identify rights, warrants and so on and is assigned on
    /// an as-available basis. When there are insufficient tens positions available for all individual issues,
    /// the necessary additional numbers are found through the use of the first open two-position digit in
    /// reverse sequence starting with 88 and assigned in descending order. (see illustration below) Issue
    /// numbers 00-09 are reserved for future use.
    /// </para>
    /// <para>
    /// Options: Issue number 01 has been designated to identify options for an issuer.
    /// </para>
    /// <para>
    /// Overflow Linkage: Issue Number 89 will be reserved for overflow linkage and will not be assigned to a
    /// specific issue.
    /// </para>
    /// <para>
    /// Issue Numbers for Fixed Income Securities: The issue number assigned to an issuer's fixed income
    /// securities may consist of two alphabetic characters (AA etc.), one alphabetic character followed by one
    /// digit (A2 etc.), or one digit followed by one alphabetic character (2A etc.), assigned in that order. A
    /// separate issue number is assigned to each rate and/or maturity for each issue of bonds thus a serial
    /// bond having 40 different maturities is assigned 40 separate issue numbers but general obligations of a
    /// municipality having the same issue date, rate and maturity are normally assigned the same number
    /// regardless of purpose. The alphabetic letter 'I' and numeric '1' as well as the alphabetic 'O' and
    /// numeric zero are not used in the assignment of issue numbers to fixed income securities.
    /// </para>
    /// <para>
    /// Overflow Linkage: Issue Number 9Z will be reserved for overflow linkage and will not be assigned
    /// to a specific use.
    /// </para>
    /// <para>
    /// Issue Numbers Reserved for Internal Use: Issue Numbers 90 through 99 in the equity group, and 9A through
    /// 9Y in the fixed income group, are reserved for the user specifically for assignment to those issues of
    /// an eligible issuer where no CUSIP issue number has been assigned.
    /// </para>
    /// <para>
    /// Alpha characters and their equivalent numerical values.
    /// </para>
    /// <para>
    /// Alphabetic characters are assigned a numeric value. The letter A will be 10; and the value of each
    /// subsequent letter will be the preceding letter's value incremented by 1: A = 10, B = 11, C = 12,
    /// D = 13, E = 14, F = 15, G = 16, H = 17, I = 18, J = 19, K = 20, L = 21, M = 22, N = 23, O = 24,
    /// P = 25, Q = 26, R = 27, S = 28, T= 29, U = 30, V = 31, W = 32, X = 33, Y = 34, Z = 35.
    /// </para>
    /// <para>
    /// International Issues.
    /// </para>
    /// <para>
    /// For securities and other financial instruments actively traded on an international basis, which are
    /// either underwritten (debt issues) or domiciled (equities) outside the United States and Canada, the
    /// security will be identified by a CINS (CUSIP International Numbering System) number.
    /// </para>
    /// <para>
    /// CINS numbers employ the same Issuer (6 characters)/Issue (2 character &amp; check digit) concept espoused
    /// by the CUSIP Numbering System, which is described in detail on the following page. The first position of
    /// a CINS code is always represented by an alpha character, signifying the Issuer's country code (domicile)
    /// or geographic region:
    /// </para>
    /// <para>
    /// A = Austria, B = Belgium, C = Canada, D = Germany, E = Spain, F = France, G = United Kingdom,
    /// H = Switzerland, J = Japan, K = Denmark, L = Luxembourg, M = Mid-East, N = Netherlands,
    /// P = South America, Q = Australia, R = Norway, S = South Africa, T = Italy, U = United States,
    /// V = Africa Other, W = Sweden, X = Europe Other, Y = Asia.
    /// </para>
    /// <para>
    /// See https://en.wikipedia.org/wiki/CUSIP,
    /// https://www.cusip.com/static/html/cusipaccess/CUSIPIntro_%207.26.2007.pdf.
    /// </para>
    /// </remarks>
    public static class Cusip
    {
        /// <summary>
        /// Checks for the validity of the given CUSIP.
        /// </summary>
        /// <param name="cusip">The CUSIP.</param>
        /// <returns>True if CUSIP is valid.</returns>
        public static bool IsValidCusip(this string cusip)
        {
            char[] input = cusip.ToCharArray();
            int number = input.Length;
            if (number != 9)
            {
                return false;
            }

            number = input[8];
            if (number < '0' || number > '9')
            {
                return false;
            }

            int sum = 0;
            bool multiply = true;
            for (int i = 7; i > -1; --i)
            {
                number = input[i];
                if (i < 3)
                {
                    if (number >= '0' && number <= '9')
                    {
                        number -= '0';
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    if (number >= 'A' && number <= 'Z')
                    {
                        number = number - 'A' + 10;
                    }
                    else if (number >= '0' && number <= '9')
                    {
                        number -= '0';
                    }
                    else
                    {
                        return false;
                    }
                }

                if (number < 10)
                {
                    number *= multiply ? 2 : 1;
                    multiply = !multiply;
                }
                else
                {
                    int d = number / 10;
                    number %= 10;
                    number *= multiply ? 2 : 1;
                    d *= multiply ? 1 : 2;
                    sum += d % 10 + d / 10;
                }

                sum += number % 10 + number / 10;
            }

            sum = (10 - sum % 10) % 10;
            return sum == input[8] - '0';
        }

        /// <summary>
        /// Checks for the validity of the given CUSIP.
        /// </summary>
        /// <param name="cusip">The CUSIP.</param>
        /// <returns>True if CUSIP is valid.</returns>
        public static bool IsValidCusip2(this string cusip)
        {
            char[] number = cusip.ToCharArray();
            int len = number.Length - 1;
            int sum = 0;
            int digit;
            for (int i = 0; i < len; ++i)
            {
                digit = MapChar(number[i]);

                // Double all the odd digits.
                if (i % 2 != 0)
                {
                    digit *= 2;
                }

                // Combine digits; i.e., 16 = (1 + 6) = 7.
                if (digit > 9)
                {
                    digit = digit % 10 + digit / 10;
                }

                sum += digit;
            }

            // Extract the check digit.
            digit = MapChar(number[len]);
            sum = (10 - sum % 10) % 10;
            return sum == digit;
        }

        /// <summary>
        /// Standard &amp; Poor's maps A..Z to 10..35.
        /// </summary>
        /// <param name="c">A character.</param>
        /// <returns>The numeric value of the letter.</returns>
        private static int MapChar(char c)
        {
            if (c >= '0' && c <= '9')
            {
                return c - '0';
            }

            return c - 'A' + 10;
        }
    }
}
